
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00003148  000031dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  008000a2  008000a2  0000321e  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e8b  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000068b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000087ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a444  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <main>
      8a:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 18 	jmp	0x310e	; 0x310e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 18 	jmp	0x310e	; 0x310e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 18 	jmp	0x312e	; 0x312e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Cal_Init>:
 *
 * 				Cal_Init Function
 *
 ********************************************************/
void Cal_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
     b4e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_Init>
	LCD_Init();
     b52:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_Init>
	KEYPAD_Init();
     b56:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <KEYPAD_Init>
}
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <ShiftArray>:
 *
 * 				ShiftArray Function
 *
 ********************************************************/
void ShiftArray(u8 index)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <ShiftArray+0x6>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=index;i<=arr_index;i++)
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	12 c0       	rjmp	.+36     	; 0xb96 <ShiftArray+0x36>
	{
		arr_cal[i]=arr_cal[i+2];
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 96       	adiw	r24, 0x02	; 2
     b80:	fc 01       	movw	r30, r24
     b82:	ee 55       	subi	r30, 0x5E	; 94
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	80 81       	ld	r24, Z
     b88:	f9 01       	movw	r30, r18
     b8a:	ee 55       	subi	r30, 0x5E	; 94
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 83       	st	Z, r24
 * 				ShiftArray Function
 *
 ********************************************************/
void ShiftArray(u8 index)
{
	for(u8 i=index;i<=arr_index;i++)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	90 91 06 01 	lds	r25, 0x0106
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	98 17       	cp	r25, r24
     b9e:	48 f7       	brcc	.-46     	; 0xb72 <ShiftArray+0x12>
	{
		arr_cal[i]=arr_cal[i+2];
	}
	arr_index-=2;
     ba0:	80 91 06 01 	lds	r24, 0x0106
     ba4:	82 50       	subi	r24, 0x02	; 2
     ba6:	80 93 06 01 	sts	0x0106, r24
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <Cal_Result>:
 *
 * 				Cal_Result Function
 *
 ********************************************************/
void Cal_Result(void)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	00 d0       	rcall	.+0      	; 0xbba <Cal_Result+0x6>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	/*******Multiplication and Division operators********/
	for(u8 i=0;i<=arr_index;i++)
     bbe:	1a 82       	std	Y+2, r1	; 0x02
     bc0:	59 c0       	rjmp	.+178    	; 0xc74 <Cal_Result+0xc0>
	{
		if(arr_cal[i]=='*')
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	fc 01       	movw	r30, r24
     bca:	ee 55       	subi	r30, 0x5E	; 94
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	80 81       	ld	r24, Z
     bd0:	8a 32       	cpi	r24, 0x2A	; 42
     bd2:	11 f5       	brne	.+68     	; 0xc18 <Cal_Result+0x64>
		{
			arr_cal[i-1] *= arr_cal[i+1];
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9c 01       	movw	r18, r24
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	30 40       	sbci	r19, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	fc 01       	movw	r30, r24
     bea:	ee 55       	subi	r30, 0x5E	; 94
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	40 81       	ld	r20, Z
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	fc 01       	movw	r30, r24
     bfa:	ee 55       	subi	r30, 0x5E	; 94
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	80 81       	ld	r24, Z
     c00:	48 9f       	mul	r20, r24
     c02:	80 2d       	mov	r24, r0
     c04:	11 24       	eor	r1, r1
     c06:	f9 01       	movw	r30, r18
     c08:	ee 55       	subi	r30, 0x5E	; 94
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	80 83       	st	Z, r24
			ShiftArray(i);
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	0e 94 b0 05 	call	0xb60	; 0xb60 <ShiftArray>
			i=0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	2b c0       	rjmp	.+86     	; 0xc6e <Cal_Result+0xba>
		}
		else if(arr_cal[i]=='/')
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	ee 55       	subi	r30, 0x5E	; 94
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	80 81       	ld	r24, Z
     c26:	8f 32       	cpi	r24, 0x2F	; 47
     c28:	11 f5       	brne	.+68     	; 0xc6e <Cal_Result+0xba>
		{
			arr_cal[i-1] /= arr_cal[i+1];
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9c 01       	movw	r18, r24
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	30 40       	sbci	r19, 0x00	; 0
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	fc 01       	movw	r30, r24
     c40:	ee 55       	subi	r30, 0x5E	; 94
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	40 81       	ld	r20, Z
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	fc 01       	movw	r30, r24
     c50:	ee 55       	subi	r30, 0x5E	; 94
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	90 81       	ld	r25, Z
     c56:	84 2f       	mov	r24, r20
     c58:	69 2f       	mov	r22, r25
     c5a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmodqi4>
     c5e:	f9 01       	movw	r30, r18
     c60:	ee 55       	subi	r30, 0x5E	; 94
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 83       	st	Z, r24
			ShiftArray(i);
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	0e 94 b0 05 	call	0xb60	; 0xb60 <ShiftArray>
			i=0;
     c6c:	1a 82       	std	Y+2, r1	; 0x02
 *
 ********************************************************/
void Cal_Result(void)
{
	/*******Multiplication and Division operators********/
	for(u8 i=0;i<=arr_index;i++)
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	8a 83       	std	Y+2, r24	; 0x02
     c74:	90 91 06 01 	lds	r25, 0x0106
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	98 17       	cp	r25, r24
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <Cal_Result+0xcc>
     c7e:	a1 cf       	rjmp	.-190    	; 0xbc2 <Cal_Result+0xe>
			ShiftArray(i);
			i=0;
		}
	}
	/***********Addition and subtraction*****************/
	for(u8 i=0;i<=arr_index;i++)
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	87 c0       	rjmp	.+270    	; 0xd92 <Cal_Result+0x1de>
	{
		if(arr_cal[i]=='+')
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	ee 55       	subi	r30, 0x5E	; 94
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	80 81       	ld	r24, Z
     c92:	8b 32       	cpi	r24, 0x2B	; 43
     c94:	01 f5       	brne	.+64     	; 0xcd6 <Cal_Result+0x122>
		{
			arr_cal[i-1]+=arr_cal[i+1];
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9c 01       	movw	r18, r24
     c9e:	21 50       	subi	r18, 0x01	; 1
     ca0:	30 40       	sbci	r19, 0x00	; 0
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	fc 01       	movw	r30, r24
     cac:	ee 55       	subi	r30, 0x5E	; 94
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	40 81       	ld	r20, Z
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	fc 01       	movw	r30, r24
     cbc:	ee 55       	subi	r30, 0x5E	; 94
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 81       	ld	r24, Z
     cc2:	84 0f       	add	r24, r20
     cc4:	f9 01       	movw	r30, r18
     cc6:	ee 55       	subi	r30, 0x5E	; 94
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 83       	st	Z, r24
			ShiftArray(i);
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	0e 94 b0 05 	call	0xb60	; 0xb60 <ShiftArray>
			i=0;
     cd2:	19 82       	std	Y+1, r1	; 0x01
     cd4:	5b c0       	rjmp	.+182    	; 0xd8c <Cal_Result+0x1d8>
		}
		else if(arr_cal[i]=='-')
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	ee 55       	subi	r30, 0x5E	; 94
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	8d 32       	cpi	r24, 0x2D	; 45
     ce6:	09 f0       	breq	.+2      	; 0xcea <Cal_Result+0x136>
     ce8:	51 c0       	rjmp	.+162    	; 0xd8c <Cal_Result+0x1d8>
		{
			if(arr_cal[i-1]>=arr_cal[i+1])
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	fc 01       	movw	r30, r24
     cf4:	ee 55       	subi	r30, 0x5E	; 94
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	20 81       	ld	r18, Z
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	fc 01       	movw	r30, r24
     d04:	ee 55       	subi	r30, 0x5E	; 94
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 81       	ld	r24, Z
     d0a:	28 17       	cp	r18, r24
     d0c:	f0 f0       	brcs	.+60     	; 0xd4a <Cal_Result+0x196>
			{
				arr_cal[i-1]-=arr_cal[i+1];
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 01       	movw	r18, r24
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	30 40       	sbci	r19, 0x00	; 0
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	fc 01       	movw	r30, r24
     d24:	ee 55       	subi	r30, 0x5E	; 94
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	40 81       	ld	r20, Z
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	fc 01       	movw	r30, r24
     d34:	ee 55       	subi	r30, 0x5E	; 94
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	80 81       	ld	r24, Z
     d3a:	94 2f       	mov	r25, r20
     d3c:	98 1b       	sub	r25, r24
     d3e:	89 2f       	mov	r24, r25
     d40:	f9 01       	movw	r30, r18
     d42:	ee 55       	subi	r30, 0x5E	; 94
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 83       	st	Z, r24
     d48:	1d c0       	rjmp	.+58     	; 0xd84 <Cal_Result+0x1d0>
			}
			else
			{
				arr_cal[i+1]-=arr_cal[i-1];
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c 01       	movw	r18, r24
     d52:	2f 5f       	subi	r18, 0xFF	; 255
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	fc 01       	movw	r30, r24
     d60:	ee 55       	subi	r30, 0x5E	; 94
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	40 81       	ld	r20, Z
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	fc 01       	movw	r30, r24
     d70:	ee 55       	subi	r30, 0x5E	; 94
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	94 2f       	mov	r25, r20
     d78:	98 1b       	sub	r25, r24
     d7a:	89 2f       	mov	r24, r25
     d7c:	f9 01       	movw	r30, r18
     d7e:	ee 55       	subi	r30, 0x5E	; 94
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 83       	st	Z, r24
			}
			ShiftArray(i);
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	0e 94 b0 05 	call	0xb60	; 0xb60 <ShiftArray>
			i=0;
     d8a:	19 82       	std	Y+1, r1	; 0x01
			ShiftArray(i);
			i=0;
		}
	}
	/***********Addition and subtraction*****************/
	for(u8 i=0;i<=arr_index;i++)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	90 91 06 01 	lds	r25, 0x0106
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	98 17       	cp	r25, r24
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <Cal_Result+0x1ea>
     d9c:	73 cf       	rjmp	.-282    	; 0xc84 <Cal_Result+0xd0>
			}
			ShiftArray(i);
			i=0;
		}
	}
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <DisplayResult>:
 *
 * 				DisplayResult Function
 *
 ********************************************************/
void DisplayResult(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	rowNum=0;
     db0:	10 92 09 01 	sts	0x0109, r1
	colNum=0;
     db4:	10 92 0a 01 	sts	0x010A, r1

	LCD_Clear();
     db8:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <LCD_Clear>
	LCD_GoTo(rowNum, colNum);
     dbc:	80 91 09 01 	lds	r24, 0x0109
     dc0:	90 91 0a 01 	lds	r25, 0x010A
     dc4:	69 2f       	mov	r22, r25
     dc6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <LCD_GoTo>

	LCD_WriteString("Result = ");
     dca:	80 e6       	ldi	r24, 0x60	; 96
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_WriteString>
	LCD_GoTo(0, 9);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	69 e0       	ldi	r22, 0x09	; 9
     dd6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <LCD_GoTo>

	  	  	  /******Result will display in 7 digits******/
	//7
	LCD_WriteChar((arr_cal[arr_index]/1000000)+'0');
     dda:	80 91 06 01 	lds	r24, 0x0106
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	ee 55       	subi	r30, 0x5E	; 94
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	20 e4       	ldi	r18, 0x40	; 64
     df4:	32 e4       	ldi	r19, 0x42	; 66
     df6:	4f e0       	ldi	r20, 0x0F	; 15
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
     e02:	da 01       	movw	r26, r20
     e04:	c9 01       	movw	r24, r18
     e06:	80 5d       	subi	r24, 0xD0	; 208
     e08:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//6
	LCD_WriteChar(((arr_cal[arr_index]%1000000)/100000)+'0');
     e0c:	80 91 06 01 	lds	r24, 0x0106
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	ee 55       	subi	r30, 0x5E	; 94
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 81       	ld	r24, Z
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	20 e4       	ldi	r18, 0x40	; 64
     e26:	32 e4       	ldi	r19, 0x42	; 66
     e28:	4f e0       	ldi	r20, 0x0F	; 15
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	20 ea       	ldi	r18, 0xA0	; 160
     e3a:	36 e8       	ldi	r19, 0x86	; 134
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
     e48:	da 01       	movw	r26, r20
     e4a:	c9 01       	movw	r24, r18
     e4c:	80 5d       	subi	r24, 0xD0	; 208
     e4e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//5
	LCD_WriteChar(((arr_cal[arr_index]%100000)/10000)+'0');
     e52:	80 91 06 01 	lds	r24, 0x0106
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	ee 55       	subi	r30, 0x5E	; 94
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	20 ea       	ldi	r18, 0xA0	; 160
     e6c:	36 e8       	ldi	r19, 0x86	; 134
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	20 e1       	ldi	r18, 0x10	; 16
     e80:	37 e2       	ldi	r19, 0x27	; 39
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
     e8e:	da 01       	movw	r26, r20
     e90:	c9 01       	movw	r24, r18
     e92:	80 5d       	subi	r24, 0xD0	; 208
     e94:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//4
	LCD_WriteChar(((arr_cal[arr_index]%10000)/1000)+'0');
     e98:	80 91 06 01 	lds	r24, 0x0106
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	ee 55       	subi	r30, 0x5E	; 94
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	20 e1       	ldi	r18, 0x10	; 16
     eae:	37 e2       	ldi	r19, 0x27	; 39
     eb0:	b9 01       	movw	r22, r18
     eb2:	0e 94 1b 18 	call	0x3036	; 0x3036 <__divmodhi4>
     eb6:	28 ee       	ldi	r18, 0xE8	; 232
     eb8:	33 e0       	ldi	r19, 0x03	; 3
     eba:	b9 01       	movw	r22, r18
     ebc:	0e 94 1b 18 	call	0x3036	; 0x3036 <__divmodhi4>
     ec0:	cb 01       	movw	r24, r22
     ec2:	80 5d       	subi	r24, 0xD0	; 208
     ec4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//3
	LCD_WriteChar(((arr_cal[arr_index]%1000)/100)+'0');
     ec8:	80 91 06 01 	lds	r24, 0x0106
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	fc 01       	movw	r30, r24
     ed2:	ee 55       	subi	r30, 0x5E	; 94
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	28 ee       	ldi	r18, 0xE8	; 232
     ede:	33 e0       	ldi	r19, 0x03	; 3
     ee0:	b9 01       	movw	r22, r18
     ee2:	0e 94 1b 18 	call	0x3036	; 0x3036 <__divmodhi4>
     ee6:	24 e6       	ldi	r18, 0x64	; 100
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	b9 01       	movw	r22, r18
     eec:	0e 94 1b 18 	call	0x3036	; 0x3036 <__divmodhi4>
     ef0:	cb 01       	movw	r24, r22
     ef2:	80 5d       	subi	r24, 0xD0	; 208
     ef4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//2
	LCD_WriteChar(((arr_cal[arr_index]%100)/10)+'0');
     ef8:	80 91 06 01 	lds	r24, 0x0106
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	ee 55       	subi	r30, 0x5E	; 94
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	94 e6       	ldi	r25, 0x64	; 100
     f0a:	69 2f       	mov	r22, r25
     f0c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmodqi4>
     f10:	89 2f       	mov	r24, r25
     f12:	9a e0       	ldi	r25, 0x0A	; 10
     f14:	69 2f       	mov	r22, r25
     f16:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmodqi4>
     f1a:	80 5d       	subi	r24, 0xD0	; 208
     f1c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	//1
	LCD_WriteChar(((arr_cal[arr_index]%10)/1)+'0');
     f20:	80 91 06 01 	lds	r24, 0x0106
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	ee 55       	subi	r30, 0x5E	; 94
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	9a e0       	ldi	r25, 0x0A	; 10
     f32:	69 2f       	mov	r22, r25
     f34:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmodqi4>
     f38:	89 2f       	mov	r24, r25
     f3a:	80 5d       	subi	r24, 0xD0	; 208
     f3c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>

	flagResult=1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 08 01 	sts	0x0108, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <get_Num>:
 *
 * 				get_Num Function
 *
 ********************************************************/
void get_Num(u8 dig)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	 dig-='0';
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	80 53       	subi	r24, 0x30	; 48
     f5c:	89 83       	std	Y+1, r24	; 0x01
	 arr_cal[arr_index]*=10;
     f5e:	80 91 06 01 	lds	r24, 0x0106
     f62:	48 2f       	mov	r20, r24
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	80 91 06 01 	lds	r24, 0x0106
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	fc 01       	movw	r30, r24
     f70:	ee 55       	subi	r30, 0x5E	; 94
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 01       	movw	r18, r24
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	c9 01       	movw	r24, r18
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	fa 01       	movw	r30, r20
     f90:	ee 55       	subi	r30, 0x5E	; 94
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 83       	st	Z, r24
	 arr_cal[arr_index]+=dig;
     f96:	80 91 06 01 	lds	r24, 0x0106
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	80 91 06 01 	lds	r24, 0x0106
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	ee 55       	subi	r30, 0x5E	; 94
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	90 81       	ld	r25, Z
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	89 0f       	add	r24, r25
     fb2:	f9 01       	movw	r30, r18
     fb4:	ee 55       	subi	r30, 0x5E	; 94
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 83       	st	Z, r24
}
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <CheckNum>:
 *
 * 				CheckNum Function
 *
 ********************************************************/
void CheckNum(u8 num)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	if((num!='*') && (num!='/') && (num!='+') && (num!='-'))
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8a 32       	cpi	r24, 0x2A	; 42
     fd2:	69 f0       	breq	.+26     	; 0xfee <CheckNum+0x2c>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f 32       	cpi	r24, 0x2F	; 47
     fd8:	51 f0       	breq	.+20     	; 0xfee <CheckNum+0x2c>
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	8b 32       	cpi	r24, 0x2B	; 43
     fde:	39 f0       	breq	.+14     	; 0xfee <CheckNum+0x2c>
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	8d 32       	cpi	r24, 0x2D	; 45
     fe4:	21 f0       	breq	.+8      	; 0xfee <CheckNum+0x2c>
	{
		/***this means that the input is a number not an operator and store in in the array***/
		get_Num(num);
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <get_Num>
     fec:	13 c0       	rjmp	.+38     	; 0x1014 <CheckNum+0x52>
	}
	else
	{
		/****store the taken operator in the array****/
		arr_index++;
     fee:	80 91 06 01 	lds	r24, 0x0106
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 06 01 	sts	0x0106, r24
		arr_cal[arr_index]=num;
     ff8:	80 91 06 01 	lds	r24, 0x0106
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	ee 55       	subi	r30, 0x5E	; 94
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	80 83       	st	Z, r24
		arr_index++;
    100a:	80 91 06 01 	lds	r24, 0x0106
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 06 01 	sts	0x0106, r24
	}
}
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <Calculator>:
 *
 * 				Calculator Function
 *
 ********************************************************/
void Calculator(void)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	key=KEYPAD_GetKey();
    1026:	0e 94 31 17 	call	0x2e62	; 0x2e62 <KEYPAD_GetKey>
    102a:	80 93 07 01 	sts	0x0107, r24

	if(key!=NO_KEY)
    102e:	80 91 07 01 	lds	r24, 0x0107
    1032:	84 35       	cpi	r24, 0x54	; 84
    1034:	09 f4       	brne	.+2      	; 0x1038 <Calculator+0x1c>
    1036:	42 c0       	rjmp	.+132    	; 0x10bc <Calculator+0xa0>
	{
		if(key=='=')
    1038:	80 91 07 01 	lds	r24, 0x0107
    103c:	8d 33       	cpi	r24, 0x3D	; 61
    103e:	21 f4       	brne	.+8      	; 0x1048 <Calculator+0x2c>
		{
			Cal_Result();
    1040:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Cal_Result>
			DisplayResult();
    1044:	0e 94 d4 06 	call	0xda8	; 0xda8 <DisplayResult>
		}
		if(key!='=')
    1048:	80 91 07 01 	lds	r24, 0x0107
    104c:	8d 33       	cpi	r24, 0x3D	; 61
    104e:	b1 f1       	breq	.+108    	; 0x10bc <Calculator+0xa0>
		{
			/***when this flag =1 ,this means that the result was displayed on the LCD***/
			if(flagResult==1)
    1050:	80 91 08 01 	lds	r24, 0x0108
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	a9 f4       	brne	.+42     	; 0x1082 <Calculator+0x66>
			{
				LCD_Clear();
    1058:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <LCD_Clear>
				arr_index=0;
    105c:	10 92 06 01 	sts	0x0106, r1
				flagResult=0;
    1060:	10 92 08 01 	sts	0x0108, r1
				for(u8 i=0;i<arr_size;i++)
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	0a c0       	rjmp	.+20     	; 0x107c <Calculator+0x60>
				{
					arr_cal[i]=0;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	ee 55       	subi	r30, 0x5E	; 94
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	10 82       	st	Z, r1
			if(flagResult==1)
			{
				LCD_Clear();
				arr_index=0;
				flagResult=0;
				for(u8 i=0;i<arr_size;i++)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	84 36       	cpi	r24, 0x64	; 100
    1080:	98 f3       	brcs	.-26     	; 0x1068 <Calculator+0x4c>
				{
					arr_cal[i]=0;
				}
			}
			CheckNum(key);
    1082:	80 91 07 01 	lds	r24, 0x0107
    1086:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <CheckNum>
			LCD_GoTo(rowNum, colNum);
    108a:	80 91 09 01 	lds	r24, 0x0109
    108e:	90 91 0a 01 	lds	r25, 0x010A
    1092:	69 2f       	mov	r22, r25
    1094:	0e 94 20 15 	call	0x2a40	; 0x2a40 <LCD_GoTo>
			LCD_WriteChar(key);
    1098:	80 91 07 01 	lds	r24, 0x0107
    109c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
			colNum++;
    10a0:	80 91 0a 01 	lds	r24, 0x010A
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 0a 01 	sts	0x010A, r24
			if(colNum==21)
    10aa:	80 91 0a 01 	lds	r24, 0x010A
    10ae:	85 31       	cpi	r24, 0x15	; 21
    10b0:	29 f4       	brne	.+10     	; 0x10bc <Calculator+0xa0>
			{
				rowNum++;
    10b2:	80 91 09 01 	lds	r24, 0x0109
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 09 01 	sts	0x0109, r24
			}


		}
	}
}
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_Init>:
#include "DIO_Private.h"



void DIO_Init(void)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <DIO_Init+0x2a>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	fc 01       	movw	r30, r24
    10da:	ee 58       	subi	r30, 0x8E	; 142
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	90 81       	ld	r25, Z
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	69 2f       	mov	r22, r25
    10e4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <DIO_InitPin>

void DIO_Init(void)
{
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	80 32       	cpi	r24, 0x20	; 32
    10f2:	78 f3       	brcs	.-34     	; 0x10d2 <DIO_Init+0xe>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <DIO_InitPin>:




void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	2c 97       	sbiw	r28, 0x0c	; 12
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	87 70       	andi	r24, 0x07	; 7
    1118:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	86 95       	lsr	r24
    111e:	86 95       	lsr	r24
    1120:	86 95       	lsr	r24
    1122:	89 83       	std	Y+1, r24	; 0x01

	switch(status)
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3c 87       	std	Y+12, r19	; 0x0c
    112c:	2b 87       	std	Y+11, r18	; 0x0b
    112e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1130:	9c 85       	ldd	r25, Y+12	; 0x0c
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <DIO_InitPin+0x3e>
    1138:	c9 c0       	rjmp	.+402    	; 0x12cc <DIO_InitPin+0x1d0>
    113a:	2b 85       	ldd	r18, Y+11	; 0x0b
    113c:	3c 85       	ldd	r19, Y+12	; 0x0c
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <DIO_InitPin+0x4a>
    1144:	85 c1       	rjmp	.+778    	; 0x1450 <DIO_InitPin+0x354>
    1146:	8b 85       	ldd	r24, Y+11	; 0x0b
    1148:	9c 85       	ldd	r25, Y+12	; 0x0c
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	09 f0       	breq	.+2      	; 0x1150 <DIO_InitPin+0x54>
    114e:	3d c2       	rjmp	.+1146   	; 0x15ca <DIO_InitPin+0x4ce>
	{
		case OUTPUT:
		switch(port)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3a 87       	std	Y+10, r19	; 0x0a
    1158:	29 87       	std	Y+9, r18	; 0x09
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <DIO_InitPin+0x6a>
    1164:	3e c0       	rjmp	.+124    	; 0x11e2 <DIO_InitPin+0xe6>
    1166:	29 85       	ldd	r18, Y+9	; 0x09
    1168:	3a 85       	ldd	r19, Y+10	; 0x0a
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	2c f4       	brge	.+10     	; 0x117a <DIO_InitPin+0x7e>
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	71 f0       	breq	.+28     	; 0x1194 <DIO_InitPin+0x98>
    1178:	28 c2       	rjmp	.+1104   	; 0x15ca <DIO_InitPin+0x4ce>
    117a:	29 85       	ldd	r18, Y+9	; 0x09
    117c:	3a 85       	ldd	r19, Y+10	; 0x0a
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <DIO_InitPin+0x8a>
    1184:	55 c0       	rjmp	.+170    	; 0x1230 <DIO_InitPin+0x134>
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <DIO_InitPin+0x96>
    1190:	76 c0       	rjmp	.+236    	; 0x127e <DIO_InitPin+0x182>
    1192:	1b c2       	rjmp	.+1078   	; 0x15ca <DIO_InitPin+0x4ce>
		{
			case PA:
			SET_BIT(DDRA,pin_num);
    1194:	aa e3       	ldi	r26, 0x3A	; 58
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ea e3       	ldi	r30, 0x3A	; 58
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_InitPin+0xb4>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	2a 95       	dec	r18
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_InitPin+0xb0>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    11b8:	ab e3       	ldi	r26, 0x3B	; 59
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_InitPin+0xda>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_InitPin+0xd6>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	f4 c1       	rjmp	.+1000   	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PB:
			SET_BIT(DDRB,pin_num);
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_InitPin+0x102>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	2a 95       	dec	r18
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_InitPin+0xfe>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_InitPin+0x128>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_InitPin+0x124>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	cd c1       	rjmp	.+922    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
    1230:	a4 e3       	ldi	r26, 0x34	; 52
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e4 e3       	ldi	r30, 0x34	; 52
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_InitPin+0x150>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	2a 95       	dec	r18
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_InitPin+0x14c>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    1254:	a5 e3       	ldi	r26, 0x35	; 53
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e5 e3       	ldi	r30, 0x35	; 53
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_InitPin+0x176>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_InitPin+0x172>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	a6 c1       	rjmp	.+844    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_InitPin+0x19e>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	2a 95       	dec	r18
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_InitPin+0x19a>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    12a2:	a2 e3       	ldi	r26, 0x32	; 50
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_InitPin+0x1c4>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_InitPin+0x1c0>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	7f c1       	rjmp	.+766    	; 0x15ca <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INFREE:
		switch(port)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	38 87       	std	Y+8, r19	; 0x08
    12d4:	2f 83       	std	Y+7, r18	; 0x07
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_InitPin+0x1e6>
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <DIO_InitPin+0x264>
    12e2:	2f 81       	ldd	r18, Y+7	; 0x07
    12e4:	38 85       	ldd	r19, Y+8	; 0x08
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <DIO_InitPin+0x1fa>
    12ec:	8f 81       	ldd	r24, Y+7	; 0x07
    12ee:	98 85       	ldd	r25, Y+8	; 0x08
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	71 f0       	breq	.+28     	; 0x1310 <DIO_InitPin+0x214>
    12f4:	6a c1       	rjmp	.+724    	; 0x15ca <DIO_InitPin+0x4ce>
    12f6:	2f 81       	ldd	r18, Y+7	; 0x07
    12f8:	38 85       	ldd	r19, Y+8	; 0x08
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <DIO_InitPin+0x206>
    1300:	57 c0       	rjmp	.+174    	; 0x13b0 <DIO_InitPin+0x2b4>
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	91 05       	cpc	r25, r1
    130a:	09 f4       	brne	.+2      	; 0x130e <DIO_InitPin+0x212>
    130c:	79 c0       	rjmp	.+242    	; 0x1400 <DIO_InitPin+0x304>
    130e:	5d c1       	rjmp	.+698    	; 0x15ca <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    1310:	aa e3       	ldi	r26, 0x3A	; 58
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_InitPin+0x230>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	2a 95       	dec	r18
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_InitPin+0x22c>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_InitPin+0x258>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_InitPin+0x254>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	35 c1       	rjmp	.+618    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    1360:	a7 e3       	ldi	r26, 0x37	; 55
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e7 e3       	ldi	r30, 0x37	; 55
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_InitPin+0x280>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	2a 95       	dec	r18
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_InitPin+0x27c>
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    1386:	a8 e3       	ldi	r26, 0x38	; 56
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 e3       	ldi	r30, 0x38	; 56
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_InitPin+0x2a8>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_InitPin+0x2a4>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	0d c1       	rjmp	.+538    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    13b0:	a4 e3       	ldi	r26, 0x34	; 52
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e4 e3       	ldi	r30, 0x34	; 52
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_InitPin+0x2d0>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	2a 95       	dec	r18
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_InitPin+0x2cc>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_InitPin+0x2f8>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_InitPin+0x2f4>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	e5 c0       	rjmp	.+458    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1400:	a1 e3       	ldi	r26, 0x31	; 49
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_InitPin+0x320>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_InitPin+0x31c>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    1426:	a2 e3       	ldi	r26, 0x32	; 50
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e2 e3       	ldi	r30, 0x32	; 50
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_InitPin+0x348>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_InitPin+0x344>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	bd c0       	rjmp	.+378    	; 0x15ca <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INPULL:
		switch(port)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3e 83       	std	Y+6, r19	; 0x06
    1458:	2d 83       	std	Y+5, r18	; 0x05
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_InitPin+0x36a>
    1464:	3e c0       	rjmp	.+124    	; 0x14e2 <DIO_InitPin+0x3e6>
    1466:	2d 81       	ldd	r18, Y+5	; 0x05
    1468:	3e 81       	ldd	r19, Y+6	; 0x06
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	2c f4       	brge	.+10     	; 0x147a <DIO_InitPin+0x37e>
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	71 f0       	breq	.+28     	; 0x1494 <DIO_InitPin+0x398>
    1478:	a8 c0       	rjmp	.+336    	; 0x15ca <DIO_InitPin+0x4ce>
    147a:	2d 81       	ldd	r18, Y+5	; 0x05
    147c:	3e 81       	ldd	r19, Y+6	; 0x06
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <DIO_InitPin+0x38a>
    1484:	55 c0       	rjmp	.+170    	; 0x1530 <DIO_InitPin+0x434>
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <DIO_InitPin+0x396>
    1490:	76 c0       	rjmp	.+236    	; 0x157e <DIO_InitPin+0x482>
    1492:	9b c0       	rjmp	.+310    	; 0x15ca <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    1494:	aa e3       	ldi	r26, 0x3A	; 58
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ea e3       	ldi	r30, 0x3A	; 58
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_InitPin+0x3b4>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	2a 95       	dec	r18
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_InitPin+0x3b0>
    14b4:	80 95       	com	r24
    14b6:	84 23       	and	r24, r20
    14b8:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin_num);
    14ba:	ab e3       	ldi	r26, 0x3B	; 59
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_InitPin+0x3dc>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_InitPin+0x3d8>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	74 c0       	rjmp	.+232    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    14e2:	a7 e3       	ldi	r26, 0x37	; 55
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e7 e3       	ldi	r30, 0x37	; 55
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_InitPin+0x402>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	2a 95       	dec	r18
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_InitPin+0x3fe>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
    1508:	a8 e3       	ldi	r26, 0x38	; 56
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_InitPin+0x42a>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_InitPin+0x426>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	4d c0       	rjmp	.+154    	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    1530:	a4 e3       	ldi	r26, 0x34	; 52
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e4 e3       	ldi	r30, 0x34	; 52
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_InitPin+0x450>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	2a 95       	dec	r18
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_InitPin+0x44c>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
    1556:	a5 e3       	ldi	r26, 0x35	; 53
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_InitPin+0x478>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_InitPin+0x474>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	26 c0       	rjmp	.+76     	; 0x15ca <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    157e:	a1 e3       	ldi	r26, 0x31	; 49
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e1 e3       	ldi	r30, 0x31	; 49
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_InitPin+0x49e>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	2a 95       	dec	r18
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_InitPin+0x49a>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    15a4:	a2 e3       	ldi	r26, 0x32	; 50
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_InitPin+0x4c6>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_InitPin+0x4c2>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24

		}
		break;

	}
}
    15ca:	2c 96       	adiw	r28, 0x0c	; 12
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	28 97       	sbiw	r28, 0x08	; 8
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	87 70       	andi	r24, 0x07	; 7
    15f8:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	89 83       	std	Y+1, r24	; 0x01

	if(volt==HIGH)
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	09 f0       	breq	.+2      	; 0x160c <DIO_WritePin+0x30>
    160a:	6f c0       	rjmp	.+222    	; 0x16ea <DIO_WritePin+0x10e>
	{
		switch(port)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	38 87       	std	Y+8, r19	; 0x08
    1614:	2f 83       	std	Y+7, r18	; 0x07
    1616:	8f 81       	ldd	r24, Y+7	; 0x07
    1618:	98 85       	ldd	r25, Y+8	; 0x08
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	49 f1       	breq	.+82     	; 0x1672 <DIO_WritePin+0x96>
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	38 85       	ldd	r19, Y+8	; 0x08
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <DIO_WritePin+0x58>
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	98 85       	ldd	r25, Y+8	; 0x08
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	61 f0       	breq	.+24     	; 0x164a <DIO_WritePin+0x6e>
    1632:	ce c0       	rjmp	.+412    	; 0x17d0 <DIO_WritePin+0x1f4>
    1634:	2f 81       	ldd	r18, Y+7	; 0x07
    1636:	38 85       	ldd	r19, Y+8	; 0x08
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	71 f1       	breq	.+92     	; 0x169a <DIO_WritePin+0xbe>
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
    1640:	98 85       	ldd	r25, Y+8	; 0x08
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	e9 f1       	breq	.+122    	; 0x16c2 <DIO_WritePin+0xe6>
    1648:	c3 c0       	rjmp	.+390    	; 0x17d0 <DIO_WritePin+0x1f4>
		{
			case PA:

			SET_BIT(PORTA,pin_num);
    164a:	ab e3       	ldi	r26, 0x3B	; 59
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	eb e3       	ldi	r30, 0x3B	; 59
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_WritePin+0x8c>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_WritePin+0x88>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	af c0       	rjmp	.+350    	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PB:

			SET_BIT(PORTB,pin_num);
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_WritePin+0xb4>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_WritePin+0xb0>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	9b c0       	rjmp	.+310    	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PC:

			SET_BIT(PORTC,pin_num);
    169a:	a5 e3       	ldi	r26, 0x35	; 53
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_WritePin+0xdc>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_WritePin+0xd8>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	87 c0       	rjmp	.+270    	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PD:

			SET_BIT(PORTD,pin_num);
    16c2:	a2 e3       	ldi	r26, 0x32	; 50
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e2 e3       	ldi	r30, 0x32	; 50
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_WritePin+0x104>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_WritePin+0x100>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	73 c0       	rjmp	.+230    	; 0x17d0 <DIO_WritePin+0x1f4>

		}
	}
	else
	{
		switch(port)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3e 83       	std	Y+6, r19	; 0x06
    16f2:	2d 83       	std	Y+5, r18	; 0x05
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	59 f1       	breq	.+86     	; 0x1754 <DIO_WritePin+0x178>
    16fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1700:	3e 81       	ldd	r19, Y+6	; 0x06
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	2c f4       	brge	.+10     	; 0x1712 <DIO_WritePin+0x136>
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f0       	breq	.+26     	; 0x172a <DIO_WritePin+0x14e>
    1710:	5f c0       	rjmp	.+190    	; 0x17d0 <DIO_WritePin+0x1f4>
    1712:	2d 81       	ldd	r18, Y+5	; 0x05
    1714:	3e 81       	ldd	r19, Y+6	; 0x06
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	89 f1       	breq	.+98     	; 0x177e <DIO_WritePin+0x1a2>
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	91 05       	cpc	r25, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <DIO_WritePin+0x14c>
    1726:	40 c0       	rjmp	.+128    	; 0x17a8 <DIO_WritePin+0x1cc>
    1728:	53 c0       	rjmp	.+166    	; 0x17d0 <DIO_WritePin+0x1f4>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
    172a:	ab e3       	ldi	r26, 0x3B	; 59
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_WritePin+0x16c>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_WritePin+0x168>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PB:
			CLR_BIT(PORTB,pin_num);
    1754:	a8 e3       	ldi	r26, 0x38	; 56
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e3       	ldi	r30, 0x38	; 56
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_WritePin+0x196>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_WritePin+0x192>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	29 c0       	rjmp	.+82     	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_WritePin+0x1c0>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_WritePin+0x1bc>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <DIO_WritePin+0x1f4>
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
    17a8:	a2 e3       	ldi	r26, 0x32	; 50
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e3       	ldi	r30, 0x32	; 50
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_WritePin+0x1ea>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_WritePin+0x1e6>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
			break;

		}
	}
}
    17d0:	28 96       	adiw	r28, 0x08	; 8
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <DIO_ReadPin>:


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <DIO_ReadPin+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <DIO_ReadPin+0x8>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <DIO_ReadPin+0xa>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin_num = pin%8;
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	87 70       	andi	r24, 0x07	; 7
    17f6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port=pin/8;
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	86 95       	lsr	r24
    17fc:	86 95       	lsr	r24
    17fe:	86 95       	lsr	r24
    1800:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    1802:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3e 83       	std	Y+6, r19	; 0x06
    180c:	2d 83       	std	Y+5, r18	; 0x05
    180e:	4d 81       	ldd	r20, Y+5	; 0x05
    1810:	5e 81       	ldd	r21, Y+6	; 0x06
    1812:	41 30       	cpi	r20, 0x01	; 1
    1814:	51 05       	cpc	r21, r1
    1816:	41 f1       	breq	.+80     	; 0x1868 <DIO_ReadPin+0x86>
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	34 f4       	brge	.+12     	; 0x182e <DIO_ReadPin+0x4c>
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	61 f0       	breq	.+24     	; 0x1844 <DIO_ReadPin+0x62>
    182c:	52 c0       	rjmp	.+164    	; 0x18d2 <DIO_ReadPin+0xf0>
    182e:	4d 81       	ldd	r20, Y+5	; 0x05
    1830:	5e 81       	ldd	r21, Y+6	; 0x06
    1832:	42 30       	cpi	r20, 0x02	; 2
    1834:	51 05       	cpc	r21, r1
    1836:	51 f1       	breq	.+84     	; 0x188c <DIO_ReadPin+0xaa>
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	b9 f1       	breq	.+110    	; 0x18b0 <DIO_ReadPin+0xce>
    1842:	47 c0       	rjmp	.+142    	; 0x18d2 <DIO_ReadPin+0xf0>
	{
		case PA:

		volt=READ_BIT(PINA,pin_num);
    1844:	e9 e3       	ldi	r30, 0x39	; 57
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_ReadPin+0x7a>
    1858:	55 95       	asr	r21
    185a:	47 95       	ror	r20
    185c:	8a 95       	dec	r24
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_ReadPin+0x76>
    1860:	ca 01       	movw	r24, r20
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	35 c0       	rjmp	.+106    	; 0x18d2 <DIO_ReadPin+0xf0>
		break;
		case PB:

		volt=READ_BIT(PINB,pin_num);
    1868:	e6 e3       	ldi	r30, 0x36	; 54
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_ReadPin+0x9e>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_ReadPin+0x9a>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	23 c0       	rjmp	.+70     	; 0x18d2 <DIO_ReadPin+0xf0>
		break;
		case PC:

		volt=READ_BIT(PINC,pin_num);
    188c:	e3 e3       	ldi	r30, 0x33	; 51
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a9 01       	movw	r20, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_ReadPin+0xc2>
    18a0:	55 95       	asr	r21
    18a2:	47 95       	ror	r20
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_ReadPin+0xbe>
    18a8:	ca 01       	movw	r24, r20
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	11 c0       	rjmp	.+34     	; 0x18d2 <DIO_ReadPin+0xf0>
		break;
		case PD:

		volt=READ_BIT(PIND,pin_num);
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_ReadPin+0xe6>
    18c4:	55 95       	asr	r21
    18c6:	47 95       	ror	r20
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_ReadPin+0xe2>
    18cc:	ca 01       	movw	r24, r20
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return volt;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d4:	26 96       	adiw	r28, 0x06	; 6
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_TogglePin+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_TogglePin+0x8>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num = pin%8;
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	87 70       	andi	r24, 0x07	; 7
    18fa:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	86 95       	lsr	r24
    1900:	86 95       	lsr	r24
    1902:	86 95       	lsr	r24
    1904:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3d 83       	std	Y+5, r19	; 0x05
    190e:	2c 83       	std	Y+4, r18	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	49 f1       	breq	.+82     	; 0x196c <DIO_TogglePin+0x86>
    191a:	2c 81       	ldd	r18, Y+4	; 0x04
    191c:	3d 81       	ldd	r19, Y+5	; 0x05
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <DIO_TogglePin+0x48>
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <DIO_TogglePin+0x5e>
    192c:	5a c0       	rjmp	.+180    	; 0x19e2 <DIO_TogglePin+0xfc>
    192e:	2c 81       	ldd	r18, Y+4	; 0x04
    1930:	3d 81       	ldd	r19, Y+5	; 0x05
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	71 f1       	breq	.+92     	; 0x1994 <DIO_TogglePin+0xae>
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	e9 f1       	breq	.+122    	; 0x19bc <DIO_TogglePin+0xd6>
    1942:	4f c0       	rjmp	.+158    	; 0x19e2 <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
    1944:	ab e3       	ldi	r26, 0x3B	; 59
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	eb e3       	ldi	r30, 0x3B	; 59
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_TogglePin+0x7c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_TogglePin+0x78>
    1966:	84 27       	eor	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	3b c0       	rjmp	.+118    	; 0x19e2 <DIO_TogglePin+0xfc>
		break;
		case PB:
		TOG_BIT(PORTB,pin_num);
    196c:	a8 e3       	ldi	r26, 0x38	; 56
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_TogglePin+0xa4>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_TogglePin+0xa0>
    198e:	84 27       	eor	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	27 c0       	rjmp	.+78     	; 0x19e2 <DIO_TogglePin+0xfc>
		break;
		case PC:
		TOG_BIT(PORTC,pin_num);
    1994:	a5 e3       	ldi	r26, 0x35	; 53
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e5 e3       	ldi	r30, 0x35	; 53
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_TogglePin+0xcc>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_TogglePin+0xc8>
    19b6:	84 27       	eor	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <DIO_TogglePin+0xfc>
		break;
		case PD:
		TOG_BIT(PORTD,pin_num);
    19bc:	a2 e3       	ldi	r26, 0x32	; 50
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e2 e3       	ldi	r30, 0x32	; 50
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_TogglePin+0xf4>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_TogglePin+0xf0>
    19de:	84 27       	eor	r24, r20
    19e0:	8c 93       	st	X, r24
		break;

	}
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <DIO_WritePort>:


void DIO_WritePort(DIO_Port_type port, u8 data)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_WritePort+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_WritePort+0x8>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3c 83       	std	Y+4, r19	; 0x04
    1a0a:	2b 83       	std	Y+3, r18	; 0x03
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	d1 f0       	breq	.+52     	; 0x1a4a <DIO_WritePort+0x58>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <DIO_WritePort+0x38>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <DIO_WritePort+0x4e>
    1a28:	1e c0       	rjmp	.+60     	; 0x1a66 <DIO_WritePort+0x74>
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <DIO_WritePort+0x62>
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	81 f0       	breq	.+32     	; 0x1a5e <DIO_WritePort+0x6c>
    1a3e:	13 c0       	rjmp	.+38     	; 0x1a66 <DIO_WritePort+0x74>
	{
		case PA:
		PORTA = data;
    1a40:	eb e3       	ldi	r30, 0x3B	; 59
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	0e c0       	rjmp	.+28     	; 0x1a66 <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB = data;
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC = data;;
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD = data;;
    1a5e:	e2 e3       	ldi	r30, 0x32	; 50
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	80 83       	st	Z, r24
		break;

	}
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <DIO_ReadPort+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <DIO_ReadPort+0x8>
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    1a82:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3c 83       	std	Y+4, r19	; 0x04
    1a8c:	2b 83       	std	Y+3, r18	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <DIO_ReadPort+0x58>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <DIO_ReadPort+0x38>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <DIO_ReadPort+0x4e>
    1aaa:	1e c0       	rjmp	.+60     	; 0x1ae8 <DIO_ReadPort+0x74>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <DIO_ReadPort+0x62>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <DIO_ReadPort+0x6c>
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <DIO_ReadPort+0x74>
	{
		case PA:
		data = PINA;
    1ac2:	e9 e3       	ldi	r30, 0x39	; 57
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <DIO_ReadPort+0x74>
		break;
		case PB:
		data = PINB;
    1acc:	e6 e3       	ldi	r30, 0x36	; 54
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <DIO_ReadPort+0x74>
		break;
		case PC:
		data = PINC;;
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <DIO_ReadPort+0x74>
		break;
		case PD:
		data = PIND;;
    1ae0:	e0 e3       	ldi	r30, 0x30	; 48
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return data;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	e9 97       	sbiw	r28, 0x39	; 57
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, LOW);
    1b0e:	8c e1       	ldi	r24, 0x1C	; 28
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    1b16:	89 ad       	ldd	r24, Y+57	; 0x39
    1b18:	98 2f       	mov	r25, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	99 27       	eor	r25, r25
    1b1e:	99 1f       	adc	r25, r25
    1b20:	83 e1       	ldi	r24, 0x13	; 19
    1b22:	69 2f       	mov	r22, r25
    1b24:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    1b28:	89 ad       	ldd	r24, Y+57	; 0x39
    1b2a:	82 95       	swap	r24
    1b2c:	86 95       	lsr	r24
    1b2e:	86 95       	lsr	r24
    1b30:	83 70       	andi	r24, 0x03	; 3
    1b32:	98 2f       	mov	r25, r24
    1b34:	91 70       	andi	r25, 0x01	; 1
    1b36:	82 e1       	ldi	r24, 0x12	; 18
    1b38:	69 2f       	mov	r22, r25
    1b3a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    1b3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b40:	82 95       	swap	r24
    1b42:	86 95       	lsr	r24
    1b44:	87 70       	andi	r24, 0x07	; 7
    1b46:	98 2f       	mov	r25, r24
    1b48:	91 70       	andi	r25, 0x01	; 1
    1b4a:	81 e1       	ldi	r24, 0x11	; 17
    1b4c:	69 2f       	mov	r22, r25
    1b4e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    1b52:	89 ad       	ldd	r24, Y+57	; 0x39
    1b54:	82 95       	swap	r24
    1b56:	8f 70       	andi	r24, 0x0F	; 15
    1b58:	98 2f       	mov	r25, r24
    1b5a:	91 70       	andi	r25, 0x01	; 1
    1b5c:	80 e1       	ldi	r24, 0x10	; 16
    1b5e:	69 2f       	mov	r22, r25
    1b60:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1b64:	8e e1       	ldi	r24, 0x1E	; 30
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e8       	ldi	r26, 0x80	; 128
    1b72:	bf e3       	ldi	r27, 0x3F	; 63
    1b74:	8d ab       	std	Y+53, r24	; 0x35
    1b76:	9e ab       	std	Y+54, r25	; 0x36
    1b78:	af ab       	std	Y+55, r26	; 0x37
    1b7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b80:	8f a9       	ldd	r24, Y+55	; 0x37
    1b82:	98 ad       	ldd	r25, Y+56	; 0x38
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	89 ab       	std	Y+49, r24	; 0x31
    1b96:	9a ab       	std	Y+50, r25	; 0x32
    1b98:	ab ab       	std	Y+51, r26	; 0x33
    1b9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <WriteIns+0xc6>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	98 ab       	std	Y+48, r25	; 0x30
    1bba:	8f a7       	std	Y+47, r24	; 0x2f
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <WriteIns+0x144>
	else if (__tmp > 65535)
    1bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <WriteIns+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bda:	8f a9       	ldd	r24, Y+55	; 0x37
    1bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	98 ab       	std	Y+48, r25	; 0x30
    1bfc:	8f a7       	std	Y+47, r24	; 0x2f
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <WriteIns+0x126>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9e a7       	std	Y+46, r25	; 0x2e
    1c06:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <WriteIns+0x114>
    1c10:	9e a7       	std	Y+46, r25	; 0x2e
    1c12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c16:	98 a9       	ldd	r25, Y+48	; 0x30
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	98 ab       	std	Y+48, r25	; 0x30
    1c1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <WriteIns+0x108>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <WriteIns+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c40:	9c a7       	std	Y+44, r25	; 0x2c
    1c42:	8b a7       	std	Y+43, r24	; 0x2b
    1c44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <WriteIns+0x150>
    1c4c:	9c a7       	std	Y+44, r25	; 0x2c
    1c4e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1c50:	8e e1       	ldi	r24, 0x1E	; 30
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a0 e8       	ldi	r26, 0x80	; 128
    1c5e:	bf e3       	ldi	r27, 0x3F	; 63
    1c60:	8f a3       	std	Y+39, r24	; 0x27
    1c62:	98 a7       	std	Y+40, r25	; 0x28
    1c64:	a9 a7       	std	Y+41, r26	; 0x29
    1c66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6f a1       	ldd	r22, Y+39	; 0x27
    1c6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8b a3       	std	Y+35, r24	; 0x23
    1c82:	9c a3       	std	Y+36, r25	; 0x24
    1c84:	ad a3       	std	Y+37, r26	; 0x25
    1c86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c88:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <WriteIns+0x1b2>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a a3       	std	Y+34, r25	; 0x22
    1ca6:	89 a3       	std	Y+33, r24	; 0x21
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <WriteIns+0x230>
	else if (__tmp > 65535)
    1caa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cac:	7c a1       	ldd	r23, Y+36	; 0x24
    1cae:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <WriteIns+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9a a3       	std	Y+34, r25	; 0x22
    1ce8:	89 a3       	std	Y+33, r24	; 0x21
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <WriteIns+0x212>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf6:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <WriteIns+0x200>
    1cfc:	98 a3       	std	Y+32, r25	; 0x20
    1cfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	89 a1       	ldd	r24, Y+33	; 0x21
    1d02:	9a a1       	ldd	r25, Y+34	; 0x22
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9a a3       	std	Y+34, r25	; 0x22
    1d08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <WriteIns+0x1f4>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <WriteIns+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6b a1       	ldd	r22, Y+35	; 0x23
    1d16:	7c a1       	ldd	r23, Y+36	; 0x24
    1d18:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <WriteIns+0x23c>
    1d38:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(ins,3));
    1d3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d3e:	86 95       	lsr	r24
    1d40:	86 95       	lsr	r24
    1d42:	86 95       	lsr	r24
    1d44:	98 2f       	mov	r25, r24
    1d46:	91 70       	andi	r25, 0x01	; 1
    1d48:	83 e1       	ldi	r24, 0x13	; 19
    1d4a:	69 2f       	mov	r22, r25
    1d4c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    1d50:	89 ad       	ldd	r24, Y+57	; 0x39
    1d52:	86 95       	lsr	r24
    1d54:	86 95       	lsr	r24
    1d56:	98 2f       	mov	r25, r24
    1d58:	91 70       	andi	r25, 0x01	; 1
    1d5a:	82 e1       	ldi	r24, 0x12	; 18
    1d5c:	69 2f       	mov	r22, r25
    1d5e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    1d62:	89 ad       	ldd	r24, Y+57	; 0x39
    1d64:	86 95       	lsr	r24
    1d66:	98 2f       	mov	r25, r24
    1d68:	91 70       	andi	r25, 0x01	; 1
    1d6a:	81 e1       	ldi	r24, 0x11	; 17
    1d6c:	69 2f       	mov	r22, r25
    1d6e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    1d72:	89 ad       	ldd	r24, Y+57	; 0x39
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	80 e1       	ldi	r24, 0x10	; 16
    1d7a:	69 2f       	mov	r22, r25
    1d7c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1d80:	8e e1       	ldi	r24, 0x1E	; 30
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e8       	ldi	r26, 0x80	; 128
    1d8e:	bf e3       	ldi	r27, 0x3F	; 63
    1d90:	89 8f       	std	Y+25, r24	; 0x19
    1d92:	9a 8f       	std	Y+26, r25	; 0x1a
    1d94:	ab 8f       	std	Y+27, r26	; 0x1b
    1d96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a ef       	ldi	r20, 0xFA	; 250
    1da6:	54 e4       	ldi	r21, 0x44	; 68
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8d 8b       	std	Y+21, r24	; 0x15
    1db2:	9e 8b       	std	Y+22, r25	; 0x16
    1db4:	af 8b       	std	Y+23, r26	; 0x17
    1db6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <WriteIns+0x2e2>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <WriteIns+0x360>
	else if (__tmp > 65535)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <WriteIns+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	69 8d       	ldd	r22, Y+25	; 0x19
    1df4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <WriteIns+0x342>
    1e1c:	88 ec       	ldi	r24, 0xC8	; 200
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9a 8b       	std	Y+18, r25	; 0x12
    1e22:	89 8b       	std	Y+17, r24	; 0x11
    1e24:	89 89       	ldd	r24, Y+17	; 0x11
    1e26:	9a 89       	ldd	r25, Y+18	; 0x12
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <WriteIns+0x330>
    1e2c:	9a 8b       	std	Y+18, r25	; 0x12
    1e2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	8b 89       	ldd	r24, Y+19	; 0x13
    1e32:	9c 89       	ldd	r25, Y+20	; 0x14
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <WriteIns+0x324>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <WriteIns+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6d 89       	ldd	r22, Y+21	; 0x15
    1e46:	7e 89       	ldd	r23, Y+22	; 0x16
    1e48:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	98 8b       	std	Y+16, r25	; 0x10
    1e5e:	8f 87       	std	Y+15, r24	; 0x0f
    1e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e62:	98 89       	ldd	r25, Y+16	; 0x10
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <WriteIns+0x36c>
    1e68:	98 8b       	std	Y+16, r25	; 0x10
    1e6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1e6c:	8e e1       	ldi	r24, 0x1E	; 30
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	8b 87       	std	Y+11, r24	; 0x0b
    1e7e:	9c 87       	std	Y+12, r25	; 0x0c
    1e80:	ad 87       	std	Y+13, r26	; 0x0d
    1e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a ef       	ldi	r20, 0xFA	; 250
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8f 83       	std	Y+7, r24	; 0x07
    1e9e:	98 87       	std	Y+8, r25	; 0x08
    1ea0:	a9 87       	std	Y+9, r26	; 0x09
    1ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <WriteIns+0x3ce>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <WriteIns+0x44c>
	else if (__tmp > 65535)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <WriteIns+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <WriteIns+0x42e>
    1f08:	88 ec       	ldi	r24, 0xC8	; 200
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <WriteIns+0x41c>
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <WriteIns+0x410>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <WriteIns+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <WriteIns+0x458>
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f58:	e9 96       	adiw	r28, 0x39	; 57
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <WriteData>:

void WriteData(u8 data)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	e9 97       	sbiw	r28, 0x39	; 57
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, HIGH);
    1f80:	8c e1       	ldi	r24, 0x1C	; 28
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
    1f88:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	99 27       	eor	r25, r25
    1f90:	99 1f       	adc	r25, r25
    1f92:	83 e1       	ldi	r24, 0x13	; 19
    1f94:	69 2f       	mov	r22, r25
    1f96:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    1f9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f9c:	82 95       	swap	r24
    1f9e:	86 95       	lsr	r24
    1fa0:	86 95       	lsr	r24
    1fa2:	83 70       	andi	r24, 0x03	; 3
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	91 70       	andi	r25, 0x01	; 1
    1fa8:	82 e1       	ldi	r24, 0x12	; 18
    1faa:	69 2f       	mov	r22, r25
    1fac:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    1fb0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb2:	82 95       	swap	r24
    1fb4:	86 95       	lsr	r24
    1fb6:	87 70       	andi	r24, 0x07	; 7
    1fb8:	98 2f       	mov	r25, r24
    1fba:	91 70       	andi	r25, 0x01	; 1
    1fbc:	81 e1       	ldi	r24, 0x11	; 17
    1fbe:	69 2f       	mov	r22, r25
    1fc0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    1fc4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fc6:	82 95       	swap	r24
    1fc8:	8f 70       	andi	r24, 0x0F	; 15
    1fca:	98 2f       	mov	r25, r24
    1fcc:	91 70       	andi	r25, 0x01	; 1
    1fce:	80 e1       	ldi	r24, 0x10	; 16
    1fd0:	69 2f       	mov	r22, r25
    1fd2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1fd6:	8e e1       	ldi	r24, 0x1E	; 30
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e8       	ldi	r26, 0x80	; 128
    1fe4:	bf e3       	ldi	r27, 0x3F	; 63
    1fe6:	8d ab       	std	Y+53, r24	; 0x35
    1fe8:	9e ab       	std	Y+54, r25	; 0x36
    1fea:	af ab       	std	Y+55, r26	; 0x37
    1fec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	89 ab       	std	Y+49, r24	; 0x31
    2008:	9a ab       	std	Y+50, r25	; 0x32
    200a:	ab ab       	std	Y+51, r26	; 0x33
    200c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    200e:	69 a9       	ldd	r22, Y+49	; 0x31
    2010:	7a a9       	ldd	r23, Y+50	; 0x32
    2012:	8b a9       	ldd	r24, Y+51	; 0x33
    2014:	9c a9       	ldd	r25, Y+52	; 0x34
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <WriteData+0xc6>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <WriteData+0x144>
	else if (__tmp > 65535)
    2030:	69 a9       	ldd	r22, Y+49	; 0x31
    2032:	7a a9       	ldd	r23, Y+50	; 0x32
    2034:	8b a9       	ldd	r24, Y+51	; 0x33
    2036:	9c a9       	ldd	r25, Y+52	; 0x34
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6d a9       	ldd	r22, Y+53	; 0x35
    204a:	7e a9       	ldd	r23, Y+54	; 0x36
    204c:	8f a9       	ldd	r24, Y+55	; 0x37
    204e:	98 ad       	ldd	r25, Y+56	; 0x38
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	98 ab       	std	Y+48, r25	; 0x30
    206e:	8f a7       	std	Y+47, r24	; 0x2f
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <WriteData+0x126>
    2072:	88 ec       	ldi	r24, 0xC8	; 200
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e a7       	std	Y+46, r25	; 0x2e
    2078:	8d a7       	std	Y+45, r24	; 0x2d
    207a:	8d a5       	ldd	r24, Y+45	; 0x2d
    207c:	9e a5       	ldd	r25, Y+46	; 0x2e
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <WriteData+0x114>
    2082:	9e a7       	std	Y+46, r25	; 0x2e
    2084:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	98 ab       	std	Y+48, r25	; 0x30
    208e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8f a5       	ldd	r24, Y+47	; 0x2f
    2092:	98 a9       	ldd	r25, Y+48	; 0x30
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <WriteData+0x108>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	98 ab       	std	Y+48, r25	; 0x30
    20ac:	8f a7       	std	Y+47, r24	; 0x2f
    20ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b0:	98 a9       	ldd	r25, Y+48	; 0x30
    20b2:	9c a7       	std	Y+44, r25	; 0x2c
    20b4:	8b a7       	std	Y+43, r24	; 0x2b
    20b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <WriteData+0x150>
    20be:	9c a7       	std	Y+44, r25	; 0x2c
    20c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    20c2:	8e e1       	ldi	r24, 0x1E	; 30
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e8       	ldi	r26, 0x80	; 128
    20d0:	bf e3       	ldi	r27, 0x3F	; 63
    20d2:	8f a3       	std	Y+39, r24	; 0x27
    20d4:	98 a7       	std	Y+40, r25	; 0x28
    20d6:	a9 a7       	std	Y+41, r26	; 0x29
    20d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6f a1       	ldd	r22, Y+39	; 0x27
    20dc:	78 a5       	ldd	r23, Y+40	; 0x28
    20de:	89 a5       	ldd	r24, Y+41	; 0x29
    20e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8b a3       	std	Y+35, r24	; 0x23
    20f4:	9c a3       	std	Y+36, r25	; 0x24
    20f6:	ad a3       	std	Y+37, r26	; 0x25
    20f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20fa:	6b a1       	ldd	r22, Y+35	; 0x23
    20fc:	7c a1       	ldd	r23, Y+36	; 0x24
    20fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2100:	9e a1       	ldd	r25, Y+38	; 0x26
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <WriteData+0x1b2>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	3f c0       	rjmp	.+126    	; 0x219a <WriteData+0x230>
	else if (__tmp > 65535)
    211c:	6b a1       	ldd	r22, Y+35	; 0x23
    211e:	7c a1       	ldd	r23, Y+36	; 0x24
    2120:	8d a1       	ldd	r24, Y+37	; 0x25
    2122:	9e a1       	ldd	r25, Y+38	; 0x26
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6f a1       	ldd	r22, Y+39	; 0x27
    2136:	78 a5       	ldd	r23, Y+40	; 0x28
    2138:	89 a5       	ldd	r24, Y+41	; 0x29
    213a:	9a a5       	ldd	r25, Y+42	; 0x2a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9a a3       	std	Y+34, r25	; 0x22
    215a:	89 a3       	std	Y+33, r24	; 0x21
    215c:	0f c0       	rjmp	.+30     	; 0x217c <WriteData+0x212>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	98 a3       	std	Y+32, r25	; 0x20
    2164:	8f 8f       	std	Y+31, r24	; 0x1f
    2166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2168:	98 a1       	ldd	r25, Y+32	; 0x20
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <WriteData+0x200>
    216e:	98 a3       	std	Y+32, r25	; 0x20
    2170:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	89 a1       	ldd	r24, Y+33	; 0x21
    2174:	9a a1       	ldd	r25, Y+34	; 0x22
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9a a3       	std	Y+34, r25	; 0x22
    217a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <WriteData+0x1f4>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6b a1       	ldd	r22, Y+35	; 0x23
    2188:	7c a1       	ldd	r23, Y+36	; 0x24
    218a:	8d a1       	ldd	r24, Y+37	; 0x25
    218c:	9e a1       	ldd	r25, Y+38	; 0x26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	9a a1       	ldd	r25, Y+34	; 0x22
    219e:	9e 8f       	std	Y+30, r25	; 0x1e
    21a0:	8d 8f       	std	Y+29, r24	; 0x1d
    21a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <WriteData+0x23c>
    21aa:	9e 8f       	std	Y+30, r25	; 0x1e
    21ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(data,3));
    21ae:	89 ad       	ldd	r24, Y+57	; 0x39
    21b0:	86 95       	lsr	r24
    21b2:	86 95       	lsr	r24
    21b4:	86 95       	lsr	r24
    21b6:	98 2f       	mov	r25, r24
    21b8:	91 70       	andi	r25, 0x01	; 1
    21ba:	83 e1       	ldi	r24, 0x13	; 19
    21bc:	69 2f       	mov	r22, r25
    21be:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    21c2:	89 ad       	ldd	r24, Y+57	; 0x39
    21c4:	86 95       	lsr	r24
    21c6:	86 95       	lsr	r24
    21c8:	98 2f       	mov	r25, r24
    21ca:	91 70       	andi	r25, 0x01	; 1
    21cc:	82 e1       	ldi	r24, 0x12	; 18
    21ce:	69 2f       	mov	r22, r25
    21d0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    21d4:	89 ad       	ldd	r24, Y+57	; 0x39
    21d6:	86 95       	lsr	r24
    21d8:	98 2f       	mov	r25, r24
    21da:	91 70       	andi	r25, 0x01	; 1
    21dc:	81 e1       	ldi	r24, 0x11	; 17
    21de:	69 2f       	mov	r22, r25
    21e0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    21e4:	89 ad       	ldd	r24, Y+57	; 0x39
    21e6:	98 2f       	mov	r25, r24
    21e8:	91 70       	andi	r25, 0x01	; 1
    21ea:	80 e1       	ldi	r24, 0x10	; 16
    21ec:	69 2f       	mov	r22, r25
    21ee:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    21f2:	8e e1       	ldi	r24, 0x1E	; 30
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e8       	ldi	r26, 0x80	; 128
    2200:	bf e3       	ldi	r27, 0x3F	; 63
    2202:	89 8f       	std	Y+25, r24	; 0x19
    2204:	9a 8f       	std	Y+26, r25	; 0x1a
    2206:	ab 8f       	std	Y+27, r26	; 0x1b
    2208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	69 8d       	ldd	r22, Y+25	; 0x19
    220c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <WriteData+0x2e2>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <WriteData+0x360>
	else if (__tmp > 65535)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	69 8d       	ldd	r22, Y+25	; 0x19
    2266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <WriteData+0x342>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	9a 89       	ldd	r25, Y+18	; 0x12
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <WriteData+0x330>
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8b 89       	ldd	r24, Y+19	; 0x13
    22a4:	9c 89       	ldd	r25, Y+20	; 0x14
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <WriteData+0x324>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	98 89       	ldd	r25, Y+16	; 0x10
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <WriteData+0x36c>
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    22de:	8e e1       	ldi	r24, 0x1E	; 30
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	8b 87       	std	Y+11, r24	; 0x0b
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	ad 87       	std	Y+13, r26	; 0x0d
    22f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a ef       	ldi	r20, 0xFA	; 250
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	98 87       	std	Y+8, r25	; 0x08
    2312:	a9 87       	std	Y+9, r26	; 0x09
    2314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <WriteData+0x3ce>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <WriteData+0x44c>
	else if (__tmp > 65535)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <WriteData+0x42e>
    237a:	88 ec       	ldi	r24, 0xC8	; 200
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <WriteData+0x41c>
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <WriteData+0x410>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <WriteData+0x458>
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23ca:	e9 96       	adiw	r28, 0x39	; 57
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <LCD_Init>:

void LCD_Init(void)
{
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	c4 55       	subi	r28, 0x54	; 84
    23ea:	d0 40       	sbci	r29, 0x00	; 0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	fe 01       	movw	r30, r28
    23f8:	ef 5a       	subi	r30, 0xAF	; 175
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a8 e4       	ldi	r26, 0x48	; 72
    2402:	b2 e4       	ldi	r27, 0x42	; 66
    2404:	80 83       	st	Z, r24
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	a2 83       	std	Z+2, r26	; 0x02
    240a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	8e 01       	movw	r16, r28
    240e:	03 5b       	subi	r16, 0xB3	; 179
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	ef 5a       	subi	r30, 0xAF	; 175
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	a2 83       	std	Z+2, r26	; 0x02
    2438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243a:	fe 01       	movw	r30, r28
    243c:	e3 5b       	subi	r30, 0xB3	; 179
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	44 f4       	brge	.+16     	; 0x2468 <LCD_Init+0x8c>
		__ticks = 1;
    2458:	fe 01       	movw	r30, r28
    245a:	e5 5b       	subi	r30, 0xB5	; 181
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	64 c0       	rjmp	.+200    	; 0x2530 <LCD_Init+0x154>
	else if (__tmp > 65535)
    2468:	fe 01       	movw	r30, r28
    246a:	e3 5b       	subi	r30, 0xB3	; 179
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	0c f0       	brlt	.+2      	; 0x2488 <LCD_Init+0xac>
    2486:	43 c0       	rjmp	.+134    	; 0x250e <LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ef 5a       	subi	r30, 0xAF	; 175
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8e 01       	movw	r16, r28
    24a8:	05 5b       	subi	r16, 0xB5	; 181
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	1f c0       	rjmp	.+62     	; 0x24fe <LCD_Init+0x122>
    24c0:	fe 01       	movw	r30, r28
    24c2:	e7 5b       	subi	r30, 0xB7	; 183
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_Init+0xfc>
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 5b       	subi	r30, 0xB7	; 183
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	de 01       	movw	r26, r28
    24e8:	a5 5b       	subi	r26, 0xB5	; 181
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e5 5b       	subi	r30, 0xB5	; 181
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	11 96       	adiw	r26, 0x01	; 1
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	fe 01       	movw	r30, r28
    2500:	e5 5b       	subi	r30, 0xB5	; 181
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	d1 f6       	brne	.-76     	; 0x24c0 <LCD_Init+0xe4>
    250c:	27 c0       	rjmp	.+78     	; 0x255c <LCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	8e 01       	movw	r16, r28
    2510:	05 5b       	subi	r16, 0xB5	; 181
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e3 5b       	subi	r30, 0xB3	; 179
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	de 01       	movw	r26, r28
    2532:	a9 5b       	subi	r26, 0xB9	; 185
    2534:	bf 4f       	sbci	r27, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5b       	subi	r30, 0xB5	; 181
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	8d 93       	st	X+, r24
    2542:	9c 93       	st	X, r25
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5b       	subi	r30, 0xB9	; 185
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <LCD_Init+0x172>
    2552:	fe 01       	movw	r30, r28
    2554:	e9 5b       	subi	r30, 0xB9	; 185
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
	_delay_ms(50);
	WriteIns(0x02);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2562:	fe 01       	movw	r30, r28
    2564:	ed 5b       	subi	r30, 0xBD	; 189
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 e8       	ldi	r26, 0x80	; 128
    256e:	bf e3       	ldi	r27, 0x3F	; 63
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	8e 01       	movw	r16, r28
    257a:	01 5c       	subi	r16, 0xC1	; 193
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	ed 5b       	subi	r30, 0xBD	; 189
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a ef       	ldi	r20, 0xFA	; 250
    2592:	54 e4       	ldi	r21, 0x44	; 68
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	f8 01       	movw	r30, r16
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ff 96       	adiw	r30, 0x3f	; 63
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_Init+0x1f0>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9e af       	std	Y+62, r25	; 0x3e
    25c8:	8d af       	std	Y+61, r24	; 0x3d
    25ca:	46 c0       	rjmp	.+140    	; 0x2658 <LCD_Init+0x27c>
	else if (__tmp > 65535)
    25cc:	fe 01       	movw	r30, r28
    25ce:	ff 96       	adiw	r30, 0x3f	; 63
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	64 f5       	brge	.+88     	; 0x2640 <LCD_Init+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	fe 01       	movw	r30, r28
    25ea:	ed 5b       	subi	r30, 0xBD	; 189
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e af       	std	Y+62, r25	; 0x3e
    2614:	8d af       	std	Y+61, r24	; 0x3d
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_Init+0x25a>
    2618:	88 ec       	ldi	r24, 0xC8	; 200
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c af       	std	Y+60, r25	; 0x3c
    261e:	8b af       	std	Y+59, r24	; 0x3b
    2620:	8b ad       	ldd	r24, Y+59	; 0x3b
    2622:	9c ad       	ldd	r25, Y+60	; 0x3c
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_Init+0x248>
    2628:	9c af       	std	Y+60, r25	; 0x3c
    262a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d ad       	ldd	r24, Y+61	; 0x3d
    262e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e af       	std	Y+62, r25	; 0x3e
    2634:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d ad       	ldd	r24, Y+61	; 0x3d
    2638:	9e ad       	ldd	r25, Y+62	; 0x3e
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_Init+0x23c>
    263e:	16 c0       	rjmp	.+44     	; 0x266c <LCD_Init+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	fe 01       	movw	r30, r28
    2642:	ff 96       	adiw	r30, 0x3f	; 63
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e af       	std	Y+62, r25	; 0x3e
    2656:	8d af       	std	Y+61, r24	; 0x3d
    2658:	8d ad       	ldd	r24, Y+61	; 0x3d
    265a:	9e ad       	ldd	r25, Y+62	; 0x3e
    265c:	9a af       	std	Y+58, r25	; 0x3a
    265e:	89 af       	std	Y+57, r24	; 0x39
    2660:	89 ad       	ldd	r24, Y+57	; 0x39
    2662:	9a ad       	ldd	r25, Y+58	; 0x3a
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_Init+0x288>
    2668:	9a af       	std	Y+58, r25	; 0x3a
    266a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	WriteIns(0x28);
    266c:	88 e2       	ldi	r24, 0x28	; 40
    266e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e8       	ldi	r26, 0x80	; 128
    2678:	bf e3       	ldi	r27, 0x3F	; 63
    267a:	8d ab       	std	Y+53, r24	; 0x35
    267c:	9e ab       	std	Y+54, r25	; 0x36
    267e:	af ab       	std	Y+55, r26	; 0x37
    2680:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	6d a9       	ldd	r22, Y+53	; 0x35
    2684:	7e a9       	ldd	r23, Y+54	; 0x36
    2686:	8f a9       	ldd	r24, Y+55	; 0x37
    2688:	98 ad       	ldd	r25, Y+56	; 0x38
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a ef       	ldi	r20, 0xFA	; 250
    2690:	54 e4       	ldi	r21, 0x44	; 68
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	89 ab       	std	Y+49, r24	; 0x31
    269c:	9a ab       	std	Y+50, r25	; 0x32
    269e:	ab ab       	std	Y+51, r26	; 0x33
    26a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a2:	69 a9       	ldd	r22, Y+49	; 0x31
    26a4:	7a a9       	ldd	r23, Y+50	; 0x32
    26a6:	8b a9       	ldd	r24, Y+51	; 0x33
    26a8:	9c a9       	ldd	r25, Y+52	; 0x34
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e8       	ldi	r20, 0x80	; 128
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b6:	88 23       	and	r24, r24
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <LCD_Init+0x2e8>
		__ticks = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
    26c2:	3f c0       	rjmp	.+126    	; 0x2742 <LCD_Init+0x366>
	else if (__tmp > 65535)
    26c4:	69 a9       	ldd	r22, Y+49	; 0x31
    26c6:	7a a9       	ldd	r23, Y+50	; 0x32
    26c8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ca:	9c a9       	ldd	r25, Y+52	; 0x34
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	4c f5       	brge	.+82     	; 0x272e <LCD_Init+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	6d a9       	ldd	r22, Y+53	; 0x35
    26de:	7e a9       	ldd	r23, Y+54	; 0x36
    26e0:	8f a9       	ldd	r24, Y+55	; 0x37
    26e2:	98 ad       	ldd	r25, Y+56	; 0x38
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	98 ab       	std	Y+48, r25	; 0x30
    2702:	8f a7       	std	Y+47, r24	; 0x2f
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <LCD_Init+0x348>
    2706:	88 ec       	ldi	r24, 0xC8	; 200
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9e a7       	std	Y+46, r25	; 0x2e
    270c:	8d a7       	std	Y+45, r24	; 0x2d
    270e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2710:	9e a5       	ldd	r25, Y+46	; 0x2e
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_Init+0x336>
    2716:	9e a7       	std	Y+46, r25	; 0x2e
    2718:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	8f a5       	ldd	r24, Y+47	; 0x2f
    271c:	98 a9       	ldd	r25, Y+48	; 0x30
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	98 ab       	std	Y+48, r25	; 0x30
    2722:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	8f a5       	ldd	r24, Y+47	; 0x2f
    2726:	98 a9       	ldd	r25, Y+48	; 0x30
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	69 f7       	brne	.-38     	; 0x2706 <LCD_Init+0x32a>
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <LCD_Init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	69 a9       	ldd	r22, Y+49	; 0x31
    2730:	7a a9       	ldd	r23, Y+50	; 0x32
    2732:	8b a9       	ldd	r24, Y+51	; 0x33
    2734:	9c a9       	ldd	r25, Y+52	; 0x34
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
    2742:	8f a5       	ldd	r24, Y+47	; 0x2f
    2744:	98 a9       	ldd	r25, Y+48	; 0x30
    2746:	9c a7       	std	Y+44, r25	; 0x2c
    2748:	8b a7       	std	Y+43, r24	; 0x2b
    274a:	8b a5       	ldd	r24, Y+43	; 0x2b
    274c:	9c a5       	ldd	r25, Y+44	; 0x2c
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_Init+0x372>
    2752:	9c a7       	std	Y+44, r25	; 0x2c
    2754:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	WriteIns(0x0C);
    2756:	8c e0       	ldi	r24, 0x0C	; 12
    2758:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e8       	ldi	r26, 0x80	; 128
    2762:	bf e3       	ldi	r27, 0x3F	; 63
    2764:	8f a3       	std	Y+39, r24	; 0x27
    2766:	98 a7       	std	Y+40, r25	; 0x28
    2768:	a9 a7       	std	Y+41, r26	; 0x29
    276a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	6f a1       	ldd	r22, Y+39	; 0x27
    276e:	78 a5       	ldd	r23, Y+40	; 0x28
    2770:	89 a5       	ldd	r24, Y+41	; 0x29
    2772:	9a a5       	ldd	r25, Y+42	; 0x2a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a ef       	ldi	r20, 0xFA	; 250
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8b a3       	std	Y+35, r24	; 0x23
    2786:	9c a3       	std	Y+36, r25	; 0x24
    2788:	ad a3       	std	Y+37, r26	; 0x25
    278a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    278c:	6b a1       	ldd	r22, Y+35	; 0x23
    278e:	7c a1       	ldd	r23, Y+36	; 0x24
    2790:	8d a1       	ldd	r24, Y+37	; 0x25
    2792:	9e a1       	ldd	r25, Y+38	; 0x26
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_Init+0x3d2>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a a3       	std	Y+34, r25	; 0x22
    27aa:	89 a3       	std	Y+33, r24	; 0x21
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_Init+0x450>
	else if (__tmp > 65535)
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_Init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	6f a1       	ldd	r22, Y+39	; 0x27
    27c8:	78 a5       	ldd	r23, Y+40	; 0x28
    27ca:	89 a5       	ldd	r24, Y+41	; 0x29
    27cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9a a3       	std	Y+34, r25	; 0x22
    27ec:	89 a3       	std	Y+33, r24	; 0x21
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_Init+0x432>
    27f0:	88 ec       	ldi	r24, 0xC8	; 200
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	98 a3       	std	Y+32, r25	; 0x20
    27f6:	8f 8f       	std	Y+31, r24	; 0x1f
    27f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27fa:	98 a1       	ldd	r25, Y+32	; 0x20
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_Init+0x420>
    2800:	98 a3       	std	Y+32, r25	; 0x20
    2802:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	89 a1       	ldd	r24, Y+33	; 0x21
    2806:	9a a1       	ldd	r25, Y+34	; 0x22
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9a a3       	std	Y+34, r25	; 0x22
    280c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	89 a1       	ldd	r24, Y+33	; 0x21
    2810:	9a a1       	ldd	r25, Y+34	; 0x22
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_Init+0x414>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_Init+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6b a1       	ldd	r22, Y+35	; 0x23
    281a:	7c a1       	ldd	r23, Y+36	; 0x24
    281c:	8d a1       	ldd	r24, Y+37	; 0x25
    281e:	9e a1       	ldd	r25, Y+38	; 0x26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9a a3       	std	Y+34, r25	; 0x22
    282a:	89 a3       	std	Y+33, r24	; 0x21
    282c:	89 a1       	ldd	r24, Y+33	; 0x21
    282e:	9a a1       	ldd	r25, Y+34	; 0x22
    2830:	9e 8f       	std	Y+30, r25	; 0x1e
    2832:	8d 8f       	std	Y+29, r24	; 0x1d
    2834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2836:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_Init+0x45c>
    283c:	9e 8f       	std	Y+30, r25	; 0x1e
    283e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	WriteIns(0x01); //clear screen
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	b0 e4       	ldi	r27, 0x40	; 64
    284e:	89 8f       	std	Y+25, r24	; 0x19
    2850:	9a 8f       	std	Y+26, r25	; 0x1a
    2852:	ab 8f       	std	Y+27, r26	; 0x1b
    2854:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a ef       	ldi	r20, 0xFA	; 250
    2864:	54 e4       	ldi	r21, 0x44	; 68
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8d 8b       	std	Y+21, r24	; 0x15
    2870:	9e 8b       	std	Y+22, r25	; 0x16
    2872:	af 8b       	std	Y+23, r26	; 0x17
    2874:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2876:	6d 89       	ldd	r22, Y+21	; 0x15
    2878:	7e 89       	ldd	r23, Y+22	; 0x16
    287a:	8f 89       	ldd	r24, Y+23	; 0x17
    287c:	98 8d       	ldd	r25, Y+24	; 0x18
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_Init+0x4bc>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <LCD_Init+0x53a>
	else if (__tmp > 65535)
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <LCD_Init+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	69 8d       	ldd	r22, Y+25	; 0x19
    28b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <LCD_Init+0x51c>
    28da:	88 ec       	ldi	r24, 0xC8	; 200
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
    28e2:	89 89       	ldd	r24, Y+17	; 0x11
    28e4:	9a 89       	ldd	r25, Y+18	; 0x12
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_Init+0x50a>
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8b 89       	ldd	r24, Y+19	; 0x13
    28f0:	9c 89       	ldd	r25, Y+20	; 0x14
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8b 89       	ldd	r24, Y+19	; 0x13
    28fa:	9c 89       	ldd	r25, Y+20	; 0x14
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <LCD_Init+0x4fe>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <LCD_Init+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_Init+0x546>
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	WriteIns(0x06);
    292a:	86 e0       	ldi	r24, 0x06	; 6
    292c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e8       	ldi	r26, 0x80	; 128
    2936:	bf e3       	ldi	r27, 0x3F	; 63
    2938:	8b 87       	std	Y+11, r24	; 0x0b
    293a:	9c 87       	std	Y+12, r25	; 0x0c
    293c:	ad 87       	std	Y+13, r26	; 0x0d
    293e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	6b 85       	ldd	r22, Y+11	; 0x0b
    2942:	7c 85       	ldd	r23, Y+12	; 0x0c
    2944:	8d 85       	ldd	r24, Y+13	; 0x0d
    2946:	9e 85       	ldd	r25, Y+14	; 0x0e
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	4a ef       	ldi	r20, 0xFA	; 250
    294e:	54 e4       	ldi	r21, 0x44	; 68
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	8f 83       	std	Y+7, r24	; 0x07
    295a:	98 87       	std	Y+8, r25	; 0x08
    295c:	a9 87       	std	Y+9, r26	; 0x09
    295e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2960:	6f 81       	ldd	r22, Y+7	; 0x07
    2962:	78 85       	ldd	r23, Y+8	; 0x08
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	9a 85       	ldd	r25, Y+10	; 0x0a
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2974:	88 23       	and	r24, r24
    2976:	2c f4       	brge	.+10     	; 0x2982 <LCD_Init+0x5a6>
		__ticks = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	3f c0       	rjmp	.+126    	; 0x2a00 <LCD_Init+0x624>
	else if (__tmp > 65535)
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	57 e4       	ldi	r21, 0x47	; 71
    2992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	4c f5       	brge	.+82     	; 0x29ec <LCD_Init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
    29c2:	0f c0       	rjmp	.+30     	; 0x29e2 <LCD_Init+0x606>
    29c4:	88 ec       	ldi	r24, 0xC8	; 200
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	8b 83       	std	Y+3, r24	; 0x03
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <LCD_Init+0x5f4>
    29d4:	9c 83       	std	Y+4, r25	; 0x04
    29d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	69 f7       	brne	.-38     	; 0x29c4 <LCD_Init+0x5e8>
    29ea:	14 c0       	rjmp	.+40     	; 0x2a14 <LCD_Init+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	9a 83       	std	Y+2, r25	; 0x02
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_Init+0x630>
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2a14:	cc 5a       	subi	r28, 0xAC	; 172
    2a16:	df 4f       	sbci	r29, 0xFF	; 255
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	08 95       	ret

00002a2c <LCD_Clear>:

#endif

void LCD_Clear(void)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	WriteIns(0x01);
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
}
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <LCD_GoTo>:

void LCD_GoTo(u8 line, u8 cell)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <LCD_GoTo+0x6>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	88 23       	and	r24, r24
    2a52:	29 f4       	brne	.+10     	; 0x2a5e <LCD_GoTo+0x1e>
	{
		WriteIns(0x80+cell);
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	80 58       	subi	r24, 0x80	; 128
    2a58:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2a5c:	17 c0       	rjmp	.+46     	; 0x2a8c <LCD_GoTo+0x4c>
	}
	else if (line==1)
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	29 f4       	brne	.+10     	; 0x2a6e <LCD_GoTo+0x2e>
	{
		WriteIns(0x80+0x40+cell);
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	80 54       	subi	r24, 0x40	; 64
    2a68:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_GoTo+0x4c>
	}
	else if (line==2)
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	29 f4       	brne	.+10     	; 0x2a7e <LCD_GoTo+0x3e>
	{
		WriteIns(0x94+cell);
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	8c 56       	subi	r24, 0x6C	; 108
    2a78:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <LCD_GoTo+0x4c>
	}
	else if (line==3)
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	21 f4       	brne	.+8      	; 0x2a8c <LCD_GoTo+0x4c>
	{
		WriteIns(0xD4+cell);
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	8c 52       	subi	r24, 0x2C	; 44
    2a88:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
	}
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <LCD_WriteChar>:


void LCD_WriteChar(u8 ch)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	0f 92       	push	r0
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	89 83       	std	Y+1, r24	; 0x01
	WriteData(ch);
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <WriteData>
}
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <LCD_WriteString>:

void LCD_WriteString(c8* str)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <LCD_WriteString+0x6>
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9b 83       	std	Y+3, r25	; 0x03
    2abe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; str[i]; i++)
    2ac0:	19 82       	std	Y+1, r1	; 0x01
    2ac2:	0e c0       	rjmp	.+28     	; 0x2ae0 <LCD_WriteString+0x30>
	{
		LCD_WriteChar(str[i]);
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	fc 01       	movw	r30, r24
    2ad0:	e2 0f       	add	r30, r18
    2ad2:	f3 1f       	adc	r31, r19
    2ad4:	80 81       	ld	r24, Z
    2ad6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
}

void LCD_WriteString(c8* str)
{
	u8 i;
	for(i=0; str[i]; i++)
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	8f 5f       	subi	r24, 0xFF	; 255
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aea:	fc 01       	movw	r30, r24
    2aec:	e2 0f       	add	r30, r18
    2aee:	f3 1f       	adc	r31, r19
    2af0:	80 81       	ld	r24, Z
    2af2:	88 23       	and	r24, r24
    2af4:	39 f7       	brne	.-50     	; 0x2ac4 <LCD_WriteString+0x14>
	{
		LCD_WriteChar(str[i]);
	}
}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	66 97       	sbiw	r28, 0x16	; 22
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	6b 8b       	std	Y+19, r22	; 0x13
    2b1c:	7c 8b       	std	Y+20, r23	; 0x14
    2b1e:	8d 8b       	std	Y+21, r24	; 0x15
    2b20:	9e 8b       	std	Y+22, r25	; 0x16
	c8 str[16];
	u8 i=0;
    2b22:	1a 82       	std	Y+2, r1	; 0x02
	s8 j=0;
    2b24:	19 82       	std	Y+1, r1	; 0x01

	if(num==0)
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	ad 89       	ldd	r26, Y+21	; 0x15
    2b2c:	be 89       	ldd	r27, Y+22	; 0x16
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	a1 05       	cpc	r26, r1
    2b32:	b1 05       	cpc	r27, r1
    2b34:	21 f4       	brne	.+8      	; 0x2b3e <LCD_WriteNumber+0x3c>
	{
		LCD_WriteChar('0');
    2b36:	80 e3       	ldi	r24, 0x30	; 48
    2b38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
    2b3c:	67 c0       	rjmp	.+206    	; 0x2c0c <LCD_WriteNumber+0x10a>
		return;
	}
	if(num<0)
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	ad 89       	ldd	r26, Y+21	; 0x15
    2b44:	be 89       	ldd	r27, Y+22	; 0x16
    2b46:	bb 23       	and	r27, r27
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <LCD_WriteNumber+0x4a>
    2b4a:	41 c0       	rjmp	.+130    	; 0x2bce <LCD_WriteNumber+0xcc>
	{
		LCD_WriteChar('-');
    2b4c:	8d e2       	ldi	r24, 0x2D	; 45
    2b4e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
		num = num * -1;
    2b52:	8b 89       	ldd	r24, Y+19	; 0x13
    2b54:	9c 89       	ldd	r25, Y+20	; 0x14
    2b56:	ad 89       	ldd	r26, Y+21	; 0x15
    2b58:	be 89       	ldd	r27, Y+22	; 0x16
    2b5a:	b0 95       	com	r27
    2b5c:	a0 95       	com	r26
    2b5e:	90 95       	com	r25
    2b60:	81 95       	neg	r24
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	af 4f       	sbci	r26, 0xFF	; 255
    2b66:	bf 4f       	sbci	r27, 0xFF	; 255
    2b68:	8b 8b       	std	Y+19, r24	; 0x13
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	ad 8b       	std	Y+21, r26	; 0x15
    2b6e:	be 8b       	std	Y+22, r27	; 0x16
    2b70:	2e c0       	rjmp	.+92     	; 0x2bce <LCD_WriteNumber+0xcc>
	}

	while(num)
	{
		str[i++] = num%10 +'0';
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	08 2f       	mov	r16, r24
    2b76:	10 e0       	ldi	r17, 0x00	; 0
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	ad 89       	ldd	r26, Y+21	; 0x15
    2b7e:	be 89       	ldd	r27, Y+22	; 0x16
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	28 2f       	mov	r18, r24
    2b96:	20 5d       	subi	r18, 0xD0	; 208
    2b98:	ce 01       	movw	r24, r28
    2b9a:	03 96       	adiw	r24, 0x03	; 3
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e0 0f       	add	r30, r16
    2ba0:	f1 1f       	adc	r31, r17
    2ba2:	20 83       	st	Z, r18
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	8a 83       	std	Y+2, r24	; 0x02
		num = num/10;
    2baa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bac:	9c 89       	ldd	r25, Y+20	; 0x14
    2bae:	ad 89       	ldd	r26, Y+21	; 0x15
    2bb0:	be 89       	ldd	r27, Y+22	; 0x16
    2bb2:	2a e0       	ldi	r18, 0x0A	; 10
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 2e 18 	call	0x305c	; 0x305c <__divmodsi4>
    2bc2:	da 01       	movw	r26, r20
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	8b 8b       	std	Y+19, r24	; 0x13
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	ad 8b       	std	Y+21, r26	; 0x15
    2bcc:	be 8b       	std	Y+22, r27	; 0x16
	{
		LCD_WriteChar('-');
		num = num * -1;
	}

	while(num)
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	ad 89       	ldd	r26, Y+21	; 0x15
    2bd4:	be 89       	ldd	r27, Y+22	; 0x16
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	a1 05       	cpc	r26, r1
    2bda:	b1 05       	cpc	r27, r1
    2bdc:	51 f6       	brne	.-108    	; 0x2b72 <LCD_WriteNumber+0x70>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	81 50       	subi	r24, 0x01	; 1
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	10 c0       	rjmp	.+32     	; 0x2c06 <LCD_WriteNumber+0x104>
	{
		LCD_WriteChar(str[j]);
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	33 27       	eor	r19, r19
    2bec:	27 fd       	sbrc	r18, 7
    2bee:	30 95       	com	r19
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	03 96       	adiw	r24, 0x03	; 3
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	81 50       	subi	r24, 0x01	; 1
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	88 23       	and	r24, r24
    2c0a:	6c f7       	brge	.-38     	; 0x2be6 <LCD_WriteNumber+0xe4>
	{
		LCD_WriteChar(str[j]);
	}


}
    2c0c:	66 96       	adiw	r28, 0x16	; 22
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	08 95       	ret

00002c22 <LCD_Write_4D>:

void LCD_Write_4D(u16 num) //5214
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <LCD_Write_4D+0x6>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteChar(((num%10000)/1000)+'0');
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	20 e1       	ldi	r18, 0x10	; 16
    2c36:	37 e2       	ldi	r19, 0x27	; 39
    2c38:	b9 01       	movw	r22, r18
    2c3a:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c3e:	28 ee       	ldi	r18, 0xE8	; 232
    2c40:	33 e0       	ldi	r19, 0x03	; 3
    2c42:	b9 01       	movw	r22, r18
    2c44:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c48:	cb 01       	movw	r24, r22
    2c4a:	80 5d       	subi	r24, 0xD0	; 208
    2c4c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	LCD_WriteChar(((num%1000)/100)+'0');
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	28 ee       	ldi	r18, 0xE8	; 232
    2c56:	33 e0       	ldi	r19, 0x03	; 3
    2c58:	b9 01       	movw	r22, r18
    2c5a:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c5e:	24 e6       	ldi	r18, 0x64	; 100
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	b9 01       	movw	r22, r18
    2c64:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c68:	cb 01       	movw	r24, r22
    2c6a:	80 5d       	subi	r24, 0xD0	; 208
    2c6c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	LCD_WriteChar(((num%100)/10)+'0');
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	24 e6       	ldi	r18, 0x64	; 100
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	b9 01       	movw	r22, r18
    2c7a:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c7e:	2a e0       	ldi	r18, 0x0A	; 10
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	b9 01       	movw	r22, r18
    2c84:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c88:	cb 01       	movw	r24, r22
    2c8a:	80 5d       	subi	r24, 0xD0	; 208
    2c8c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	LCD_WriteChar(((num%10)/1)+'0');
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	2a e0       	ldi	r18, 0x0A	; 10
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	b9 01       	movw	r22, r18
    2c9a:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2c9e:	80 5d       	subi	r24, 0xD0	; 208
    2ca0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <LCD_WriteBinary>:

void LCD_WriteBinary(u8 num)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <LCD_WriteBinary+0x6>
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	for(i=7; i>=0; i--)
    2cba:	87 e0       	ldi	r24, 0x07	; 7
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	1c c0       	rjmp	.+56     	; 0x2cf8 <LCD_WriteBinary+0x4a>
	{
		if(((num>>i)&1)==1)
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	99 27       	eor	r25, r25
    2cca:	87 fd       	sbrc	r24, 7
    2ccc:	90 95       	com	r25
    2cce:	a9 01       	movw	r20, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <LCD_WriteBinary+0x28>
    2cd2:	55 95       	asr	r21
    2cd4:	47 95       	ror	r20
    2cd6:	8a 95       	dec	r24
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <LCD_WriteBinary+0x24>
    2cda:	ca 01       	movw	r24, r20
    2cdc:	81 70       	andi	r24, 0x01	; 1
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	88 23       	and	r24, r24
    2ce2:	21 f0       	breq	.+8      	; 0x2cec <LCD_WriteBinary+0x3e>
		{
			LCD_WriteChar('1');
    2ce4:	81 e3       	ldi	r24, 0x31	; 49
    2ce6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <LCD_WriteBinary+0x44>
		}
		else
		{
			LCD_WriteChar('0');
    2cec:	80 e3       	ldi	r24, 0x30	; 48
    2cee:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
}

void LCD_WriteBinary(u8 num)
{
	s8 i;
	for(i=7; i>=0; i--)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	81 50       	subi	r24, 0x01	; 1
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	88 23       	and	r24, r24
    2cfc:	0c f7       	brge	.-62     	; 0x2cc0 <LCD_WriteBinary+0x12>
		{
			LCD_WriteChar('0');
		}
		//LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <LCD_WriteHex>:

void LCD_WriteHex(u8 num)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <LCD_WriteHex+0x6>
    2d0e:	0f 92       	push	r0
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	8b 83       	std	Y+3, r24	; 0x03
	u8 d0,d1;
	d0=num&0x0F;
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	8f 70       	andi	r24, 0x0F	; 15
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
	d1=(num>>4)&0x0F;
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	82 95       	swap	r24
    2d20:	8f 70       	andi	r24, 0x0F	; 15
    2d22:	89 83       	std	Y+1, r24	; 0x01

	if(d1<10)
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	8a 30       	cpi	r24, 0x0A	; 10
    2d28:	28 f4       	brcc	.+10     	; 0x2d34 <LCD_WriteHex+0x2c>
	{
		LCD_WriteChar(d1+'0');
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	80 5d       	subi	r24, 0xD0	; 208
    2d2e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <LCD_WriteHex+0x34>
	}
	else
	{
		LCD_WriteChar(d1-10+'A');
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	89 5c       	subi	r24, 0xC9	; 201
    2d38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	}

	if(d0<10)
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	8a 30       	cpi	r24, 0x0A	; 10
    2d40:	28 f4       	brcc	.+10     	; 0x2d4c <LCD_WriteHex+0x44>
	{
		LCD_WriteChar(d0+'0');
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	80 5d       	subi	r24, 0xD0	; 208
    2d46:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
    2d4a:	04 c0       	rjmp	.+8      	; 0x2d54 <LCD_WriteHex+0x4c>
	}
	else
	{
		LCD_WriteChar(d0-10+'A');
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	89 5c       	subi	r24, 0xC9	; 201
    2d50:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
	}
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <LCD_WriteStringGoTo>:

void LCD_WriteStringGoTo(u8 line, u8 cell, c8* str)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <LCD_WriteStringGoTo+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <LCD_WriteStringGoTo+0x8>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    2d6e:	6a 83       	std	Y+2, r22	; 0x02
    2d70:	5c 83       	std	Y+4, r21	; 0x04
    2d72:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoTo(line,cell);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	6a 81       	ldd	r22, Y+2	; 0x02
    2d78:	0e 94 20 15 	call	0x2a40	; 0x2a40 <LCD_GoTo>
	LCD_WriteString(str);
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d80:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_WriteString>
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <LCD_ClearPosition>:

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <LCD_ClearPosition+0x6>
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <LCD_ClearPosition+0x8>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	8a 83       	std	Y+2, r24	; 0x02
    2da0:	6b 83       	std	Y+3, r22	; 0x03
    2da2:	4c 83       	std	Y+4, r20	; 0x04
	u8 i;
	LCD_GoTo(line,cell);
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	6b 81       	ldd	r22, Y+3	; 0x03
    2da8:	0e 94 20 15 	call	0x2a40	; 0x2a40 <LCD_GoTo>
	for(i=0; i<NoOfCells; i++)
    2dac:	19 82       	std	Y+1, r1	; 0x01
    2dae:	06 c0       	rjmp	.+12     	; 0x2dbc <LCD_ClearPosition+0x2a>
	{
		LCD_WriteChar(' ');
    2db0:	80 e2       	ldi	r24, 0x20	; 32
    2db2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
	u8 i;
	LCD_GoTo(line,cell);
	for(i=0; i<NoOfCells; i++)
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	8f 5f       	subi	r24, 0xFF	; 255
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	99 81       	ldd	r25, Y+1	; 0x01
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	98 17       	cp	r25, r24
    2dc2:	b0 f3       	brcs	.-20     	; 0x2db0 <LCD_ClearPosition+0x1e>
	{
		LCD_WriteChar(' ');
	}
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <LCD_CustomChar>:


void LCD_CustomChar(u8 address, u8* pattern)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <LCD_CustomChar+0x6>
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <LCD_CustomChar+0x8>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	8a 83       	std	Y+2, r24	; 0x02
    2de0:	7c 83       	std	Y+4, r23	; 0x04
    2de2:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	WriteIns(0x40+address*8);
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	88 2f       	mov	r24, r24
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	08 96       	adiw	r24, 0x08	; 8
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
	for(i=0; i<8; i++)
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	0e c0       	rjmp	.+28     	; 0x2e1c <LCD_CustomChar+0x4a>
	{
		LCD_WriteChar(pattern[i]);
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	e2 0f       	add	r30, r18
    2e0e:	f3 1f       	adc	r31, r19
    2e10:	80 81       	ld	r24, Z
    2e12:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_WriteChar>
void LCD_CustomChar(u8 address, u8* pattern)
{
	u8 i;

	WriteIns(0x40+address*8);
	for(i=0; i<8; i++)
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	88 30       	cpi	r24, 0x08	; 8
    2e20:	78 f3       	brcs	.-34     	; 0x2e00 <LCD_CustomChar+0x2e>
	{
		LCD_WriteChar(pattern[i]);
	}
	WriteIns(0x80);
    2e22:	80 e8       	ldi	r24, 0x80	; 128
    2e24:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <WriteIns>
}
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <KEYPAD_Init>:
#define F_CPU 8000000
#include <util/delay.h>


void KEYPAD_Init(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	0f 92       	push	r0
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
	u8 r;
	for(r=0; r<Rows; r++)
    2e40:	19 82       	std	Y+1, r1	; 0x01
    2e42:	08 c0       	rjmp	.+16     	; 0x2e54 <KEYPAD_Init+0x1e>
	{
		DIO_WritePin(FIRST_OUTPUT-r, HIGH);
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	81 95       	neg	r24
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>


void KEYPAD_Init(void)
{
	u8 r;
	for(r=0; r<Rows; r++)
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	8f 5f       	subi	r24, 0xFF	; 255
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	84 30       	cpi	r24, 0x04	; 4
    2e58:	a8 f3       	brcs	.-22     	; 0x2e44 <KEYPAD_Init+0xe>
	{
		DIO_WritePin(FIRST_OUTPUT-r, HIGH);
	}
}
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <KEYPAD_GetKey>:


u8 KEYPAD_GetKey(void)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	61 97       	sbiw	r28, 0x11	; 17
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
	u8 r,c,key=NO_KEY;
    2e76:	84 e5       	ldi	r24, 0x54	; 84
    2e78:	8f 87       	std	Y+15, r24	; 0x0f

	for (r=0; r<Rows; r++)
    2e7a:	19 8a       	std	Y+17, r1	; 0x11
    2e7c:	a5 c0       	rjmp	.+330    	; 0x2fc8 <KEYPAD_GetKey+0x166>
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>
		for (c=0; c<Cols; c++)
    2e86:	18 8a       	std	Y+16, r1	; 0x10
    2e88:	94 c0       	rjmp	.+296    	; 0x2fb2 <KEYPAD_GetKey+0x150>
		{
			if (DIO_ReadPin(FIRST_INPUT+c)==LOW)
    2e8a:	88 89       	ldd	r24, Y+16	; 0x10
    2e8c:	8c 5f       	subi	r24, 0xFC	; 252
    2e8e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_ReadPin>
    2e92:	88 23       	and	r24, r24
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <KEYPAD_GetKey+0x36>
    2e96:	8a c0       	rjmp	.+276    	; 0x2fac <KEYPAD_GetKey+0x14a>
			{
				key=KeysArr[r][c];
    2e98:	89 89       	ldd	r24, Y+17	; 0x11
    2e9a:	48 2f       	mov	r20, r24
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	88 89       	ldd	r24, Y+16	; 0x10
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	ca 01       	movw	r24, r20
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	82 0f       	add	r24, r18
    2eb0:	93 1f       	adc	r25, r19
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	ee 56       	subi	r30, 0x6E	; 110
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	8f 87       	std	Y+15, r24	; 0x0f
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a0 e2       	ldi	r26, 0x20	; 32
    2ec2:	b1 e4       	ldi	r27, 0x41	; 65
    2ec4:	8b 87       	std	Y+11, r24	; 0x0b
    2ec6:	9c 87       	std	Y+12, r25	; 0x0c
    2ec8:	ad 87       	std	Y+13, r26	; 0x0d
    2eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a ef       	ldi	r20, 0xFA	; 250
    2eda:	54 e4       	ldi	r21, 0x44	; 68
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8f 83       	std	Y+7, r24	; 0x07
    2ee6:	98 87       	std	Y+8, r25	; 0x08
    2ee8:	a9 87       	std	Y+9, r26	; 0x09
    2eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	2c f4       	brge	.+10     	; 0x2f0e <KEYPAD_GetKey+0xac>
		__ticks = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	3f c0       	rjmp	.+126    	; 0x2f8c <KEYPAD_GetKey+0x12a>
	else if (__tmp > 65535)
    2f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f10:	78 85       	ldd	r23, Y+8	; 0x08
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	57 e4       	ldi	r21, 0x47	; 71
    2f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f22:	18 16       	cp	r1, r24
    2f24:	4c f5       	brge	.+82     	; 0x2f78 <KEYPAD_GetKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e2       	ldi	r20, 0x20	; 32
    2f34:	51 e4       	ldi	r21, 0x41	; 65
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	0f c0       	rjmp	.+30     	; 0x2f6e <KEYPAD_GetKey+0x10c>
    2f50:	88 ec       	ldi	r24, 0xC8	; 200
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <KEYPAD_GetKey+0xfa>
    2f60:	9c 83       	std	Y+4, r25	; 0x04
    2f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	69 f7       	brne	.-38     	; 0x2f50 <KEYPAD_GetKey+0xee>
    2f76:	14 c0       	rjmp	.+40     	; 0x2fa0 <KEYPAD_GetKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <KEYPAD_GetKey+0x136>
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
    2fa0:	88 89       	ldd	r24, Y+16	; 0x10
    2fa2:	8c 5f       	subi	r24, 0xFC	; 252
    2fa4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_ReadPin>
    2fa8:	88 23       	and	r24, r24
    2faa:	d1 f3       	breq	.-12     	; 0x2fa0 <KEYPAD_GetKey+0x13e>
	u8 r,c,key=NO_KEY;

	for (r=0; r<Rows; r++)
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
		for (c=0; c<Cols; c++)
    2fac:	88 89       	ldd	r24, Y+16	; 0x10
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	88 8b       	std	Y+16, r24	; 0x10
    2fb2:	88 89       	ldd	r24, Y+16	; 0x10
    2fb4:	84 30       	cpi	r24, 0x04	; 4
    2fb6:	08 f4       	brcc	.+2      	; 0x2fba <KEYPAD_GetKey+0x158>
    2fb8:	68 cf       	rjmp	.-304    	; 0x2e8a <KEYPAD_GetKey+0x28>
				key=KeysArr[r][c];
				_delay_ms(10);
				while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
    2fba:	89 89       	ldd	r24, Y+17	; 0x11
    2fbc:	61 e0       	ldi	r22, 0x01	; 1
    2fbe:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_WritePin>

u8 KEYPAD_GetKey(void)
{
	u8 r,c,key=NO_KEY;

	for (r=0; r<Rows; r++)
    2fc2:	89 89       	ldd	r24, Y+17	; 0x11
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	89 8b       	std	Y+17, r24	; 0x11
    2fc8:	89 89       	ldd	r24, Y+17	; 0x11
    2fca:	84 30       	cpi	r24, 0x04	; 4
    2fcc:	08 f4       	brcc	.+2      	; 0x2fd0 <KEYPAD_GetKey+0x16e>
    2fce:	57 cf       	rjmp	.-338    	; 0x2e7e <KEYPAD_GetKey+0x1c>
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
	}

	return key;
    2fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2fd2:	61 96       	adiw	r28, 0x11	; 17
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <main>:
#include"Cal_Interface.h"

#include<util/delay.h>

int main()
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
	Cal_Init();
    2fec:	0e 94 a3 05 	call	0xb46	; 0xb46 <Cal_Init>

	while(1)
	{
		Calculator();
    2ff0:	0e 94 0e 08 	call	0x101c	; 0x101c <Calculator>
    2ff4:	fd cf       	rjmp	.-6      	; 0x2ff0 <main+0xc>

00002ff6 <__udivmodqi4>:
    2ff6:	99 1b       	sub	r25, r25
    2ff8:	79 e0       	ldi	r23, 0x09	; 9
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <__udivmodqi4_ep>

00002ffc <__udivmodqi4_loop>:
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	96 17       	cp	r25, r22
    3000:	08 f0       	brcs	.+2      	; 0x3004 <__udivmodqi4_ep>
    3002:	96 1b       	sub	r25, r22

00003004 <__udivmodqi4_ep>:
    3004:	88 1f       	adc	r24, r24
    3006:	7a 95       	dec	r23
    3008:	c9 f7       	brne	.-14     	; 0x2ffc <__udivmodqi4_loop>
    300a:	80 95       	com	r24
    300c:	08 95       	ret

0000300e <__udivmodhi4>:
    300e:	aa 1b       	sub	r26, r26
    3010:	bb 1b       	sub	r27, r27
    3012:	51 e1       	ldi	r21, 0x11	; 17
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <__udivmodhi4_ep>

00003016 <__udivmodhi4_loop>:
    3016:	aa 1f       	adc	r26, r26
    3018:	bb 1f       	adc	r27, r27
    301a:	a6 17       	cp	r26, r22
    301c:	b7 07       	cpc	r27, r23
    301e:	10 f0       	brcs	.+4      	; 0x3024 <__udivmodhi4_ep>
    3020:	a6 1b       	sub	r26, r22
    3022:	b7 0b       	sbc	r27, r23

00003024 <__udivmodhi4_ep>:
    3024:	88 1f       	adc	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	5a 95       	dec	r21
    302a:	a9 f7       	brne	.-22     	; 0x3016 <__udivmodhi4_loop>
    302c:	80 95       	com	r24
    302e:	90 95       	com	r25
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	08 95       	ret

00003036 <__divmodhi4>:
    3036:	97 fb       	bst	r25, 7
    3038:	09 2e       	mov	r0, r25
    303a:	07 26       	eor	r0, r23
    303c:	0a d0       	rcall	.+20     	; 0x3052 <__divmodhi4_neg1>
    303e:	77 fd       	sbrc	r23, 7
    3040:	04 d0       	rcall	.+8      	; 0x304a <__divmodhi4_neg2>
    3042:	e5 df       	rcall	.-54     	; 0x300e <__udivmodhi4>
    3044:	06 d0       	rcall	.+12     	; 0x3052 <__divmodhi4_neg1>
    3046:	00 20       	and	r0, r0
    3048:	1a f4       	brpl	.+6      	; 0x3050 <__divmodhi4_exit>

0000304a <__divmodhi4_neg2>:
    304a:	70 95       	com	r23
    304c:	61 95       	neg	r22
    304e:	7f 4f       	sbci	r23, 0xFF	; 255

00003050 <__divmodhi4_exit>:
    3050:	08 95       	ret

00003052 <__divmodhi4_neg1>:
    3052:	f6 f7       	brtc	.-4      	; 0x3050 <__divmodhi4_exit>
    3054:	90 95       	com	r25
    3056:	81 95       	neg	r24
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	08 95       	ret

0000305c <__divmodsi4>:
    305c:	97 fb       	bst	r25, 7
    305e:	09 2e       	mov	r0, r25
    3060:	05 26       	eor	r0, r21
    3062:	0e d0       	rcall	.+28     	; 0x3080 <__divmodsi4_neg1>
    3064:	57 fd       	sbrc	r21, 7
    3066:	04 d0       	rcall	.+8      	; 0x3070 <__divmodsi4_neg2>
    3068:	14 d0       	rcall	.+40     	; 0x3092 <__udivmodsi4>
    306a:	0a d0       	rcall	.+20     	; 0x3080 <__divmodsi4_neg1>
    306c:	00 1c       	adc	r0, r0
    306e:	38 f4       	brcc	.+14     	; 0x307e <__divmodsi4_exit>

00003070 <__divmodsi4_neg2>:
    3070:	50 95       	com	r21
    3072:	40 95       	com	r20
    3074:	30 95       	com	r19
    3076:	21 95       	neg	r18
    3078:	3f 4f       	sbci	r19, 0xFF	; 255
    307a:	4f 4f       	sbci	r20, 0xFF	; 255
    307c:	5f 4f       	sbci	r21, 0xFF	; 255

0000307e <__divmodsi4_exit>:
    307e:	08 95       	ret

00003080 <__divmodsi4_neg1>:
    3080:	f6 f7       	brtc	.-4      	; 0x307e <__divmodsi4_exit>
    3082:	90 95       	com	r25
    3084:	80 95       	com	r24
    3086:	70 95       	com	r23
    3088:	61 95       	neg	r22
    308a:	7f 4f       	sbci	r23, 0xFF	; 255
    308c:	8f 4f       	sbci	r24, 0xFF	; 255
    308e:	9f 4f       	sbci	r25, 0xFF	; 255
    3090:	08 95       	ret

00003092 <__udivmodsi4>:
    3092:	a1 e2       	ldi	r26, 0x21	; 33
    3094:	1a 2e       	mov	r1, r26
    3096:	aa 1b       	sub	r26, r26
    3098:	bb 1b       	sub	r27, r27
    309a:	fd 01       	movw	r30, r26
    309c:	0d c0       	rjmp	.+26     	; 0x30b8 <__udivmodsi4_ep>

0000309e <__udivmodsi4_loop>:
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	ee 1f       	adc	r30, r30
    30a4:	ff 1f       	adc	r31, r31
    30a6:	a2 17       	cp	r26, r18
    30a8:	b3 07       	cpc	r27, r19
    30aa:	e4 07       	cpc	r30, r20
    30ac:	f5 07       	cpc	r31, r21
    30ae:	20 f0       	brcs	.+8      	; 0x30b8 <__udivmodsi4_ep>
    30b0:	a2 1b       	sub	r26, r18
    30b2:	b3 0b       	sbc	r27, r19
    30b4:	e4 0b       	sbc	r30, r20
    30b6:	f5 0b       	sbc	r31, r21

000030b8 <__udivmodsi4_ep>:
    30b8:	66 1f       	adc	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	1a 94       	dec	r1
    30c2:	69 f7       	brne	.-38     	; 0x309e <__udivmodsi4_loop>
    30c4:	60 95       	com	r22
    30c6:	70 95       	com	r23
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	9b 01       	movw	r18, r22
    30ce:	ac 01       	movw	r20, r24
    30d0:	bd 01       	movw	r22, r26
    30d2:	cf 01       	movw	r24, r30
    30d4:	08 95       	ret

000030d6 <__prologue_saves__>:
    30d6:	2f 92       	push	r2
    30d8:	3f 92       	push	r3
    30da:	4f 92       	push	r4
    30dc:	5f 92       	push	r5
    30de:	6f 92       	push	r6
    30e0:	7f 92       	push	r7
    30e2:	8f 92       	push	r8
    30e4:	9f 92       	push	r9
    30e6:	af 92       	push	r10
    30e8:	bf 92       	push	r11
    30ea:	cf 92       	push	r12
    30ec:	df 92       	push	r13
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	ca 1b       	sub	r28, r26
    3100:	db 0b       	sbc	r29, r27
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	09 94       	ijmp

0000310e <__epilogue_restores__>:
    310e:	2a 88       	ldd	r2, Y+18	; 0x12
    3110:	39 88       	ldd	r3, Y+17	; 0x11
    3112:	48 88       	ldd	r4, Y+16	; 0x10
    3114:	5f 84       	ldd	r5, Y+15	; 0x0f
    3116:	6e 84       	ldd	r6, Y+14	; 0x0e
    3118:	7d 84       	ldd	r7, Y+13	; 0x0d
    311a:	8c 84       	ldd	r8, Y+12	; 0x0c
    311c:	9b 84       	ldd	r9, Y+11	; 0x0b
    311e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3120:	b9 84       	ldd	r11, Y+9	; 0x09
    3122:	c8 84       	ldd	r12, Y+8	; 0x08
    3124:	df 80       	ldd	r13, Y+7	; 0x07
    3126:	ee 80       	ldd	r14, Y+6	; 0x06
    3128:	fd 80       	ldd	r15, Y+5	; 0x05
    312a:	0c 81       	ldd	r16, Y+4	; 0x04
    312c:	1b 81       	ldd	r17, Y+3	; 0x03
    312e:	aa 81       	ldd	r26, Y+2	; 0x02
    3130:	b9 81       	ldd	r27, Y+1	; 0x01
    3132:	ce 0f       	add	r28, r30
    3134:	d1 1d       	adc	r29, r1
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	ed 01       	movw	r28, r26
    3142:	08 95       	ret

00003144 <_exit>:
    3144:	f8 94       	cli

00003146 <__stop_program>:
    3146:	ff cf       	rjmp	.-2      	; 0x3146 <__stop_program>
