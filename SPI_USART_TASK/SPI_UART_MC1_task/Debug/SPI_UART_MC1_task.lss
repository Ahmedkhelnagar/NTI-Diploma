
SPI_UART_MC1_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000032b4  00003348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800088  00800088  00003370  2**0
                  ALLOC
  3 .stab         00002dc0  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124a  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000762a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a15e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bac7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 14 	call	0x28f0	; 0x28f0 <main>
      8a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_Init>:
#include "DIO_Private.h"



void DIO_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	e8 59       	subi	r30, 0x98	; 152
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	90 81       	ld	r25, Z
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	69 2f       	mov	r22, r25
     b66:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_InitPin>

void DIO_Init(void)
{
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 32       	cpi	r24, 0x20	; 32
     b74:	78 f3       	brcs	.-34     	; 0xb54 <DIO_Init+0xe>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DIO_InitPin>:




void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2c 97       	sbiw	r28, 0x0c	; 12
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	86 95       	lsr	r24
     ba0:	86 95       	lsr	r24
     ba2:	86 95       	lsr	r24
     ba4:	89 83       	std	Y+1, r24	; 0x01

	switch(status)
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3c 87       	std	Y+12, r19	; 0x0c
     bae:	2b 87       	std	Y+11, r18	; 0x0b
     bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <DIO_InitPin+0x3e>
     bba:	c9 c0       	rjmp	.+402    	; 0xd4e <DIO_InitPin+0x1d0>
     bbc:	2b 85       	ldd	r18, Y+11	; 0x0b
     bbe:	3c 85       	ldd	r19, Y+12	; 0x0c
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <DIO_InitPin+0x4a>
     bc6:	85 c1       	rjmp	.+778    	; 0xed2 <DIO_InitPin+0x354>
     bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bca:	9c 85       	ldd	r25, Y+12	; 0x0c
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	09 f0       	breq	.+2      	; 0xbd2 <DIO_InitPin+0x54>
     bd0:	3d c2       	rjmp	.+1146   	; 0x104c <DIO_InitPin+0x4ce>
	{
		case OUTPUT:
		switch(port)
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3a 87       	std	Y+10, r19	; 0x0a
     bda:	29 87       	std	Y+9, r18	; 0x09
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <DIO_InitPin+0x6a>
     be6:	3e c0       	rjmp	.+124    	; 0xc64 <DIO_InitPin+0xe6>
     be8:	29 85       	ldd	r18, Y+9	; 0x09
     bea:	3a 85       	ldd	r19, Y+10	; 0x0a
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	2c f4       	brge	.+10     	; 0xbfc <DIO_InitPin+0x7e>
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	71 f0       	breq	.+28     	; 0xc16 <DIO_InitPin+0x98>
     bfa:	28 c2       	rjmp	.+1104   	; 0x104c <DIO_InitPin+0x4ce>
     bfc:	29 85       	ldd	r18, Y+9	; 0x09
     bfe:	3a 85       	ldd	r19, Y+10	; 0x0a
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <DIO_InitPin+0x8a>
     c06:	55 c0       	rjmp	.+170    	; 0xcb2 <DIO_InitPin+0x134>
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <DIO_InitPin+0x96>
     c12:	76 c0       	rjmp	.+236    	; 0xd00 <DIO_InitPin+0x182>
     c14:	1b c2       	rjmp	.+1078   	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			SET_BIT(DDRA,pin_num);
     c16:	aa e3       	ldi	r26, 0x3A	; 58
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e3       	ldi	r30, 0x3A	; 58
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_InitPin+0xb4>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	2a 95       	dec	r18
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_InitPin+0xb0>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
     c3a:	ab e3       	ldi	r26, 0x3B	; 59
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	eb e3       	ldi	r30, 0x3B	; 59
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_InitPin+0xda>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_InitPin+0xd6>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	f4 c1       	rjmp	.+1000   	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			SET_BIT(DDRB,pin_num);
     c64:	a7 e3       	ldi	r26, 0x37	; 55
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_InitPin+0x102>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	2a 95       	dec	r18
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_InitPin+0xfe>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
     c88:	a8 e3       	ldi	r26, 0x38	; 56
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_InitPin+0x128>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_InitPin+0x124>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	cd c1       	rjmp	.+922    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
     cb2:	a4 e3       	ldi	r26, 0x34	; 52
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_InitPin+0x150>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	2a 95       	dec	r18
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_InitPin+0x14c>
     cd2:	84 2b       	or	r24, r20
     cd4:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
     cd6:	a5 e3       	ldi	r26, 0x35	; 53
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e3       	ldi	r30, 0x35	; 53
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_InitPin+0x176>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_InitPin+0x172>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	a6 c1       	rjmp	.+844    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
     d00:	a1 e3       	ldi	r26, 0x31	; 49
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e1 e3       	ldi	r30, 0x31	; 49
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_InitPin+0x19e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	2a 95       	dec	r18
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_InitPin+0x19a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
     d24:	a2 e3       	ldi	r26, 0x32	; 50
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e2 e3       	ldi	r30, 0x32	; 50
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_InitPin+0x1c4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_InitPin+0x1c0>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	7f c1       	rjmp	.+766    	; 0x104c <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INFREE:
		switch(port)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	38 87       	std	Y+8, r19	; 0x08
     d56:	2f 83       	std	Y+7, r18	; 0x07
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_InitPin+0x1e6>
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <DIO_InitPin+0x264>
     d64:	2f 81       	ldd	r18, Y+7	; 0x07
     d66:	38 85       	ldd	r19, Y+8	; 0x08
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <DIO_InitPin+0x1fa>
     d6e:	8f 81       	ldd	r24, Y+7	; 0x07
     d70:	98 85       	ldd	r25, Y+8	; 0x08
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	71 f0       	breq	.+28     	; 0xd92 <DIO_InitPin+0x214>
     d76:	6a c1       	rjmp	.+724    	; 0x104c <DIO_InitPin+0x4ce>
     d78:	2f 81       	ldd	r18, Y+7	; 0x07
     d7a:	38 85       	ldd	r19, Y+8	; 0x08
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <DIO_InitPin+0x206>
     d82:	57 c0       	rjmp	.+174    	; 0xe32 <DIO_InitPin+0x2b4>
     d84:	8f 81       	ldd	r24, Y+7	; 0x07
     d86:	98 85       	ldd	r25, Y+8	; 0x08
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <DIO_InitPin+0x212>
     d8e:	79 c0       	rjmp	.+242    	; 0xe82 <DIO_InitPin+0x304>
     d90:	5d c1       	rjmp	.+698    	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     d92:	aa e3       	ldi	r26, 0x3A	; 58
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ea e3       	ldi	r30, 0x3A	; 58
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_InitPin+0x230>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	2a 95       	dec	r18
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_InitPin+0x22c>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
     db8:	ab e3       	ldi	r26, 0x3B	; 59
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e3       	ldi	r30, 0x3B	; 59
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_InitPin+0x258>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_InitPin+0x254>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	35 c1       	rjmp	.+618    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_InitPin+0x280>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	2a 95       	dec	r18
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_InitPin+0x27c>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_InitPin+0x2a8>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_InitPin+0x2a4>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	0d c1       	rjmp	.+538    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
     e32:	a4 e3       	ldi	r26, 0x34	; 52
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_InitPin+0x2d0>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	2a 95       	dec	r18
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_InitPin+0x2cc>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
     e58:	a5 e3       	ldi	r26, 0x35	; 53
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e3       	ldi	r30, 0x35	; 53
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_InitPin+0x2f8>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_InitPin+0x2f4>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	e5 c0       	rjmp	.+458    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_InitPin+0x320>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	2a 95       	dec	r18
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_InitPin+0x31c>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
     ea8:	a2 e3       	ldi	r26, 0x32	; 50
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e2 e3       	ldi	r30, 0x32	; 50
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_InitPin+0x348>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_InitPin+0x344>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	bd c0       	rjmp	.+378    	; 0x104c <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INPULL:
		switch(port)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3e 83       	std	Y+6, r19	; 0x06
     eda:	2d 83       	std	Y+5, r18	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <DIO_InitPin+0x36a>
     ee6:	3e c0       	rjmp	.+124    	; 0xf64 <DIO_InitPin+0x3e6>
     ee8:	2d 81       	ldd	r18, Y+5	; 0x05
     eea:	3e 81       	ldd	r19, Y+6	; 0x06
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	2c f4       	brge	.+10     	; 0xefc <DIO_InitPin+0x37e>
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	71 f0       	breq	.+28     	; 0xf16 <DIO_InitPin+0x398>
     efa:	a8 c0       	rjmp	.+336    	; 0x104c <DIO_InitPin+0x4ce>
     efc:	2d 81       	ldd	r18, Y+5	; 0x05
     efe:	3e 81       	ldd	r19, Y+6	; 0x06
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_InitPin+0x38a>
     f06:	55 c0       	rjmp	.+170    	; 0xfb2 <DIO_InitPin+0x434>
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <DIO_InitPin+0x396>
     f12:	76 c0       	rjmp	.+236    	; 0x1000 <DIO_InitPin+0x482>
     f14:	9b c0       	rjmp	.+310    	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_InitPin+0x3b4>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_InitPin+0x3b0>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin_num);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_InitPin+0x3dc>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_InitPin+0x3d8>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	74 c0       	rjmp	.+232    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
     f64:	a7 e3       	ldi	r26, 0x37	; 55
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e3       	ldi	r30, 0x37	; 55
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_InitPin+0x402>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_InitPin+0x3fe>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
     f8a:	a8 e3       	ldi	r26, 0x38	; 56
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e3       	ldi	r30, 0x38	; 56
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_InitPin+0x42a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_InitPin+0x426>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	4d c0       	rjmp	.+154    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_InitPin+0x450>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_InitPin+0x44c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
     fd8:	a5 e3       	ldi	r26, 0x35	; 53
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_InitPin+0x478>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_InitPin+0x474>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	26 c0       	rjmp	.+76     	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1000:	a1 e3       	ldi	r26, 0x31	; 49
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e1 e3       	ldi	r30, 0x31	; 49
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_InitPin+0x49e>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_InitPin+0x49a>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_InitPin+0x4c6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_InitPin+0x4c2>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24

		}
		break;

	}
}
    104c:	2c 96       	adiw	r28, 0x0c	; 12
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	28 97       	sbiw	r28, 0x08	; 8
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	87 70       	andi	r24, 0x07	; 7
    107a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	86 95       	lsr	r24
    1080:	86 95       	lsr	r24
    1082:	86 95       	lsr	r24
    1084:	89 83       	std	Y+1, r24	; 0x01

	if(volt==HIGH)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	09 f0       	breq	.+2      	; 0x108e <DIO_WritePin+0x30>
    108c:	6f c0       	rjmp	.+222    	; 0x116c <DIO_WritePin+0x10e>
	{
		switch(port)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	49 f1       	breq	.+82     	; 0x10f4 <DIO_WritePin+0x96>
    10a2:	2f 81       	ldd	r18, Y+7	; 0x07
    10a4:	38 85       	ldd	r19, Y+8	; 0x08
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <DIO_WritePin+0x58>
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	61 f0       	breq	.+24     	; 0x10cc <DIO_WritePin+0x6e>
    10b4:	ce c0       	rjmp	.+412    	; 0x1252 <DIO_WritePin+0x1f4>
    10b6:	2f 81       	ldd	r18, Y+7	; 0x07
    10b8:	38 85       	ldd	r19, Y+8	; 0x08
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	71 f1       	breq	.+92     	; 0x111c <DIO_WritePin+0xbe>
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	e9 f1       	breq	.+122    	; 0x1144 <DIO_WritePin+0xe6>
    10ca:	c3 c0       	rjmp	.+390    	; 0x1252 <DIO_WritePin+0x1f4>
		{
			case PA:

			SET_BIT(PORTA,pin_num);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_WritePin+0x8c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_WritePin+0x88>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	af c0       	rjmp	.+350    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PB:

			SET_BIT(PORTB,pin_num);
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_WritePin+0xb4>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_WritePin+0xb0>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	9b c0       	rjmp	.+310    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PC:

			SET_BIT(PORTC,pin_num);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_WritePin+0xdc>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_WritePin+0xd8>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	87 c0       	rjmp	.+270    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PD:

			SET_BIT(PORTD,pin_num);
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_WritePin+0x104>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_WritePin+0x100>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	73 c0       	rjmp	.+230    	; 0x1252 <DIO_WritePin+0x1f4>

		}
	}
	else
	{
		switch(port)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3e 83       	std	Y+6, r19	; 0x06
    1174:	2d 83       	std	Y+5, r18	; 0x05
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	59 f1       	breq	.+86     	; 0x11d6 <DIO_WritePin+0x178>
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_WritePin+0x136>
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f0       	breq	.+26     	; 0x11ac <DIO_WritePin+0x14e>
    1192:	5f c0       	rjmp	.+190    	; 0x1252 <DIO_WritePin+0x1f4>
    1194:	2d 81       	ldd	r18, Y+5	; 0x05
    1196:	3e 81       	ldd	r19, Y+6	; 0x06
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	89 f1       	breq	.+98     	; 0x1200 <DIO_WritePin+0x1a2>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_WritePin+0x14c>
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <DIO_WritePin+0x1cc>
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <DIO_WritePin+0x1f4>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_WritePin+0x16c>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_WritePin+0x168>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	3e c0       	rjmp	.+124    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PB:
			CLR_BIT(PORTB,pin_num);
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_WritePin+0x196>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_WritePin+0x192>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	29 c0       	rjmp	.+82     	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_WritePin+0x1c0>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_WritePin+0x1bc>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_WritePin+0x1ea>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_WritePin+0x1e6>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
			break;

		}
	}
}
    1252:	28 96       	adiw	r28, 0x08	; 8
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <DIO_ReadPin>:


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <DIO_ReadPin+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_ReadPin+0x8>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_ReadPin+0xa>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin_num = pin%8;
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	87 70       	andi	r24, 0x07	; 7
    1278:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port=pin/8;
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    1284:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3e 83       	std	Y+6, r19	; 0x06
    128e:	2d 83       	std	Y+5, r18	; 0x05
    1290:	4d 81       	ldd	r20, Y+5	; 0x05
    1292:	5e 81       	ldd	r21, Y+6	; 0x06
    1294:	41 30       	cpi	r20, 0x01	; 1
    1296:	51 05       	cpc	r21, r1
    1298:	41 f1       	breq	.+80     	; 0x12ea <DIO_ReadPin+0x86>
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	34 f4       	brge	.+12     	; 0x12b0 <DIO_ReadPin+0x4c>
    12a4:	2d 81       	ldd	r18, Y+5	; 0x05
    12a6:	3e 81       	ldd	r19, Y+6	; 0x06
    12a8:	21 15       	cp	r18, r1
    12aa:	31 05       	cpc	r19, r1
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <DIO_ReadPin+0x62>
    12ae:	52 c0       	rjmp	.+164    	; 0x1354 <DIO_ReadPin+0xf0>
    12b0:	4d 81       	ldd	r20, Y+5	; 0x05
    12b2:	5e 81       	ldd	r21, Y+6	; 0x06
    12b4:	42 30       	cpi	r20, 0x02	; 2
    12b6:	51 05       	cpc	r21, r1
    12b8:	51 f1       	breq	.+84     	; 0x130e <DIO_ReadPin+0xaa>
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	b9 f1       	breq	.+110    	; 0x1332 <DIO_ReadPin+0xce>
    12c4:	47 c0       	rjmp	.+142    	; 0x1354 <DIO_ReadPin+0xf0>
	{
		case PA:

		volt=READ_BIT(PINA,pin_num);
    12c6:	e9 e3       	ldi	r30, 0x39	; 57
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_ReadPin+0x7a>
    12da:	55 95       	asr	r21
    12dc:	47 95       	ror	r20
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_ReadPin+0x76>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	35 c0       	rjmp	.+106    	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PB:

		volt=READ_BIT(PINB,pin_num);
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_ReadPin+0x9e>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_ReadPin+0x9a>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	23 c0       	rjmp	.+70     	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PC:

		volt=READ_BIT(PINC,pin_num);
    130e:	e3 e3       	ldi	r30, 0x33	; 51
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a9 01       	movw	r20, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_ReadPin+0xc2>
    1322:	55 95       	asr	r21
    1324:	47 95       	ror	r20
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_ReadPin+0xbe>
    132a:	ca 01       	movw	r24, r20
    132c:	81 70       	andi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	11 c0       	rjmp	.+34     	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PD:

		volt=READ_BIT(PIND,pin_num);
    1332:	e0 e3       	ldi	r30, 0x30	; 48
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_ReadPin+0xe6>
    1346:	55 95       	asr	r21
    1348:	47 95       	ror	r20
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_ReadPin+0xe2>
    134e:	ca 01       	movw	r24, r20
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return volt;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_TogglePin+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_TogglePin+0x8>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num = pin%8;
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	86 95       	lsr	r24
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	49 f1       	breq	.+82     	; 0x13ee <DIO_TogglePin+0x86>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_TogglePin+0x48>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <DIO_TogglePin+0x5e>
    13ae:	5a c0       	rjmp	.+180    	; 0x1464 <DIO_TogglePin+0xfc>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	71 f1       	breq	.+92     	; 0x1416 <DIO_TogglePin+0xae>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	e9 f1       	breq	.+122    	; 0x143e <DIO_TogglePin+0xd6>
    13c4:	4f c0       	rjmp	.+158    	; 0x1464 <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_TogglePin+0x7c>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_TogglePin+0x78>
    13e8:	84 27       	eor	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	3b c0       	rjmp	.+118    	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PB:
		TOG_BIT(PORTB,pin_num);
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_TogglePin+0xa4>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_TogglePin+0xa0>
    1410:	84 27       	eor	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	27 c0       	rjmp	.+78     	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PC:
		TOG_BIT(PORTC,pin_num);
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_TogglePin+0xcc>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_TogglePin+0xc8>
    1438:	84 27       	eor	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PD:
		TOG_BIT(PORTD,pin_num);
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_TogglePin+0xf4>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_TogglePin+0xf0>
    1460:	84 27       	eor	r24, r20
    1462:	8c 93       	st	X, r24
		break;

	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <DIO_WritePort>:


void DIO_WritePort(DIO_Port_type port, u8 data)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <DIO_WritePort+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <DIO_WritePort+0x8>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	d1 f0       	breq	.+52     	; 0x14cc <DIO_WritePort+0x58>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	2c f4       	brge	.+10     	; 0x14ac <DIO_WritePort+0x38>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <DIO_WritePort+0x4e>
    14aa:	1e c0       	rjmp	.+60     	; 0x14e8 <DIO_WritePort+0x74>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <DIO_WritePort+0x62>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	91 05       	cpc	r25, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <DIO_WritePort+0x6c>
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <DIO_WritePort+0x74>
	{
		case PA:
		PORTA = data;
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB = data;
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC = data;;
    14d6:	e5 e3       	ldi	r30, 0x35	; 53
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD = data;;
    14e0:	e2 e3       	ldi	r30, 0x32	; 50
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
		break;

	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <DIO_ReadPort+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <DIO_ReadPort+0x8>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    1504:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <DIO_ReadPort+0x58>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <DIO_ReadPort+0x38>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <DIO_ReadPort+0x4e>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <DIO_ReadPort+0x74>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <DIO_ReadPort+0x62>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <DIO_ReadPort+0x6c>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <DIO_ReadPort+0x74>
	{
		case PA:
		data = PINA;
    1544:	e9 e3       	ldi	r30, 0x39	; 57
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	0e c0       	rjmp	.+28     	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PB:
		data = PINB;
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	09 c0       	rjmp	.+18     	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PC:
		data = PINC;;
    1558:	e3 e3       	ldi	r30, 0x33	; 51
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	04 c0       	rjmp	.+8      	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PD:
		data = PIND;;
    1562:	e0 e3       	ldi	r30, 0x30	; 48
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return data;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GIE_voidEnable>:
#include "GLOBAL_Interr.h"
#include"Utils.h"
#include"MemMap.h"

void GIE_voidEnable(void)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1582:	af e5       	ldi	r26, 0x5F	; 95
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e5       	ldi	r30, 0x5F	; 95
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	8c 93       	st	X, r24

}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    159e:	af e5       	ldi	r26, 0x5F	; 95
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ef e5       	ldi	r30, 0x5F	; 95
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 77       	andi	r24, 0x7F	; 127
    15aa:	8c 93       	st	X, r24
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	e9 97       	sbiw	r28, 0x39	; 57
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, LOW);
    15c8:	8c e1       	ldi	r24, 0x1C	; 28
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    15d0:	89 ad       	ldd	r24, Y+57	; 0x39
    15d2:	98 2f       	mov	r25, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	99 27       	eor	r25, r25
    15d8:	99 1f       	adc	r25, r25
    15da:	83 e1       	ldi	r24, 0x13	; 19
    15dc:	69 2f       	mov	r22, r25
    15de:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    15e2:	89 ad       	ldd	r24, Y+57	; 0x39
    15e4:	82 95       	swap	r24
    15e6:	86 95       	lsr	r24
    15e8:	86 95       	lsr	r24
    15ea:	83 70       	andi	r24, 0x03	; 3
    15ec:	98 2f       	mov	r25, r24
    15ee:	91 70       	andi	r25, 0x01	; 1
    15f0:	82 e1       	ldi	r24, 0x12	; 18
    15f2:	69 2f       	mov	r22, r25
    15f4:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    15f8:	89 ad       	ldd	r24, Y+57	; 0x39
    15fa:	82 95       	swap	r24
    15fc:	86 95       	lsr	r24
    15fe:	87 70       	andi	r24, 0x07	; 7
    1600:	98 2f       	mov	r25, r24
    1602:	91 70       	andi	r25, 0x01	; 1
    1604:	81 e1       	ldi	r24, 0x11	; 17
    1606:	69 2f       	mov	r22, r25
    1608:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    160c:	89 ad       	ldd	r24, Y+57	; 0x39
    160e:	82 95       	swap	r24
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	98 2f       	mov	r25, r24
    1614:	91 70       	andi	r25, 0x01	; 1
    1616:	80 e1       	ldi	r24, 0x10	; 16
    1618:	69 2f       	mov	r22, r25
    161a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    161e:	8e e1       	ldi	r24, 0x1E	; 30
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e8       	ldi	r26, 0x80	; 128
    162c:	bf e3       	ldi	r27, 0x3F	; 63
    162e:	8d ab       	std	Y+53, r24	; 0x35
    1630:	9e ab       	std	Y+54, r25	; 0x36
    1632:	af ab       	std	Y+55, r26	; 0x37
    1634:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1636:	6d a9       	ldd	r22, Y+53	; 0x35
    1638:	7e a9       	ldd	r23, Y+54	; 0x36
    163a:	8f a9       	ldd	r24, Y+55	; 0x37
    163c:	98 ad       	ldd	r25, Y+56	; 0x38
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	4a ef       	ldi	r20, 0xFA	; 250
    1644:	54 e4       	ldi	r21, 0x44	; 68
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	89 ab       	std	Y+49, r24	; 0x31
    1650:	9a ab       	std	Y+50, r25	; 0x32
    1652:	ab ab       	std	Y+51, r26	; 0x33
    1654:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1656:	69 a9       	ldd	r22, Y+49	; 0x31
    1658:	7a a9       	ldd	r23, Y+50	; 0x32
    165a:	8b a9       	ldd	r24, Y+51	; 0x33
    165c:	9c a9       	ldd	r25, Y+52	; 0x34
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166a:	88 23       	and	r24, r24
    166c:	2c f4       	brge	.+10     	; 0x1678 <WriteIns+0xc6>
		__ticks = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	98 ab       	std	Y+48, r25	; 0x30
    1674:	8f a7       	std	Y+47, r24	; 0x2f
    1676:	3f c0       	rjmp	.+126    	; 0x16f6 <WriteIns+0x144>
	else if (__tmp > 65535)
    1678:	69 a9       	ldd	r22, Y+49	; 0x31
    167a:	7a a9       	ldd	r23, Y+50	; 0x32
    167c:	8b a9       	ldd	r24, Y+51	; 0x33
    167e:	9c a9       	ldd	r25, Y+52	; 0x34
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	57 e4       	ldi	r21, 0x47	; 71
    1688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168c:	18 16       	cp	r1, r24
    168e:	4c f5       	brge	.+82     	; 0x16e2 <WriteIns+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	6d a9       	ldd	r22, Y+53	; 0x35
    1692:	7e a9       	ldd	r23, Y+54	; 0x36
    1694:	8f a9       	ldd	r24, Y+55	; 0x37
    1696:	98 ad       	ldd	r25, Y+56	; 0x38
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e2       	ldi	r20, 0x20	; 32
    169e:	51 e4       	ldi	r21, 0x41	; 65
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <WriteIns+0x126>
    16ba:	88 ec       	ldi	r24, 0xC8	; 200
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9e a7       	std	Y+46, r25	; 0x2e
    16c0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <WriteIns+0x114>
    16ca:	9e a7       	std	Y+46, r25	; 0x2e
    16cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d0:	98 a9       	ldd	r25, Y+48	; 0x30
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16da:	98 a9       	ldd	r25, Y+48	; 0x30
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	69 f7       	brne	.-38     	; 0x16ba <WriteIns+0x108>
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <WriteIns+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e2:	69 a9       	ldd	r22, Y+49	; 0x31
    16e4:	7a a9       	ldd	r23, Y+50	; 0x32
    16e6:	8b a9       	ldd	r24, Y+51	; 0x33
    16e8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	98 ab       	std	Y+48, r25	; 0x30
    16f4:	8f a7       	std	Y+47, r24	; 0x2f
    16f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f8:	98 a9       	ldd	r25, Y+48	; 0x30
    16fa:	9c a7       	std	Y+44, r25	; 0x2c
    16fc:	8b a7       	std	Y+43, r24	; 0x2b
    16fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1700:	9c a5       	ldd	r25, Y+44	; 0x2c
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <WriteIns+0x150>
    1706:	9c a7       	std	Y+44, r25	; 0x2c
    1708:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    170a:	8e e1       	ldi	r24, 0x1E	; 30
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e8       	ldi	r26, 0x80	; 128
    1718:	bf e3       	ldi	r27, 0x3F	; 63
    171a:	8f a3       	std	Y+39, r24	; 0x27
    171c:	98 a7       	std	Y+40, r25	; 0x28
    171e:	a9 a7       	std	Y+41, r26	; 0x29
    1720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6f a1       	ldd	r22, Y+39	; 0x27
    1724:	78 a5       	ldd	r23, Y+40	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	9a a5       	ldd	r25, Y+42	; 0x2a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8b a3       	std	Y+35, r24	; 0x23
    173c:	9c a3       	std	Y+36, r25	; 0x24
    173e:	ad a3       	std	Y+37, r26	; 0x25
    1740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1742:	6b a1       	ldd	r22, Y+35	; 0x23
    1744:	7c a1       	ldd	r23, Y+36	; 0x24
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <WriteIns+0x1b2>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <WriteIns+0x230>
	else if (__tmp > 65535)
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <WriteIns+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6f a1       	ldd	r22, Y+39	; 0x27
    177e:	78 a5       	ldd	r23, Y+40	; 0x28
    1780:	89 a5       	ldd	r24, Y+41	; 0x29
    1782:	9a a5       	ldd	r25, Y+42	; 0x2a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <WriteIns+0x212>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 a3       	std	Y+32, r25	; 0x20
    17ac:	8f 8f       	std	Y+31, r24	; 0x1f
    17ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b0:	98 a1       	ldd	r25, Y+32	; 0x20
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <WriteIns+0x200>
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	89 a1       	ldd	r24, Y+33	; 0x21
    17bc:	9a a1       	ldd	r25, Y+34	; 0x22
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <WriteIns+0x1f4>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <WriteIns+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	89 a1       	ldd	r24, Y+33	; 0x21
    17e4:	9a a1       	ldd	r25, Y+34	; 0x22
    17e6:	9e 8f       	std	Y+30, r25	; 0x1e
    17e8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <WriteIns+0x23c>
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(ins,3));
    17f6:	89 ad       	ldd	r24, Y+57	; 0x39
    17f8:	86 95       	lsr	r24
    17fa:	86 95       	lsr	r24
    17fc:	86 95       	lsr	r24
    17fe:	98 2f       	mov	r25, r24
    1800:	91 70       	andi	r25, 0x01	; 1
    1802:	83 e1       	ldi	r24, 0x13	; 19
    1804:	69 2f       	mov	r22, r25
    1806:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    180a:	89 ad       	ldd	r24, Y+57	; 0x39
    180c:	86 95       	lsr	r24
    180e:	86 95       	lsr	r24
    1810:	98 2f       	mov	r25, r24
    1812:	91 70       	andi	r25, 0x01	; 1
    1814:	82 e1       	ldi	r24, 0x12	; 18
    1816:	69 2f       	mov	r22, r25
    1818:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    181c:	89 ad       	ldd	r24, Y+57	; 0x39
    181e:	86 95       	lsr	r24
    1820:	98 2f       	mov	r25, r24
    1822:	91 70       	andi	r25, 0x01	; 1
    1824:	81 e1       	ldi	r24, 0x11	; 17
    1826:	69 2f       	mov	r22, r25
    1828:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    182c:	89 ad       	ldd	r24, Y+57	; 0x39
    182e:	98 2f       	mov	r25, r24
    1830:	91 70       	andi	r25, 0x01	; 1
    1832:	80 e1       	ldi	r24, 0x10	; 16
    1834:	69 2f       	mov	r22, r25
    1836:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    183a:	8e e1       	ldi	r24, 0x1E	; 30
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a0 e8       	ldi	r26, 0x80	; 128
    1848:	bf e3       	ldi	r27, 0x3F	; 63
    184a:	89 8f       	std	Y+25, r24	; 0x19
    184c:	9a 8f       	std	Y+26, r25	; 0x1a
    184e:	ab 8f       	std	Y+27, r26	; 0x1b
    1850:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	69 8d       	ldd	r22, Y+25	; 0x19
    1854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a ef       	ldi	r20, 0xFA	; 250
    1860:	54 e4       	ldi	r21, 0x44	; 68
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	8d 8b       	std	Y+21, r24	; 0x15
    186c:	9e 8b       	std	Y+22, r25	; 0x16
    186e:	af 8b       	std	Y+23, r26	; 0x17
    1870:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1872:	6d 89       	ldd	r22, Y+21	; 0x15
    1874:	7e 89       	ldd	r23, Y+22	; 0x16
    1876:	8f 89       	ldd	r24, Y+23	; 0x17
    1878:	98 8d       	ldd	r25, Y+24	; 0x18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	2c f4       	brge	.+10     	; 0x1894 <WriteIns+0x2e2>
		__ticks = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 8b       	std	Y+20, r25	; 0x14
    1890:	8b 8b       	std	Y+19, r24	; 0x13
    1892:	3f c0       	rjmp	.+126    	; 0x1912 <WriteIns+0x360>
	else if (__tmp > 65535)
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	4c f5       	brge	.+82     	; 0x18fe <WriteIns+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	69 8d       	ldd	r22, Y+25	; 0x19
    18ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9c 8b       	std	Y+20, r25	; 0x14
    18d2:	8b 8b       	std	Y+19, r24	; 0x13
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <WriteIns+0x342>
    18d6:	88 ec       	ldi	r24, 0xC8	; 200
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9a 8b       	std	Y+18, r25	; 0x12
    18dc:	89 8b       	std	Y+17, r24	; 0x11
    18de:	89 89       	ldd	r24, Y+17	; 0x11
    18e0:	9a 89       	ldd	r25, Y+18	; 0x12
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <WriteIns+0x330>
    18e6:	9a 8b       	std	Y+18, r25	; 0x12
    18e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ea:	8b 89       	ldd	r24, Y+19	; 0x13
    18ec:	9c 89       	ldd	r25, Y+20	; 0x14
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	9c 8b       	std	Y+20, r25	; 0x14
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	8b 89       	ldd	r24, Y+19	; 0x13
    18f6:	9c 89       	ldd	r25, Y+20	; 0x14
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	69 f7       	brne	.-38     	; 0x18d6 <WriteIns+0x324>
    18fc:	14 c0       	rjmp	.+40     	; 0x1926 <WriteIns+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1900:	7e 89       	ldd	r23, Y+22	; 0x16
    1902:	8f 89       	ldd	r24, Y+23	; 0x17
    1904:	98 8d       	ldd	r25, Y+24	; 0x18
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	98 8b       	std	Y+16, r25	; 0x10
    1918:	8f 87       	std	Y+15, r24	; 0x0f
    191a:	8f 85       	ldd	r24, Y+15	; 0x0f
    191c:	98 89       	ldd	r25, Y+16	; 0x10
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <WriteIns+0x36c>
    1922:	98 8b       	std	Y+16, r25	; 0x10
    1924:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1926:	8e e1       	ldi	r24, 0x1E	; 30
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e8       	ldi	r26, 0x80	; 128
    1934:	bf e3       	ldi	r27, 0x3F	; 63
    1936:	8b 87       	std	Y+11, r24	; 0x0b
    1938:	9c 87       	std	Y+12, r25	; 0x0c
    193a:	ad 87       	std	Y+13, r26	; 0x0d
    193c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a ef       	ldi	r20, 0xFA	; 250
    194c:	54 e4       	ldi	r21, 0x44	; 68
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	8f 83       	std	Y+7, r24	; 0x07
    1958:	98 87       	std	Y+8, r25	; 0x08
    195a:	a9 87       	std	Y+9, r26	; 0x09
    195c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <WriteIns+0x3ce>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <WriteIns+0x44c>
	else if (__tmp > 65535)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <WriteIns+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <WriteIns+0x42e>
    19c2:	88 ec       	ldi	r24, 0xC8	; 200
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <WriteIns+0x41c>
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <WriteIns+0x410>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <WriteIns+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <WriteIns+0x458>
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a12:	e9 96       	adiw	r28, 0x39	; 57
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <WriteData>:

void WriteData(u8 data)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	e9 97       	sbiw	r28, 0x39	; 57
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, HIGH);
    1a3a:	8c e1       	ldi	r24, 0x1C	; 28
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
    1a42:	89 ad       	ldd	r24, Y+57	; 0x39
    1a44:	98 2f       	mov	r25, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	99 27       	eor	r25, r25
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	83 e1       	ldi	r24, 0x13	; 19
    1a4e:	69 2f       	mov	r22, r25
    1a50:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    1a54:	89 ad       	ldd	r24, Y+57	; 0x39
    1a56:	82 95       	swap	r24
    1a58:	86 95       	lsr	r24
    1a5a:	86 95       	lsr	r24
    1a5c:	83 70       	andi	r24, 0x03	; 3
    1a5e:	98 2f       	mov	r25, r24
    1a60:	91 70       	andi	r25, 0x01	; 1
    1a62:	82 e1       	ldi	r24, 0x12	; 18
    1a64:	69 2f       	mov	r22, r25
    1a66:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    1a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6c:	82 95       	swap	r24
    1a6e:	86 95       	lsr	r24
    1a70:	87 70       	andi	r24, 0x07	; 7
    1a72:	98 2f       	mov	r25, r24
    1a74:	91 70       	andi	r25, 0x01	; 1
    1a76:	81 e1       	ldi	r24, 0x11	; 17
    1a78:	69 2f       	mov	r22, r25
    1a7a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    1a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a80:	82 95       	swap	r24
    1a82:	8f 70       	andi	r24, 0x0F	; 15
    1a84:	98 2f       	mov	r25, r24
    1a86:	91 70       	andi	r25, 0x01	; 1
    1a88:	80 e1       	ldi	r24, 0x10	; 16
    1a8a:	69 2f       	mov	r22, r25
    1a8c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1a90:	8e e1       	ldi	r24, 0x1E	; 30
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e8       	ldi	r26, 0x80	; 128
    1a9e:	bf e3       	ldi	r27, 0x3F	; 63
    1aa0:	8d ab       	std	Y+53, r24	; 0x35
    1aa2:	9e ab       	std	Y+54, r25	; 0x36
    1aa4:	af ab       	std	Y+55, r26	; 0x37
    1aa6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1aac:	8f a9       	ldd	r24, Y+55	; 0x37
    1aae:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	89 ab       	std	Y+49, r24	; 0x31
    1ac2:	9a ab       	std	Y+50, r25	; 0x32
    1ac4:	ab ab       	std	Y+51, r26	; 0x33
    1ac6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <WriteData+0xc6>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <WriteData+0x144>
	else if (__tmp > 65535)
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6d a9       	ldd	r22, Y+53	; 0x35
    1b04:	7e a9       	ldd	r23, Y+54	; 0x36
    1b06:	8f a9       	ldd	r24, Y+55	; 0x37
    1b08:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <WriteData+0x126>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9e a7       	std	Y+46, r25	; 0x2e
    1b32:	8d a7       	std	Y+45, r24	; 0x2d
    1b34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <WriteData+0x114>
    1b3c:	9e a7       	std	Y+46, r25	; 0x2e
    1b3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <WriteData+0x108>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	69 a9       	ldd	r22, Y+49	; 0x31
    1b56:	7a a9       	ldd	r23, Y+50	; 0x32
    1b58:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	9c a7       	std	Y+44, r25	; 0x2c
    1b6e:	8b a7       	std	Y+43, r24	; 0x2b
    1b70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <WriteData+0x150>
    1b78:	9c a7       	std	Y+44, r25	; 0x2c
    1b7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1b7c:	8e e1       	ldi	r24, 0x1E	; 30
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	8f a3       	std	Y+39, r24	; 0x27
    1b8e:	98 a7       	std	Y+40, r25	; 0x28
    1b90:	a9 a7       	std	Y+41, r26	; 0x29
    1b92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6f a1       	ldd	r22, Y+39	; 0x27
    1b96:	78 a5       	ldd	r23, Y+40	; 0x28
    1b98:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8b a3       	std	Y+35, r24	; 0x23
    1bae:	9c a3       	std	Y+36, r25	; 0x24
    1bb0:	ad a3       	std	Y+37, r26	; 0x25
    1bb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bba:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <WriteData+0x1b2>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <WriteData+0x230>
	else if (__tmp > 65535)
    1bd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bda:	8d a1       	ldd	r24, Y+37	; 0x25
    1bdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9a a3       	std	Y+34, r25	; 0x22
    1c14:	89 a3       	std	Y+33, r24	; 0x21
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <WriteData+0x212>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	98 a3       	std	Y+32, r25	; 0x20
    1c1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c22:	98 a1       	ldd	r25, Y+32	; 0x20
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <WriteData+0x200>
    1c28:	98 a3       	std	Y+32, r25	; 0x20
    1c2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <WriteData+0x1f4>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9a a3       	std	Y+34, r25	; 0x22
    1c52:	89 a3       	std	Y+33, r24	; 0x21
    1c54:	89 a1       	ldd	r24, Y+33	; 0x21
    1c56:	9a a1       	ldd	r25, Y+34	; 0x22
    1c58:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <WriteData+0x23c>
    1c64:	9e 8f       	std	Y+30, r25	; 0x1e
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(data,3));
    1c68:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6a:	86 95       	lsr	r24
    1c6c:	86 95       	lsr	r24
    1c6e:	86 95       	lsr	r24
    1c70:	98 2f       	mov	r25, r24
    1c72:	91 70       	andi	r25, 0x01	; 1
    1c74:	83 e1       	ldi	r24, 0x13	; 19
    1c76:	69 2f       	mov	r22, r25
    1c78:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    1c7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7e:	86 95       	lsr	r24
    1c80:	86 95       	lsr	r24
    1c82:	98 2f       	mov	r25, r24
    1c84:	91 70       	andi	r25, 0x01	; 1
    1c86:	82 e1       	ldi	r24, 0x12	; 18
    1c88:	69 2f       	mov	r22, r25
    1c8a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    1c8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c90:	86 95       	lsr	r24
    1c92:	98 2f       	mov	r25, r24
    1c94:	91 70       	andi	r25, 0x01	; 1
    1c96:	81 e1       	ldi	r24, 0x11	; 17
    1c98:	69 2f       	mov	r22, r25
    1c9a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    1c9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	91 70       	andi	r25, 0x01	; 1
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	69 2f       	mov	r22, r25
    1ca8:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1cac:	8e e1       	ldi	r24, 0x1E	; 30
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	89 8f       	std	Y+25, r24	; 0x19
    1cbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8d 8b       	std	Y+21, r24	; 0x15
    1cde:	9e 8b       	std	Y+22, r25	; 0x16
    1ce0:	af 8b       	std	Y+23, r26	; 0x17
    1ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <WriteData+0x2e2>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <WriteData+0x360>
	else if (__tmp > 65535)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <WriteData+0x342>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9a 8b       	std	Y+18, r25	; 0x12
    1d4e:	89 8b       	std	Y+17, r24	; 0x11
    1d50:	89 89       	ldd	r24, Y+17	; 0x11
    1d52:	9a 89       	ldd	r25, Y+18	; 0x12
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <WriteData+0x330>
    1d58:	9a 8b       	std	Y+18, r25	; 0x12
    1d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <WriteData+0x324>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	8b 89       	ldd	r24, Y+19	; 0x13
    1d86:	9c 89       	ldd	r25, Y+20	; 0x14
    1d88:	98 8b       	std	Y+16, r25	; 0x10
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	98 89       	ldd	r25, Y+16	; 0x10
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <WriteData+0x36c>
    1d94:	98 8b       	std	Y+16, r25	; 0x10
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1d98:	8e e1       	ldi	r24, 0x1E	; 30
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <WriteData+0x3ce>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <WriteData+0x44c>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <WriteData+0x42e>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <WriteData+0x41c>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <WriteData+0x410>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <WriteData+0x458>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e84:	e9 96       	adiw	r28, 0x39	; 57
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LCD_Init>:

void LCD_Init(void)
{
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	c4 55       	subi	r28, 0x54	; 84
    1ea4:	d0 40       	sbci	r29, 0x00	; 0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ef 5a       	subi	r30, 0xAF	; 175
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a8 e4       	ldi	r26, 0x48	; 72
    1ebc:	b2 e4       	ldi	r27, 0x42	; 66
    1ebe:	80 83       	st	Z, r24
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	a2 83       	std	Z+2, r26	; 0x02
    1ec4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	8e 01       	movw	r16, r28
    1ec8:	03 5b       	subi	r16, 0xB3	; 179
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ef 5a       	subi	r30, 0xAF	; 175
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 83       	st	Z, r24
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	a2 83       	std	Z+2, r26	; 0x02
    1ef2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e3 5b       	subi	r30, 0xB3	; 179
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	60 81       	ld	r22, Z
    1efc:	71 81       	ldd	r23, Z+1	; 0x01
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	44 f4       	brge	.+16     	; 0x1f22 <LCD_Init+0x8c>
		__ticks = 1;
    1f12:	fe 01       	movw	r30, r28
    1f14:	e5 5b       	subi	r30, 0xB5	; 181
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	64 c0       	rjmp	.+200    	; 0x1fea <LCD_Init+0x154>
	else if (__tmp > 65535)
    1f22:	fe 01       	movw	r30, r28
    1f24:	e3 5b       	subi	r30, 0xB3	; 179
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	0c f0       	brlt	.+2      	; 0x1f42 <LCD_Init+0xac>
    1f40:	43 c0       	rjmp	.+134    	; 0x1fc8 <LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	fe 01       	movw	r30, r28
    1f44:	ef 5a       	subi	r30, 0xAF	; 175
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8e 01       	movw	r16, r28
    1f62:	05 5b       	subi	r16, 0xB5	; 181
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	f8 01       	movw	r30, r16
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
    1f78:	1f c0       	rjmp	.+62     	; 0x1fb8 <LCD_Init+0x122>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 5b       	subi	r30, 0xB7	; 183
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	91 83       	std	Z+1, r25	; 0x01
    1f86:	80 83       	st	Z, r24
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e7 5b       	subi	r30, 0xB7	; 183
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_Init+0xfc>
    1f96:	fe 01       	movw	r30, r28
    1f98:	e7 5b       	subi	r30, 0xB7	; 183
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	de 01       	movw	r26, r28
    1fa2:	a5 5b       	subi	r26, 0xB5	; 181
    1fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e5 5b       	subi	r30, 0xB5	; 181
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	11 96       	adiw	r26, 0x01	; 1
    1fb4:	9c 93       	st	X, r25
    1fb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e5 5b       	subi	r30, 0xB5	; 181
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	d1 f6       	brne	.-76     	; 0x1f7a <LCD_Init+0xe4>
    1fc6:	27 c0       	rjmp	.+78     	; 0x2016 <LCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc8:	8e 01       	movw	r16, r28
    1fca:	05 5b       	subi	r16, 0xB5	; 181
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e3 5b       	subi	r30, 0xB3	; 179
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
    1fea:	de 01       	movw	r26, r28
    1fec:	a9 5b       	subi	r26, 0xB9	; 185
    1fee:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e5 5b       	subi	r30, 0xB5	; 181
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	8d 93       	st	X+, r24
    1ffc:	9c 93       	st	X, r25
    1ffe:	fe 01       	movw	r30, r28
    2000:	e9 5b       	subi	r30, 0xB9	; 185
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_Init+0x172>
    200c:	fe 01       	movw	r30, r28
    200e:	e9 5b       	subi	r30, 0xB9	; 185
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
	_delay_ms(50);
	WriteIns(0x02);
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    201c:	fe 01       	movw	r30, r28
    201e:	ed 5b       	subi	r30, 0xBD	; 189
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e8       	ldi	r26, 0x80	; 128
    2028:	bf e3       	ldi	r27, 0x3F	; 63
    202a:	80 83       	st	Z, r24
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	a2 83       	std	Z+2, r26	; 0x02
    2030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	8e 01       	movw	r16, r28
    2034:	01 5c       	subi	r16, 0xC1	; 193
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	fe 01       	movw	r30, r28
    203a:	ed 5b       	subi	r30, 0xBD	; 189
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	f8 01       	movw	r30, r16
    2058:	80 83       	st	Z, r24
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	a2 83       	std	Z+2, r26	; 0x02
    205e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2060:	fe 01       	movw	r30, r28
    2062:	ff 96       	adiw	r30, 0x3f	; 63
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <LCD_Init+0x1f0>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9e af       	std	Y+62, r25	; 0x3e
    2082:	8d af       	std	Y+61, r24	; 0x3d
    2084:	46 c0       	rjmp	.+140    	; 0x2112 <LCD_Init+0x27c>
	else if (__tmp > 65535)
    2086:	fe 01       	movw	r30, r28
    2088:	ff 96       	adiw	r30, 0x3f	; 63
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	64 f5       	brge	.+88     	; 0x20fa <LCD_Init+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	fe 01       	movw	r30, r28
    20a4:	ed 5b       	subi	r30, 0xBD	; 189
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e af       	std	Y+62, r25	; 0x3e
    20ce:	8d af       	std	Y+61, r24	; 0x3d
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <LCD_Init+0x25a>
    20d2:	88 ec       	ldi	r24, 0xC8	; 200
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9c af       	std	Y+60, r25	; 0x3c
    20d8:	8b af       	std	Y+59, r24	; 0x3b
    20da:	8b ad       	ldd	r24, Y+59	; 0x3b
    20dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <LCD_Init+0x248>
    20e2:	9c af       	std	Y+60, r25	; 0x3c
    20e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	9e af       	std	Y+62, r25	; 0x3e
    20ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <LCD_Init+0x23c>
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <LCD_Init+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	fe 01       	movw	r30, r28
    20fc:	ff 96       	adiw	r30, 0x3f	; 63
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e af       	std	Y+62, r25	; 0x3e
    2110:	8d af       	std	Y+61, r24	; 0x3d
    2112:	8d ad       	ldd	r24, Y+61	; 0x3d
    2114:	9e ad       	ldd	r25, Y+62	; 0x3e
    2116:	9a af       	std	Y+58, r25	; 0x3a
    2118:	89 af       	std	Y+57, r24	; 0x39
    211a:	89 ad       	ldd	r24, Y+57	; 0x39
    211c:	9a ad       	ldd	r25, Y+58	; 0x3a
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_Init+0x288>
    2122:	9a af       	std	Y+58, r25	; 0x3a
    2124:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	WriteIns(0x28);
    2126:	88 e2       	ldi	r24, 0x28	; 40
    2128:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e8       	ldi	r26, 0x80	; 128
    2132:	bf e3       	ldi	r27, 0x3F	; 63
    2134:	8d ab       	std	Y+53, r24	; 0x35
    2136:	9e ab       	std	Y+54, r25	; 0x36
    2138:	af ab       	std	Y+55, r26	; 0x37
    213a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6d a9       	ldd	r22, Y+53	; 0x35
    213e:	7e a9       	ldd	r23, Y+54	; 0x36
    2140:	8f a9       	ldd	r24, Y+55	; 0x37
    2142:	98 ad       	ldd	r25, Y+56	; 0x38
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	89 ab       	std	Y+49, r24	; 0x31
    2156:	9a ab       	std	Y+50, r25	; 0x32
    2158:	ab ab       	std	Y+51, r26	; 0x33
    215a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215c:	69 a9       	ldd	r22, Y+49	; 0x31
    215e:	7a a9       	ldd	r23, Y+50	; 0x32
    2160:	8b a9       	ldd	r24, Y+51	; 0x33
    2162:	9c a9       	ldd	r25, Y+52	; 0x34
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_Init+0x2e8>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	98 ab       	std	Y+48, r25	; 0x30
    217a:	8f a7       	std	Y+47, r24	; 0x2f
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_Init+0x366>
	else if (__tmp > 65535)
    217e:	69 a9       	ldd	r22, Y+49	; 0x31
    2180:	7a a9       	ldd	r23, Y+50	; 0x32
    2182:	8b a9       	ldd	r24, Y+51	; 0x33
    2184:	9c a9       	ldd	r25, Y+52	; 0x34
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_Init+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6d a9       	ldd	r22, Y+53	; 0x35
    2198:	7e a9       	ldd	r23, Y+54	; 0x36
    219a:	8f a9       	ldd	r24, Y+55	; 0x37
    219c:	98 ad       	ldd	r25, Y+56	; 0x38
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	98 ab       	std	Y+48, r25	; 0x30
    21bc:	8f a7       	std	Y+47, r24	; 0x2f
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_Init+0x348>
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9e a7       	std	Y+46, r25	; 0x2e
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
    21c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_Init+0x336>
    21d0:	9e a7       	std	Y+46, r25	; 0x2e
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	98 ab       	std	Y+48, r25	; 0x30
    21dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_Init+0x32a>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_Init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ea:	7a a9       	ldd	r23, Y+50	; 0x32
    21ec:	8b a9       	ldd	r24, Y+51	; 0x33
    21ee:	9c a9       	ldd	r25, Y+52	; 0x34
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	98 ab       	std	Y+48, r25	; 0x30
    21fa:	8f a7       	std	Y+47, r24	; 0x2f
    21fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2200:	9c a7       	std	Y+44, r25	; 0x2c
    2202:	8b a7       	std	Y+43, r24	; 0x2b
    2204:	8b a5       	ldd	r24, Y+43	; 0x2b
    2206:	9c a5       	ldd	r25, Y+44	; 0x2c
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_Init+0x372>
    220c:	9c a7       	std	Y+44, r25	; 0x2c
    220e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	WriteIns(0x0C);
    2210:	8c e0       	ldi	r24, 0x0C	; 12
    2212:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	8f a3       	std	Y+39, r24	; 0x27
    2220:	98 a7       	std	Y+40, r25	; 0x28
    2222:	a9 a7       	std	Y+41, r26	; 0x29
    2224:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6f a1       	ldd	r22, Y+39	; 0x27
    2228:	78 a5       	ldd	r23, Y+40	; 0x28
    222a:	89 a5       	ldd	r24, Y+41	; 0x29
    222c:	9a a5       	ldd	r25, Y+42	; 0x2a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8b a3       	std	Y+35, r24	; 0x23
    2240:	9c a3       	std	Y+36, r25	; 0x24
    2242:	ad a3       	std	Y+37, r26	; 0x25
    2244:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2246:	6b a1       	ldd	r22, Y+35	; 0x23
    2248:	7c a1       	ldd	r23, Y+36	; 0x24
    224a:	8d a1       	ldd	r24, Y+37	; 0x25
    224c:	9e a1       	ldd	r25, Y+38	; 0x26
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_Init+0x3d2>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_Init+0x450>
	else if (__tmp > 65535)
    2268:	6b a1       	ldd	r22, Y+35	; 0x23
    226a:	7c a1       	ldd	r23, Y+36	; 0x24
    226c:	8d a1       	ldd	r24, Y+37	; 0x25
    226e:	9e a1       	ldd	r25, Y+38	; 0x26
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_Init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6f a1       	ldd	r22, Y+39	; 0x27
    2282:	78 a5       	ldd	r23, Y+40	; 0x28
    2284:	89 a5       	ldd	r24, Y+41	; 0x29
    2286:	9a a5       	ldd	r25, Y+42	; 0x2a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9a a3       	std	Y+34, r25	; 0x22
    22a6:	89 a3       	std	Y+33, r24	; 0x21
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_Init+0x432>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	98 a3       	std	Y+32, r25	; 0x20
    22b0:	8f 8f       	std	Y+31, r24	; 0x1f
    22b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b4:	98 a1       	ldd	r25, Y+32	; 0x20
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_Init+0x420>
    22ba:	98 a3       	std	Y+32, r25	; 0x20
    22bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	89 a1       	ldd	r24, Y+33	; 0x21
    22c0:	9a a1       	ldd	r25, Y+34	; 0x22
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9a a3       	std	Y+34, r25	; 0x22
    22c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ca:	9a a1       	ldd	r25, Y+34	; 0x22
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_Init+0x414>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <LCD_Init+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6b a1       	ldd	r22, Y+35	; 0x23
    22d4:	7c a1       	ldd	r23, Y+36	; 0x24
    22d6:	8d a1       	ldd	r24, Y+37	; 0x25
    22d8:	9e a1       	ldd	r25, Y+38	; 0x26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9a a3       	std	Y+34, r25	; 0x22
    22e4:	89 a3       	std	Y+33, r24	; 0x21
    22e6:	89 a1       	ldd	r24, Y+33	; 0x21
    22e8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ea:	9e 8f       	std	Y+30, r25	; 0x1e
    22ec:	8d 8f       	std	Y+29, r24	; 0x1d
    22ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_Init+0x45c>
    22f6:	9e 8f       	std	Y+30, r25	; 0x1e
    22f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	WriteIns(0x01); //clear screen
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e0       	ldi	r26, 0x00	; 0
    2306:	b0 e4       	ldi	r27, 0x40	; 64
    2308:	89 8f       	std	Y+25, r24	; 0x19
    230a:	9a 8f       	std	Y+26, r25	; 0x1a
    230c:	ab 8f       	std	Y+27, r26	; 0x1b
    230e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8d 8b       	std	Y+21, r24	; 0x15
    232a:	9e 8b       	std	Y+22, r25	; 0x16
    232c:	af 8b       	std	Y+23, r26	; 0x17
    232e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_Init+0x4bc>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_Init+0x53a>
	else if (__tmp > 65535)
    2352:	6d 89       	ldd	r22, Y+21	; 0x15
    2354:	7e 89       	ldd	r23, Y+22	; 0x16
    2356:	8f 89       	ldd	r24, Y+23	; 0x17
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_Init+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_Init+0x51c>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9a 8b       	std	Y+18, r25	; 0x12
    239a:	89 8b       	std	Y+17, r24	; 0x11
    239c:	89 89       	ldd	r24, Y+17	; 0x11
    239e:	9a 89       	ldd	r25, Y+18	; 0x12
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_Init+0x50a>
    23a4:	9a 8b       	std	Y+18, r25	; 0x12
    23a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8b 89       	ldd	r24, Y+19	; 0x13
    23aa:	9c 89       	ldd	r25, Y+20	; 0x14
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8b 89       	ldd	r24, Y+19	; 0x13
    23b4:	9c 89       	ldd	r25, Y+20	; 0x14
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_Init+0x4fe>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_Init+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6d 89       	ldd	r22, Y+21	; 0x15
    23be:	7e 89       	ldd	r23, Y+22	; 0x16
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	98 8b       	std	Y+16, r25	; 0x10
    23d6:	8f 87       	std	Y+15, r24	; 0x0f
    23d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23da:	98 89       	ldd	r25, Y+16	; 0x10
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_Init+0x546>
    23e0:	98 8b       	std	Y+16, r25	; 0x10
    23e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	WriteIns(0x06);
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e8       	ldi	r26, 0x80	; 128
    23f0:	bf e3       	ldi	r27, 0x3F	; 63
    23f2:	8b 87       	std	Y+11, r24	; 0x0b
    23f4:	9c 87       	std	Y+12, r25	; 0x0c
    23f6:	ad 87       	std	Y+13, r26	; 0x0d
    23f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2400:	9e 85       	ldd	r25, Y+14	; 0x0e
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8f 83       	std	Y+7, r24	; 0x07
    2414:	98 87       	std	Y+8, r25	; 0x08
    2416:	a9 87       	std	Y+9, r26	; 0x09
    2418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <LCD_Init+0x5a6>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <LCD_Init+0x624>
	else if (__tmp > 65535)
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <LCD_Init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	0f c0       	rjmp	.+30     	; 0x249c <LCD_Init+0x606>
    247e:	88 ec       	ldi	r24, 0xC8	; 200
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_Init+0x5f4>
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <LCD_Init+0x5e8>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <LCD_Init+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_Init+0x630>
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    24ce:	cc 5a       	subi	r28, 0xAC	; 172
    24d0:	df 4f       	sbci	r29, 0xFF	; 255
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <LCD_Clear>:

#endif

void LCD_Clear(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	WriteIns(0x01);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
}
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <LCD_GoTo>:

void LCD_GoTo(u8 line, u8 cell)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <LCD_GoTo+0x6>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	88 23       	and	r24, r24
    250c:	29 f4       	brne	.+10     	; 0x2518 <LCD_GoTo+0x1e>
	{
		WriteIns(0x80+cell);
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 58       	subi	r24, 0x80	; 128
    2512:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    2516:	17 c0       	rjmp	.+46     	; 0x2546 <LCD_GoTo+0x4c>
	}
	else if (line==1)
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	29 f4       	brne	.+10     	; 0x2528 <LCD_GoTo+0x2e>
	{
		WriteIns(0x80+0x40+cell);
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	80 54       	subi	r24, 0x40	; 64
    2522:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_GoTo+0x4c>
	}
	else if (line==2)
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	29 f4       	brne	.+10     	; 0x2538 <LCD_GoTo+0x3e>
	{
		WriteIns(0x94+cell);
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	8c 56       	subi	r24, 0x6C	; 108
    2532:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
    2536:	07 c0       	rjmp	.+14     	; 0x2546 <LCD_GoTo+0x4c>
	}
	else if (line==3)
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	21 f4       	brne	.+8      	; 0x2546 <LCD_GoTo+0x4c>
	{
		WriteIns(0xD4+cell);
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	8c 52       	subi	r24, 0x2C	; 44
    2542:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
	}
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LCD_WriteChar>:


void LCD_WriteChar(u8 ch)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	0f 92       	push	r0
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	89 83       	std	Y+1, r24	; 0x01
	WriteData(ch);
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <WriteData>
}
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <LCD_WriteString>:

void LCD_WriteString(c8* str)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <LCD_WriteString+0x6>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; str[i]; i++)
    257a:	19 82       	std	Y+1, r1	; 0x01
    257c:	0e c0       	rjmp	.+28     	; 0x259a <LCD_WriteString+0x30>
	{
		LCD_WriteChar(str[i]);
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	fc 01       	movw	r30, r24
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	80 81       	ld	r24, Z
    2590:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
}

void LCD_WriteString(c8* str)
{
	u8 i;
	for(i=0; str[i]; i++)
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	fc 01       	movw	r30, r24
    25a6:	e2 0f       	add	r30, r18
    25a8:	f3 1f       	adc	r31, r19
    25aa:	80 81       	ld	r24, Z
    25ac:	88 23       	and	r24, r24
    25ae:	39 f7       	brne	.-50     	; 0x257e <LCD_WriteString+0x14>
	{
		LCD_WriteChar(str[i]);
	}
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	66 97       	sbiw	r28, 0x16	; 22
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	6b 8b       	std	Y+19, r22	; 0x13
    25d6:	7c 8b       	std	Y+20, r23	; 0x14
    25d8:	8d 8b       	std	Y+21, r24	; 0x15
    25da:	9e 8b       	std	Y+22, r25	; 0x16
	c8 str[16];
	u8 i=0;
    25dc:	1a 82       	std	Y+2, r1	; 0x02
	s8 j=0;
    25de:	19 82       	std	Y+1, r1	; 0x01

	if(num==0)
    25e0:	8b 89       	ldd	r24, Y+19	; 0x13
    25e2:	9c 89       	ldd	r25, Y+20	; 0x14
    25e4:	ad 89       	ldd	r26, Y+21	; 0x15
    25e6:	be 89       	ldd	r27, Y+22	; 0x16
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	a1 05       	cpc	r26, r1
    25ec:	b1 05       	cpc	r27, r1
    25ee:	21 f4       	brne	.+8      	; 0x25f8 <LCD_WriteNumber+0x3c>
	{
		LCD_WriteChar('0');
    25f0:	80 e3       	ldi	r24, 0x30	; 48
    25f2:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
    25f6:	67 c0       	rjmp	.+206    	; 0x26c6 <LCD_WriteNumber+0x10a>
		return;
	}
	if(num<0)
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	ad 89       	ldd	r26, Y+21	; 0x15
    25fe:	be 89       	ldd	r27, Y+22	; 0x16
    2600:	bb 23       	and	r27, r27
    2602:	0c f0       	brlt	.+2      	; 0x2606 <LCD_WriteNumber+0x4a>
    2604:	41 c0       	rjmp	.+130    	; 0x2688 <LCD_WriteNumber+0xcc>
	{
		LCD_WriteChar('-');
    2606:	8d e2       	ldi	r24, 0x2D	; 45
    2608:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
		num = num * -1;
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	ad 89       	ldd	r26, Y+21	; 0x15
    2612:	be 89       	ldd	r27, Y+22	; 0x16
    2614:	b0 95       	com	r27
    2616:	a0 95       	com	r26
    2618:	90 95       	com	r25
    261a:	81 95       	neg	r24
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	af 4f       	sbci	r26, 0xFF	; 255
    2620:	bf 4f       	sbci	r27, 0xFF	; 255
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	ad 8b       	std	Y+21, r26	; 0x15
    2628:	be 8b       	std	Y+22, r27	; 0x16
    262a:	2e c0       	rjmp	.+92     	; 0x2688 <LCD_WriteNumber+0xcc>
	}

	while(num)
	{
		str[i++] = num%10 +'0';
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	08 2f       	mov	r16, r24
    2630:	10 e0       	ldi	r17, 0x00	; 0
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	ad 89       	ldd	r26, Y+21	; 0x15
    2638:	be 89       	ldd	r27, Y+22	; 0x16
    263a:	2a e0       	ldi	r18, 0x0A	; 10
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__divmodsi4>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	28 2f       	mov	r18, r24
    2650:	20 5d       	subi	r18, 0xD0	; 208
    2652:	ce 01       	movw	r24, r28
    2654:	03 96       	adiw	r24, 0x03	; 3
    2656:	fc 01       	movw	r30, r24
    2658:	e0 0f       	add	r30, r16
    265a:	f1 1f       	adc	r31, r17
    265c:	20 83       	st	Z, r18
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	8f 5f       	subi	r24, 0xFF	; 255
    2662:	8a 83       	std	Y+2, r24	; 0x02
		num = num/10;
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	ad 89       	ldd	r26, Y+21	; 0x15
    266a:	be 89       	ldd	r27, Y+22	; 0x16
    266c:	2a e0       	ldi	r18, 0x0A	; 10
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__divmodsi4>
    267c:	da 01       	movw	r26, r20
    267e:	c9 01       	movw	r24, r18
    2680:	8b 8b       	std	Y+19, r24	; 0x13
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	ad 8b       	std	Y+21, r26	; 0x15
    2686:	be 8b       	std	Y+22, r27	; 0x16
	{
		LCD_WriteChar('-');
		num = num * -1;
	}

	while(num)
    2688:	8b 89       	ldd	r24, Y+19	; 0x13
    268a:	9c 89       	ldd	r25, Y+20	; 0x14
    268c:	ad 89       	ldd	r26, Y+21	; 0x15
    268e:	be 89       	ldd	r27, Y+22	; 0x16
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	a1 05       	cpc	r26, r1
    2694:	b1 05       	cpc	r27, r1
    2696:	51 f6       	brne	.-108    	; 0x262c <LCD_WriteNumber+0x70>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	81 50       	subi	r24, 0x01	; 1
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	10 c0       	rjmp	.+32     	; 0x26c0 <LCD_WriteNumber+0x104>
	{
		LCD_WriteChar(str[j]);
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	28 2f       	mov	r18, r24
    26a4:	33 27       	eor	r19, r19
    26a6:	27 fd       	sbrc	r18, 7
    26a8:	30 95       	com	r19
    26aa:	ce 01       	movw	r24, r28
    26ac:	03 96       	adiw	r24, 0x03	; 3
    26ae:	fc 01       	movw	r30, r24
    26b0:	e2 0f       	add	r30, r18
    26b2:	f3 1f       	adc	r31, r19
    26b4:	80 81       	ld	r24, Z
    26b6:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	81 50       	subi	r24, 0x01	; 1
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	88 23       	and	r24, r24
    26c4:	6c f7       	brge	.-38     	; 0x26a0 <LCD_WriteNumber+0xe4>
	{
		LCD_WriteChar(str[j]);
	}


}
    26c6:	66 96       	adiw	r28, 0x16	; 22
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	08 95       	ret

000026dc <LCD_Write_4D>:

void LCD_Write_4D(u16 num) //5214
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_Write_4D+0x6>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteChar(((num%10000)/1000)+'0');
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	20 e1       	ldi	r18, 0x10	; 16
    26f0:	37 e2       	ldi	r19, 0x27	; 39
    26f2:	b9 01       	movw	r22, r18
    26f4:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    26f8:	28 ee       	ldi	r18, 0xE8	; 232
    26fa:	33 e0       	ldi	r19, 0x03	; 3
    26fc:	b9 01       	movw	r22, r18
    26fe:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2702:	cb 01       	movw	r24, r22
    2704:	80 5d       	subi	r24, 0xD0	; 208
    2706:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	LCD_WriteChar(((num%1000)/100)+'0');
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	28 ee       	ldi	r18, 0xE8	; 232
    2710:	33 e0       	ldi	r19, 0x03	; 3
    2712:	b9 01       	movw	r22, r18
    2714:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2718:	24 e6       	ldi	r18, 0x64	; 100
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	b9 01       	movw	r22, r18
    271e:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2722:	cb 01       	movw	r24, r22
    2724:	80 5d       	subi	r24, 0xD0	; 208
    2726:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	LCD_WriteChar(((num%100)/10)+'0');
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	24 e6       	ldi	r18, 0x64	; 100
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	b9 01       	movw	r22, r18
    2734:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2738:	2a e0       	ldi	r18, 0x0A	; 10
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2742:	cb 01       	movw	r24, r22
    2744:	80 5d       	subi	r24, 0xD0	; 208
    2746:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	LCD_WriteChar(((num%10)/1)+'0');
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	2a e0       	ldi	r18, 0x0A	; 10
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	b9 01       	movw	r22, r18
    2754:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodhi4>
    2758:	80 5d       	subi	r24, 0xD0	; 208
    275a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
}
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <LCD_WriteBinary>:

void LCD_WriteBinary(u8 num)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <LCD_WriteBinary+0x6>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	for(i=7; i>=0; i--)
    2774:	87 e0       	ldi	r24, 0x07	; 7
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	1c c0       	rjmp	.+56     	; 0x27b2 <LCD_WriteBinary+0x4a>
	{
		if(((num>>i)&1)==1)
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	99 27       	eor	r25, r25
    2784:	87 fd       	sbrc	r24, 7
    2786:	90 95       	com	r25
    2788:	a9 01       	movw	r20, r18
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <LCD_WriteBinary+0x28>
    278c:	55 95       	asr	r21
    278e:	47 95       	ror	r20
    2790:	8a 95       	dec	r24
    2792:	e2 f7       	brpl	.-8      	; 0x278c <LCD_WriteBinary+0x24>
    2794:	ca 01       	movw	r24, r20
    2796:	81 70       	andi	r24, 0x01	; 1
    2798:	90 70       	andi	r25, 0x00	; 0
    279a:	88 23       	and	r24, r24
    279c:	21 f0       	breq	.+8      	; 0x27a6 <LCD_WriteBinary+0x3e>
		{
			LCD_WriteChar('1');
    279e:	81 e3       	ldi	r24, 0x31	; 49
    27a0:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <LCD_WriteBinary+0x44>
		}
		else
		{
			LCD_WriteChar('0');
    27a6:	80 e3       	ldi	r24, 0x30	; 48
    27a8:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
}

void LCD_WriteBinary(u8 num)
{
	s8 i;
	for(i=7; i>=0; i--)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	81 50       	subi	r24, 0x01	; 1
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 23       	and	r24, r24
    27b6:	0c f7       	brge	.-62     	; 0x277a <LCD_WriteBinary+0x12>
		{
			LCD_WriteChar('0');
		}
		//LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <LCD_WriteHex>:

void LCD_WriteHex(u8 num)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <LCD_WriteHex+0x6>
    27c8:	0f 92       	push	r0
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	8b 83       	std	Y+3, r24	; 0x03
	u8 d0,d1;
	d0=num&0x0F;
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	8f 70       	andi	r24, 0x0F	; 15
    27d4:	8a 83       	std	Y+2, r24	; 0x02
	d1=(num>>4)&0x0F;
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	82 95       	swap	r24
    27da:	8f 70       	andi	r24, 0x0F	; 15
    27dc:	89 83       	std	Y+1, r24	; 0x01

	if(d1<10)
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	8a 30       	cpi	r24, 0x0A	; 10
    27e2:	28 f4       	brcc	.+10     	; 0x27ee <LCD_WriteHex+0x2c>
	{
		LCD_WriteChar(d1+'0');
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	80 5d       	subi	r24, 0xD0	; 208
    27e8:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <LCD_WriteHex+0x34>
	}
	else
	{
		LCD_WriteChar(d1-10+'A');
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	89 5c       	subi	r24, 0xC9	; 201
    27f2:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	}

	if(d0<10)
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	8a 30       	cpi	r24, 0x0A	; 10
    27fa:	28 f4       	brcc	.+10     	; 0x2806 <LCD_WriteHex+0x44>
	{
		LCD_WriteChar(d0+'0');
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	80 5d       	subi	r24, 0xD0	; 208
    2800:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
    2804:	04 c0       	rjmp	.+8      	; 0x280e <LCD_WriteHex+0x4c>
	}
	else
	{
		LCD_WriteChar(d0-10+'A');
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	89 5c       	subi	r24, 0xC9	; 201
    280a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
	}
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LCD_WriteStringGoTo>:

void LCD_WriteStringGoTo(u8 line, u8 cell, c8* str)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <LCD_WriteStringGoTo+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <LCD_WriteStringGoTo+0x8>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	6a 83       	std	Y+2, r22	; 0x02
    282a:	5c 83       	std	Y+4, r21	; 0x04
    282c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoTo(line,cell);
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	6a 81       	ldd	r22, Y+2	; 0x02
    2832:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_GoTo>
	LCD_WriteString(str);
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_WriteString>
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <LCD_ClearPosition>:

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <LCD_ClearPosition+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <LCD_ClearPosition+0x8>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	8a 83       	std	Y+2, r24	; 0x02
    285a:	6b 83       	std	Y+3, r22	; 0x03
    285c:	4c 83       	std	Y+4, r20	; 0x04
	u8 i;
	LCD_GoTo(line,cell);
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	6b 81       	ldd	r22, Y+3	; 0x03
    2862:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_GoTo>
	for(i=0; i<NoOfCells; i++)
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	06 c0       	rjmp	.+12     	; 0x2876 <LCD_ClearPosition+0x2a>
	{
		LCD_WriteChar(' ');
    286a:	80 e2       	ldi	r24, 0x20	; 32
    286c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
	u8 i;
	LCD_GoTo(line,cell);
	for(i=0; i<NoOfCells; i++)
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	99 81       	ldd	r25, Y+1	; 0x01
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	98 17       	cp	r25, r24
    287c:	b0 f3       	brcs	.-20     	; 0x286a <LCD_ClearPosition+0x1e>
	{
		LCD_WriteChar(' ');
	}
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_CustomChar>:


void LCD_CustomChar(u8 address, u8* pattern)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <LCD_CustomChar+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <LCD_CustomChar+0x8>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	8a 83       	std	Y+2, r24	; 0x02
    289a:	7c 83       	std	Y+4, r23	; 0x04
    289c:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	WriteIns(0x40+address*8);
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	08 96       	adiw	r24, 0x08	; 8
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
	for(i=0; i<8; i++)
    28b6:	19 82       	std	Y+1, r1	; 0x01
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <LCD_CustomChar+0x4a>
	{
		LCD_WriteChar(pattern[i]);
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	80 81       	ld	r24, Z
    28cc:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
void LCD_CustomChar(u8 address, u8* pattern)
{
	u8 i;

	WriteIns(0x40+address*8);
	for(i=0; i<8; i++)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	88 30       	cpi	r24, 0x08	; 8
    28da:	78 f3       	brcs	.-34     	; 0x28ba <LCD_CustomChar+0x2e>
	{
		LCD_WriteChar(pattern[i]);
	}
	WriteIns(0x80);
    28dc:	80 e8       	ldi	r24, 0x80	; 128
    28de:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <WriteIns>
}
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <main>:

	u8 receieve_data;
	u8 readSPi;

int main()
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	2e 97       	sbiw	r28, 0x0e	; 14
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
    2904:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_Init>
	LCD_Init();
    2908:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_Init>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	aa ef       	ldi	r26, 0xFA	; 250
    2912:	b3 e4       	ldi	r27, 0x43	; 67
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <main+0x6e>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <main+0xec>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <main+0xce>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <main+0xbc>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <main+0xb0>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <main+0xf8>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	SPI_voidMasterInit();
    29f0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <SPI_voidMasterInit>
	UART_init(9600);
    29f4:	80 e8       	ldi	r24, 0x80	; 128
    29f6:	95 e2       	ldi	r25, 0x25	; 37
    29f8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <UART_init>
	UART_RX_ENABLE();
    29fc:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <UART_RX_ENABLE>
//	Uart_Enable_Interr();
//	Interr_SetCallback(Interr_Action);

	while(1)
	{
		receieve_data=USART_Receive();
    2a00:	0e 94 65 17 	call	0x2eca	; 0x2eca <USART_Receive>
    2a04:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteChar(receieve_data);
    2a08:	80 91 8c 00 	lds	r24, 0x008C
    2a0c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_WriteChar>
//		_delay_ms(500);
		DIO_WritePin(PINB4,0);
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
		readSPi=SPI_u8Transfer(receieve_data);
    2a18:	80 91 8c 00 	lds	r24, 0x008C
    2a1c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <SPI_u8Transfer>
    2a20:	80 93 8d 00 	sts	0x008D, r24
    2a24:	ed cf       	rjmp	.-38     	; 0x2a00 <main+0x110>

00002a26 <SPI_voidMasterInit>:


static void(*g_SPIResult)(void)=NULLPTR;

void SPI_voidMasterInit(void)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	/*Master select*/
	SET_BIT(SPCR,MSTR);
    2a2e:	ad e2       	ldi	r26, 0x2D	; 45
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ed e2       	ldi	r30, 0x2D	; 45
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	80 61       	ori	r24, 0x10	; 16
    2a3a:	8c 93       	st	X, r24

	/*clock polarity*/
	switch(CLOCK_PLOARITY)
	{
	case 0:
		CLR_BIT(SPCR,CPOL);
    2a3c:	ad e2       	ldi	r26, 0x2D	; 45
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ed e2       	ldi	r30, 0x2D	; 45
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	87 7f       	andi	r24, 0xF7	; 247
    2a48:	8c 93       	st	X, r24
	}

	switch(CLOCK_PHASE)
	{
	case 0:
		CLR_BIT(SPCR,CPHA);
    2a4a:	ad e2       	ldi	r26, 0x2D	; 45
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ed e2       	ldi	r30, 0x2D	; 45
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	8b 7f       	andi	r24, 0xFB	; 251
    2a56:	8c 93       	st	X, r24
	}

	switch(DATA_ORDER)
	{
	case 0:
		SET_BIT(SPCR,DORD);
    2a58:	ad e2       	ldi	r26, 0x2D	; 45
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	ed e2       	ldi	r30, 0x2D	; 45
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	80 62       	ori	r24, 0x20	; 32
    2a64:	8c 93       	st	X, r24
	}

	switch(SPI_FREQUENCY)
	{
	case 0:
		CLR_BIT(SPCR,SPR0);
    2a66:	ad e2       	ldi	r26, 0x2D	; 45
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	ed e2       	ldi	r30, 0x2D	; 45
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	8e 7f       	andi	r24, 0xFE	; 254
    2a72:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    2a74:	ad e2       	ldi	r26, 0x2D	; 45
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	ed e2       	ldi	r30, 0x2D	; 45
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8d 7f       	andi	r24, 0xFD	; 253
    2a80:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    2a82:	ad e2       	ldi	r26, 0x2D	; 45
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ed e2       	ldi	r30, 0x2D	; 45
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8e 7f       	andi	r24, 0xFE	; 254
    2a8e:	8c 93       	st	X, r24
	}

	switch(INTERRUPT_MODE)
	{
	case 0:
		SET_BIT(SPCR,SPIE);
    2a90:	ad e2       	ldi	r26, 0x2D	; 45
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ed e2       	ldi	r30, 0x2D	; 45
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	80 68       	ori	r24, 0x80	; 128
    2a9c:	8c 93       	st	X, r24
	}

	switch(SPEED_MODE)
	{
	case 0:
		CLR_BIT(SPSR,SPI2X);
    2a9e:	ae e2       	ldi	r26, 0x2E	; 46
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	ee e2       	ldi	r30, 0x2E	; 46
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8e 7f       	andi	r24, 0xFE	; 254
    2aaa:	8c 93       	st	X, r24
	case 1:
		SET_BIT(SPSR,SPSR);
		break;
	}

	SET_BIT(SPCR,SPE);	//enable SPI
    2aac:	ad e2       	ldi	r26, 0x2D	; 45
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	ed e2       	ldi	r30, 0x2D	; 45
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	80 64       	ori	r24, 0x40	; 64
    2ab8:	8c 93       	st	X, r24
}/*End of MasterInit*/
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,MSTR);
    2ac8:	ad e2       	ldi	r26, 0x2D	; 45
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	ed e2       	ldi	r30, 0x2D	; 45
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8f 7e       	andi	r24, 0xEF	; 239
    2ad4:	8c 93       	st	X, r24

	/*clock polarity*/
	switch(CLOCK_PLOARITY)
	{
	case 0:
		CLR_BIT(SPCR,CPOL);
    2ad6:	ad e2       	ldi	r26, 0x2D	; 45
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ed e2       	ldi	r30, 0x2D	; 45
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	87 7f       	andi	r24, 0xF7	; 247
    2ae2:	8c 93       	st	X, r24
	}

	switch(CLOCK_PHASE)
	{
	case 0:
		CLR_BIT(SPCR,CPHA);
    2ae4:	ad e2       	ldi	r26, 0x2D	; 45
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	ed e2       	ldi	r30, 0x2D	; 45
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	8b 7f       	andi	r24, 0xFB	; 251
    2af0:	8c 93       	st	X, r24
	}

	switch(DATA_ORDER)
	{
	case 0:
		SET_BIT(SPCR,DORD);
    2af2:	ad e2       	ldi	r26, 0x2D	; 45
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ed e2       	ldi	r30, 0x2D	; 45
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	80 62       	ori	r24, 0x20	; 32
    2afe:	8c 93       	st	X, r24
	}

	switch(SPI_FREQUENCY)
	{
	case 0:
		CLR_BIT(SPCR,SPR0);
    2b00:	ad e2       	ldi	r26, 0x2D	; 45
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ed e2       	ldi	r30, 0x2D	; 45
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8e 7f       	andi	r24, 0xFE	; 254
    2b0c:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    2b0e:	ad e2       	ldi	r26, 0x2D	; 45
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ed e2       	ldi	r30, 0x2D	; 45
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8d 7f       	andi	r24, 0xFD	; 253
    2b1a:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    2b1c:	ad e2       	ldi	r26, 0x2D	; 45
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ed e2       	ldi	r30, 0x2D	; 45
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8e 7f       	andi	r24, 0xFE	; 254
    2b28:	8c 93       	st	X, r24
	}

	switch(INTERRUPT_MODE)
	{
	case 0:
		SET_BIT(SPCR,SPIE);
    2b2a:	ad e2       	ldi	r26, 0x2D	; 45
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ed e2       	ldi	r30, 0x2D	; 45
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	80 68       	ori	r24, 0x80	; 128
    2b36:	8c 93       	st	X, r24
	}

	switch(SPEED_MODE)
	{
	case 0:
		CLR_BIT(SPSR,SPI2X);
    2b38:	ae e2       	ldi	r26, 0x2E	; 46
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	ee e2       	ldi	r30, 0x2E	; 46
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	8e 7f       	andi	r24, 0xFE	; 254
    2b44:	8c 93       	st	X, r24
	case 1:
		SET_BIT(SPSR,SPSR);
		break;
	}

	SET_BIT(SPCR,SPE);	//enable SPI
    2b46:	ad e2       	ldi	r26, 0x2D	; 45
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	ed e2       	ldi	r30, 0x2D	; 45
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 64       	ori	r24, 0x40	; 64
    2b52:	8c 93       	st	X, r24
}/*End of SlaveInit*/
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <SPI_u8Transfer>:


u8 SPI_u8Transfer(u8 Copy_Data)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	0f 92       	push	r0
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_Data;
    2b66:	ef e2       	ldi	r30, 0x2F	; 47
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF));
    2b6e:	ee e2       	ldi	r30, 0x2E	; 46
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	88 23       	and	r24, r24
    2b76:	dc f7       	brge	.-10     	; 0x2b6e <SPI_u8Transfer+0x14>
	return SPDR;
    2b78:	ef e2       	ldi	r30, 0x2F	; 47
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
}
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <SPI_u8Recieve>:

u8 SPI_u8Recieve(u8 Copy_Data)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_Data;
    2b92:	ef e2       	ldi	r30, 0x2F	; 47
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR, SPIF));
    2b9a:	ee e2       	ldi	r30, 0x2E	; 46
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 23       	and	r24, r24
    2ba2:	dc f7       	brge	.-10     	; 0x2b9a <SPI_u8Recieve+0x14>
	return SPDR;
    2ba4:	ef e2       	ldi	r30, 0x2F	; 47
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
}
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <SPI_u8ReadDataISR>:


u8 SPI_u8ReadDataISR(void)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    2bba:	ef e2       	ldi	r30, 0x2F	; 47
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <SPI_SendString>:


void SPI_SendString(const u8 *Str)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <SPI_SendString+0x6>
    2bcc:	0f 92       	push	r0
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9b 83       	std	Y+3, r25	; 0x03
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    2bd8:	0e c0       	rjmp	.+28     	; 0x2bf6 <SPI_SendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_u8Transfer(Str[i]);
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	9b 81       	ldd	r25, Y+3	; 0x03
    2be4:	fc 01       	movw	r30, r24
    2be6:	e2 0f       	add	r30, r18
    2be8:	f3 1f       	adc	r31, r19
    2bea:	80 81       	ld	r24, Z
    2bec:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <SPI_u8Transfer>
		i++;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	8f 5f       	subi	r24, 0xFF	; 255
    2bf4:	89 83       	std	Y+1, r24	; 0x01


void SPI_SendString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	fc 01       	movw	r30, r24
    2c02:	e2 0f       	add	r30, r18
    2c04:	f3 1f       	adc	r31, r19
    2c06:	80 81       	ld	r24, Z
    2c08:	88 23       	and	r24, r24
    2c0a:	39 f7       	brne	.-50     	; 0x2bda <SPI_SendString+0x14>
	{
		SPI_u8Transfer(Str[i]);
		i++;
	}
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <SPI_ReceiveString>:

void SPI_ReceiveString(u8 *Str)
{
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <SPI_ReceiveString+0xa>
    2c22:	0f 92       	push	r0
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	9b 83       	std	Y+3, r25	; 0x03
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    2c2c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_u8ReadDataISR();
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	9b 81       	ldd	r25, Y+3	; 0x03
    2c38:	8c 01       	movw	r16, r24
    2c3a:	02 0f       	add	r16, r18
    2c3c:	13 1f       	adc	r17, r19
    2c3e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <SPI_u8ReadDataISR>
    2c42:	f8 01       	movw	r30, r16
    2c44:	80 83       	st	Z, r24
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <SPI_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_u8ReadDataISR();
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	8c 01       	movw	r16, r24
    2c5a:	02 0f       	add	r16, r18
    2c5c:	13 1f       	adc	r17, r19
    2c5e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <SPI_u8ReadDataISR>
    2c62:	f8 01       	movw	r30, r16
    2c64:	80 83       	st	Z, r24

void SPI_ReceiveString(u8 *Str)
{
	unsigned char i = 0;
	Str[i] = SPI_u8ReadDataISR();
	while(Str[i] != '#')
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	fc 01       	movw	r30, r24
    2c72:	e2 0f       	add	r30, r18
    2c74:	f3 1f       	adc	r31, r19
    2c76:	80 81       	ld	r24, Z
    2c78:	83 32       	cpi	r24, 0x23	; 35
    2c7a:	31 f7       	brne	.-52     	; 0x2c48 <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_u8ReadDataISR();
	}
	Str[i] = '\0';
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	fc 01       	movw	r30, r24
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	10 82       	st	Z, r1
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <__vector_12>:



void __vector_12 (void) __attribute__ ((signal,used, externally_visible));
void __vector_12 (void)
{
    2c9e:	1f 92       	push	r1
    2ca0:	0f 92       	push	r0
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	0f 92       	push	r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	if(g_SPIResult!=NULLPTR)
    2cc8:	80 91 88 00 	lds	r24, 0x0088
    2ccc:	90 91 89 00 	lds	r25, 0x0089
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	29 f0       	breq	.+10     	; 0x2cde <__vector_12+0x40>
	{
		g_SPIResult();
    2cd4:	e0 91 88 00 	lds	r30, 0x0088
    2cd8:	f0 91 89 00 	lds	r31, 0x0089
    2cdc:	09 95       	icall
	}
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	ff 91       	pop	r31
    2ce4:	ef 91       	pop	r30
    2ce6:	bf 91       	pop	r27
    2ce8:	af 91       	pop	r26
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	7f 91       	pop	r23
    2cf0:	6f 91       	pop	r22
    2cf2:	5f 91       	pop	r21
    2cf4:	4f 91       	pop	r20
    2cf6:	3f 91       	pop	r19
    2cf8:	2f 91       	pop	r18
    2cfa:	0f 90       	pop	r0
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	0f 90       	pop	r0
    2d00:	1f 90       	pop	r1
    2d02:	18 95       	reti

00002d04 <SPI_voidSendDataISR>:


void SPI_voidSendDataISR(u8 Copy_Data)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_Data;
    2d10:	ef e2       	ldi	r30, 0x2F	; 47
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	80 83       	st	Z, r24
}
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <SPI_voidSetCallBack>:

void SPI_voidSetCallBack( void (*PtrToFunc) (void) )
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <SPI_voidSetCallBack+0x6>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	g_SPIResult=PtrToFunc;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	90 93 89 00 	sts	0x0089, r25
    2d36:	80 93 88 00 	sts	0x0088, r24
}
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <UART_init>:

static void(*g_InterrResult)(void)=NULLPTR;


void UART_init( u16 baud )
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <UART_init+0x6>
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
//	u16 UBRR = (F_CPU / (2* baud))-1;
//	u16 UBRR = (((F_CPU / (baud * 8UL))) - 1);
//	UBRRH = (UBRR>>8);
//	UBRRL = UBRR;
	SET_BIT(UCSRC,URSEL);
    2d52:	a0 e4       	ldi	r26, 0x40	; 64
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e0 e4       	ldi	r30, 0x40	; 64
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 68       	ori	r24, 0x80	; 128
    2d5e:	8c 93       	st	X, r24
	UBRRL=51;
    2d60:	e9 e2       	ldi	r30, 0x29	; 41
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	83 e3       	ldi	r24, 0x33	; 51
    2d66:	80 83       	st	Z, r24

	CLR_BIT(UCSRC,URSEL);
    2d68:	a0 e4       	ldi	r26, 0x40	; 64
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e0 e4       	ldi	r30, 0x40	; 64
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	8f 77       	andi	r24, 0x7F	; 127
    2d74:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UCSZ0);
		SET_BIT(UCSRC, UCSZ1);
		CLR_BIT(UCSRB, UCSZ2);
		break;
	case 3:
		SET_BIT(UCSRC, UCSZ0);
    2d76:	a0 e4       	ldi	r26, 0x40	; 64
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e0 e4       	ldi	r30, 0x40	; 64
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	82 60       	ori	r24, 0x02	; 2
    2d82:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    2d84:	a0 e4       	ldi	r26, 0x40	; 64
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e0 e4       	ldi	r30, 0x40	; 64
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	84 60       	ori	r24, 0x04	; 4
    2d90:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UCSZ2);
    2d92:	aa e2       	ldi	r26, 0x2A	; 42
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	ea e2       	ldi	r30, 0x2A	; 42
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8b 7f       	andi	r24, 0xFB	; 251
    2d9e:	8c 93       	st	X, r24
			SET_BIT(UCSRA, U2X);
			break;
		}
		break;
		case 1:
			SET_BIT(UCSRC, UMSEL);
    2da0:	a0 e4       	ldi	r26, 0x40	; 64
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e0 e4       	ldi	r30, 0x40	; 64
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	80 64       	ori	r24, 0x40	; 64
    2dac:	8c 93       	st	X, r24
			if(READ_BIT(UCSRB,TXEN)==1)
    2dae:	ea e2       	ldi	r30, 0x2A	; 42
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	86 95       	lsr	r24
    2db6:	86 95       	lsr	r24
    2db8:	86 95       	lsr	r24
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	81 70       	andi	r24, 0x01	; 1
    2dc0:	90 70       	andi	r25, 0x00	; 0
    2dc2:	88 23       	and	r24, r24
    2dc4:	39 f0       	breq	.+14     	; 0x2dd4 <UART_init+0x90>
			{
				switch(CLOCK_POLARITY)
				{
				case 0:
					CLR_BIT(UCSRC, UCPOL);
    2dc6:	a0 e4       	ldi	r26, 0x40	; 64
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e0 e4       	ldi	r30, 0x40	; 64
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	8e 7f       	andi	r24, 0xFE	; 254
    2dd2:	8c 93       	st	X, r24
				case 1:
					SET_BIT(UCSRC, UCPOL);
					break;
				}
			}
			if(READ_BIT(UCSRB,RXEN)==1)
    2dd4:	ea e2       	ldi	r30, 0x2A	; 42
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	82 95       	swap	r24
    2ddc:	8f 70       	andi	r24, 0x0F	; 15
    2dde:	88 2f       	mov	r24, r24
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	81 70       	andi	r24, 0x01	; 1
    2de4:	90 70       	andi	r25, 0x00	; 0
    2de6:	88 23       	and	r24, r24
    2de8:	39 f0       	breq	.+14     	; 0x2df8 <UART_init+0xb4>
			{
				switch(CLOCK_POLARITY)
				{
				case 0:
					CLR_BIT(UCSRC, UCPOL);
    2dea:	a0 e4       	ldi	r26, 0x40	; 64
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e0 e4       	ldi	r30, 0x40	; 64
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	8e 7f       	andi	r24, 0xFE	; 254
    2df6:	8c 93       	st	X, r24
	}

	switch(PARITY_MODE)
	{
	case 0:
		CLR_BIT(UCSRC, UPM0);
    2df8:	a0 e4       	ldi	r26, 0x40	; 64
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e0 e4       	ldi	r30, 0x40	; 64
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 7e       	andi	r24, 0xEF	; 239
    2e04:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UPM1);
    2e06:	a0 e4       	ldi	r26, 0x40	; 64
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e0 e4       	ldi	r30, 0x40	; 64
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 7d       	andi	r24, 0xDF	; 223
    2e12:	8c 93       	st	X, r24
	}

	switch(STOP_BIT_SELECT)
		{
		case 0:
			CLR_BIT(UCSRC, USBS);
    2e14:	a0 e4       	ldi	r26, 0x40	; 64
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e0 e4       	ldi	r30, 0x40	; 64
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	87 7f       	andi	r24, 0xF7	; 247
    2e20:	8c 93       	st	X, r24
		case 1:
			SET_BIT(UCSRC, USBS);
			break;
		}

}/*end of uart_init*/
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <UART_RX_ENABLE>:


void UART_RX_ENABLE(void)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB, RXEN);
    2e34:	aa e2       	ldi	r26, 0x2A	; 42
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ea e2       	ldi	r30, 0x2A	; 42
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	80 61       	ori	r24, 0x10	; 16
    2e40:	8c 93       	st	X, r24

}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <UART_RX_DISABLE>:
void UART_RX_DISABLE(void)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB, RXEN);
    2e50:	aa e2       	ldi	r26, 0x2A	; 42
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ea e2       	ldi	r30, 0x2A	; 42
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	8f 7e       	andi	r24, 0xEF	; 239
    2e5c:	8c 93       	st	X, r24

}
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <UART_TX_ENABLE>:
void UART_TX_ENABLE(void)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB, TXEN);
    2e6c:	aa e2       	ldi	r26, 0x2A	; 42
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	ea e2       	ldi	r30, 0x2A	; 42
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 60       	ori	r24, 0x08	; 8
    2e78:	8c 93       	st	X, r24

}
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <UART_TX_DISABLE>:
void UART_TX_DISABLE(void)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB, TXEN);
    2e88:	aa e2       	ldi	r26, 0x2A	; 42
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ea e2       	ldi	r30, 0x2A	; 42
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	87 7f       	andi	r24, 0xF7	; 247
    2e94:	8c 93       	st	X, r24

}
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <USART_Transmit>:


void USART_Transmit( u8 data )
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2ea8:	ec e2       	ldi	r30, 0x2C	; 44
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));
    2eb0:	eb e2       	ldi	r30, 0x2B	; 43
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	80 74       	andi	r24, 0x40	; 64
    2ebc:	90 70       	andi	r25, 0x00	; 0
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	b9 f3       	breq	.-18     	; 0x2eb0 <USART_Transmit+0x14>
	//SET_BIT(UCSRA,TXC);	//this line used when Asynchrounous not synch.
}
    2ec2:	0f 90       	pop	r0
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <USART_Receive>:
u8 USART_Receive( )
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); //this line not used because we use interrupt
    2ed2:	eb e2       	ldi	r30, 0x2B	; 43
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	88 23       	and	r24, r24
    2eda:	dc f7       	brge	.-10     	; 0x2ed2 <USART_Receive+0x8>
	return UDR;
    2edc:	ec e2       	ldi	r30, 0x2C	; 44
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
}
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <UART_String_Transmit>:
void UART_String_Transmit( u8* data )
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <UART_String_Transmit+0x6>
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	0a c0       	rjmp	.+20     	; 0x2f0c <UART_String_Transmit+0x24>
	while( data != '\0')
	{
		USART_Transmit(*data);
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	80 81       	ld	r24, Z
    2efe:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <USART_Transmit>
		data++;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,RXC)); //this line not used because we use interrupt
	return UDR;
}
void UART_String_Transmit( u8* data )
{
	while( data != '\0')
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	91 f7       	brne	.-28     	; 0x2ef8 <UART_String_Transmit+0x10>
	{
		USART_Transmit(*data);
		data++;
	}
}
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <UART_receiveString>:

void UART_receiveString(u8 *Str)
{
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <UART_receiveString+0xa>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	9b 83       	std	Y+3, r25	; 0x03
    2f30:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2f32:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = USART_Receive();
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	8c 01       	movw	r16, r24
    2f40:	02 0f       	add	r16, r18
    2f42:	13 1f       	adc	r17, r19
    2f44:	0e 94 65 17 	call	0x2eca	; 0x2eca <USART_Receive>
    2f48:	f8 01       	movw	r30, r16
    2f4a:	80 83       	st	Z, r24
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_Receive();
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5e:	8c 01       	movw	r16, r24
    2f60:	02 0f       	add	r16, r18
    2f62:	13 1f       	adc	r17, r19
    2f64:	0e 94 65 17 	call	0x2eca	; 0x2eca <USART_Receive>
    2f68:	f8 01       	movw	r30, r16
    2f6a:	80 83       	st	Z, r24

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
	Str[i] = USART_Receive();
	while(Str[i] != '#')
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	fc 01       	movw	r30, r24
    2f78:	e2 0f       	add	r30, r18
    2f7a:	f3 1f       	adc	r31, r19
    2f7c:	80 81       	ld	r24, Z
    2f7e:	83 32       	cpi	r24, 0x23	; 35
    2f80:	31 f7       	brne	.-52     	; 0x2f4e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = USART_Receive();
	}
	Str[i] = '\0';
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e2 0f       	add	r30, r18
    2f90:	f3 1f       	adc	r31, r19
    2f92:	10 82       	st	Z, r1
}
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	08 95       	ret

00002fa4 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <KeyPad_getPressedKey+0x6>
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2fae:	1a 82       	std	Y+2, r1	; 0x02
    2fb0:	4c c0       	rjmp	.+152    	; 0x304a <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    2fb2:	ea e3       	ldi	r30, 0x3A	; 58
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	80 e1       	ldi	r24, 0x10	; 16
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <KeyPad_getPressedKey+0x22>
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	2a 95       	dec	r18
    2fc8:	e2 f7       	brpl	.-8      	; 0x2fc2 <KeyPad_getPressedKey+0x1e>
    2fca:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2fcc:	eb e3       	ldi	r30, 0x3B	; 59
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	80 e1       	ldi	r24, 0x10	; 16
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	02 2e       	mov	r0, r18
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <KeyPad_getPressedKey+0x3e>
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	0a 94       	dec	r0
    2fe4:	e2 f7       	brpl	.-8      	; 0x2fde <KeyPad_getPressedKey+0x3a>
    2fe6:	80 95       	com	r24
    2fe8:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2fea:	19 82       	std	Y+1, r1	; 0x01
    2fec:	28 c0       	rjmp	.+80     	; 0x303e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    2fee:	e9 e3       	ldi	r30, 0x39	; 57
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	a9 01       	movw	r20, r18
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <KeyPad_getPressedKey+0x62>
    3002:	55 95       	asr	r21
    3004:	47 95       	ror	r20
    3006:	8a 95       	dec	r24
    3008:	e2 f7       	brpl	.-8      	; 0x3002 <KeyPad_getPressedKey+0x5e>
    300a:	ca 01       	movw	r24, r20
    300c:	81 70       	andi	r24, 0x01	; 1
    300e:	90 70       	andi	r25, 0x00	; 0
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	91 f4       	brne	.+36     	; 0x3038 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	98 2f       	mov	r25, r24
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	89 0f       	add	r24, r25
    3028:	8f 5f       	subi	r24, 0xFF	; 255
    302a:	0e 94 2a 18 	call	0x3054	; 0x3054 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	84 30       	cpi	r24, 0x04	; 4
    3042:	a8 f2       	brcs	.-86     	; 0x2fee <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    3044:	8a 81       	ldd	r24, Y+2	; 0x02
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	8a 83       	std	Y+2, r24	; 0x02
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	84 30       	cpi	r24, 0x04	; 4
    304e:	08 f4       	brcc	.+2      	; 0x3052 <KeyPad_getPressedKey+0xae>
    3050:	b0 cf       	rjmp	.-160    	; 0x2fb2 <KeyPad_getPressedKey+0xe>
    3052:	ad cf       	rjmp	.-166    	; 0x2fae <KeyPad_getPressedKey+0xa>

00003054 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	00 d0       	rcall	.+0      	; 0x305a <KeyPad_4x4_adjustKeyNumber+0x6>
    305a:	00 d0       	rcall	.+0      	; 0x305c <KeyPad_4x4_adjustKeyNumber+0x8>
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	3c 83       	std	Y+4, r19	; 0x04
    306a:	2b 83       	std	Y+3, r18	; 0x03
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	88 30       	cpi	r24, 0x08	; 8
    3072:	91 05       	cpc	r25, r1
    3074:	09 f4       	brne	.+2      	; 0x3078 <KeyPad_4x4_adjustKeyNumber+0x24>
    3076:	70 c0       	rjmp	.+224    	; 0x3158 <KeyPad_4x4_adjustKeyNumber+0x104>
    3078:	2b 81       	ldd	r18, Y+3	; 0x03
    307a:	3c 81       	ldd	r19, Y+4	; 0x04
    307c:	29 30       	cpi	r18, 0x09	; 9
    307e:	31 05       	cpc	r19, r1
    3080:	5c f5       	brge	.+86     	; 0x30d8 <KeyPad_4x4_adjustKeyNumber+0x84>
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	9c 81       	ldd	r25, Y+4	; 0x04
    3086:	84 30       	cpi	r24, 0x04	; 4
    3088:	91 05       	cpc	r25, r1
    308a:	09 f4       	brne	.+2      	; 0x308e <KeyPad_4x4_adjustKeyNumber+0x3a>
    308c:	59 c0       	rjmp	.+178    	; 0x3140 <KeyPad_4x4_adjustKeyNumber+0xec>
    308e:	2b 81       	ldd	r18, Y+3	; 0x03
    3090:	3c 81       	ldd	r19, Y+4	; 0x04
    3092:	25 30       	cpi	r18, 0x05	; 5
    3094:	31 05       	cpc	r19, r1
    3096:	9c f4       	brge	.+38     	; 0x30be <KeyPad_4x4_adjustKeyNumber+0x6a>
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	82 30       	cpi	r24, 0x02	; 2
    309e:	91 05       	cpc	r25, r1
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <KeyPad_4x4_adjustKeyNumber+0x50>
    30a2:	48 c0       	rjmp	.+144    	; 0x3134 <KeyPad_4x4_adjustKeyNumber+0xe0>
    30a4:	2b 81       	ldd	r18, Y+3	; 0x03
    30a6:	3c 81       	ldd	r19, Y+4	; 0x04
    30a8:	23 30       	cpi	r18, 0x03	; 3
    30aa:	31 05       	cpc	r19, r1
    30ac:	0c f0       	brlt	.+2      	; 0x30b0 <KeyPad_4x4_adjustKeyNumber+0x5c>
    30ae:	45 c0       	rjmp	.+138    	; 0x313a <KeyPad_4x4_adjustKeyNumber+0xe6>
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	91 05       	cpc	r25, r1
    30b8:	09 f4       	brne	.+2      	; 0x30bc <KeyPad_4x4_adjustKeyNumber+0x68>
    30ba:	39 c0       	rjmp	.+114    	; 0x312e <KeyPad_4x4_adjustKeyNumber+0xda>
    30bc:	67 c0       	rjmp	.+206    	; 0x318c <KeyPad_4x4_adjustKeyNumber+0x138>
    30be:	2b 81       	ldd	r18, Y+3	; 0x03
    30c0:	3c 81       	ldd	r19, Y+4	; 0x04
    30c2:	26 30       	cpi	r18, 0x06	; 6
    30c4:	31 05       	cpc	r19, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <KeyPad_4x4_adjustKeyNumber+0x76>
    30c8:	41 c0       	rjmp	.+130    	; 0x314c <KeyPad_4x4_adjustKeyNumber+0xf8>
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	87 30       	cpi	r24, 0x07	; 7
    30d0:	91 05       	cpc	r25, r1
    30d2:	0c f0       	brlt	.+2      	; 0x30d6 <KeyPad_4x4_adjustKeyNumber+0x82>
    30d4:	3e c0       	rjmp	.+124    	; 0x3152 <KeyPad_4x4_adjustKeyNumber+0xfe>
    30d6:	37 c0       	rjmp	.+110    	; 0x3146 <KeyPad_4x4_adjustKeyNumber+0xf2>
    30d8:	2b 81       	ldd	r18, Y+3	; 0x03
    30da:	3c 81       	ldd	r19, Y+4	; 0x04
    30dc:	2c 30       	cpi	r18, 0x0C	; 12
    30de:	31 05       	cpc	r19, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <KeyPad_4x4_adjustKeyNumber+0x90>
    30e2:	46 c0       	rjmp	.+140    	; 0x3170 <KeyPad_4x4_adjustKeyNumber+0x11c>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	9c 81       	ldd	r25, Y+4	; 0x04
    30e8:	8d 30       	cpi	r24, 0x0D	; 13
    30ea:	91 05       	cpc	r25, r1
    30ec:	5c f4       	brge	.+22     	; 0x3104 <KeyPad_4x4_adjustKeyNumber+0xb0>
    30ee:	2b 81       	ldd	r18, Y+3	; 0x03
    30f0:	3c 81       	ldd	r19, Y+4	; 0x04
    30f2:	2a 30       	cpi	r18, 0x0A	; 10
    30f4:	31 05       	cpc	r19, r1
    30f6:	b1 f1       	breq	.+108    	; 0x3164 <KeyPad_4x4_adjustKeyNumber+0x110>
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	8b 30       	cpi	r24, 0x0B	; 11
    30fe:	91 05       	cpc	r25, r1
    3100:	a4 f5       	brge	.+104    	; 0x316a <KeyPad_4x4_adjustKeyNumber+0x116>
    3102:	2d c0       	rjmp	.+90     	; 0x315e <KeyPad_4x4_adjustKeyNumber+0x10a>
    3104:	2b 81       	ldd	r18, Y+3	; 0x03
    3106:	3c 81       	ldd	r19, Y+4	; 0x04
    3108:	2e 30       	cpi	r18, 0x0E	; 14
    310a:	31 05       	cpc	r19, r1
    310c:	b9 f1       	breq	.+110    	; 0x317c <KeyPad_4x4_adjustKeyNumber+0x128>
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	8e 30       	cpi	r24, 0x0E	; 14
    3114:	91 05       	cpc	r25, r1
    3116:	7c f1       	brlt	.+94     	; 0x3176 <KeyPad_4x4_adjustKeyNumber+0x122>
    3118:	2b 81       	ldd	r18, Y+3	; 0x03
    311a:	3c 81       	ldd	r19, Y+4	; 0x04
    311c:	2f 30       	cpi	r18, 0x0F	; 15
    311e:	31 05       	cpc	r19, r1
    3120:	79 f1       	breq	.+94     	; 0x3180 <KeyPad_4x4_adjustKeyNumber+0x12c>
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	80 31       	cpi	r24, 0x10	; 16
    3128:	91 05       	cpc	r25, r1
    312a:	69 f1       	breq	.+90     	; 0x3186 <KeyPad_4x4_adjustKeyNumber+0x132>
    312c:	2f c0       	rjmp	.+94     	; 0x318c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    312e:	97 e0       	ldi	r25, 0x07	; 7
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	2e c0       	rjmp	.+92     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    3134:	28 e0       	ldi	r18, 0x08	; 8
    3136:	2a 83       	std	Y+2, r18	; 0x02
    3138:	2b c0       	rjmp	.+86     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    313a:	39 e0       	ldi	r19, 0x09	; 9
    313c:	3a 83       	std	Y+2, r19	; 0x02
    313e:	28 c0       	rjmp	.+80     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    3140:	85 e2       	ldi	r24, 0x25	; 37
    3142:	8a 83       	std	Y+2, r24	; 0x02
    3144:	25 c0       	rjmp	.+74     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    3146:	94 e0       	ldi	r25, 0x04	; 4
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	22 c0       	rjmp	.+68     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    314c:	25 e0       	ldi	r18, 0x05	; 5
    314e:	2a 83       	std	Y+2, r18	; 0x02
    3150:	1f c0       	rjmp	.+62     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    3152:	36 e0       	ldi	r19, 0x06	; 6
    3154:	3a 83       	std	Y+2, r19	; 0x02
    3156:	1c c0       	rjmp	.+56     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    3158:	8a e2       	ldi	r24, 0x2A	; 42
    315a:	8a 83       	std	Y+2, r24	; 0x02
    315c:	19 c0       	rjmp	.+50     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	9a 83       	std	Y+2, r25	; 0x02
    3162:	16 c0       	rjmp	.+44     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    3164:	22 e0       	ldi	r18, 0x02	; 2
    3166:	2a 83       	std	Y+2, r18	; 0x02
    3168:	13 c0       	rjmp	.+38     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    316a:	33 e0       	ldi	r19, 0x03	; 3
    316c:	3a 83       	std	Y+2, r19	; 0x02
    316e:	10 c0       	rjmp	.+32     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    3170:	8d e2       	ldi	r24, 0x2D	; 45
    3172:	8a 83       	std	Y+2, r24	; 0x02
    3174:	0d c0       	rjmp	.+26     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    3176:	9d e0       	ldi	r25, 0x0D	; 13
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	0a c0       	rjmp	.+20     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    317c:	1a 82       	std	Y+2, r1	; 0x02
    317e:	08 c0       	rjmp	.+16     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    3180:	2d e3       	ldi	r18, 0x3D	; 61
    3182:	2a 83       	std	Y+2, r18	; 0x02
    3184:	05 c0       	rjmp	.+10     	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    3186:	3b e2       	ldi	r19, 0x2B	; 43
    3188:	3a 83       	std	Y+2, r19	; 0x02
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	8a 83       	std	Y+2, r24	; 0x02
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	08 95       	ret

000031a0 <__udivmodhi4>:
    31a0:	aa 1b       	sub	r26, r26
    31a2:	bb 1b       	sub	r27, r27
    31a4:	51 e1       	ldi	r21, 0x11	; 17
    31a6:	07 c0       	rjmp	.+14     	; 0x31b6 <__udivmodhi4_ep>

000031a8 <__udivmodhi4_loop>:
    31a8:	aa 1f       	adc	r26, r26
    31aa:	bb 1f       	adc	r27, r27
    31ac:	a6 17       	cp	r26, r22
    31ae:	b7 07       	cpc	r27, r23
    31b0:	10 f0       	brcs	.+4      	; 0x31b6 <__udivmodhi4_ep>
    31b2:	a6 1b       	sub	r26, r22
    31b4:	b7 0b       	sbc	r27, r23

000031b6 <__udivmodhi4_ep>:
    31b6:	88 1f       	adc	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	5a 95       	dec	r21
    31bc:	a9 f7       	brne	.-22     	; 0x31a8 <__udivmodhi4_loop>
    31be:	80 95       	com	r24
    31c0:	90 95       	com	r25
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	08 95       	ret

000031c8 <__divmodsi4>:
    31c8:	97 fb       	bst	r25, 7
    31ca:	09 2e       	mov	r0, r25
    31cc:	05 26       	eor	r0, r21
    31ce:	0e d0       	rcall	.+28     	; 0x31ec <__divmodsi4_neg1>
    31d0:	57 fd       	sbrc	r21, 7
    31d2:	04 d0       	rcall	.+8      	; 0x31dc <__divmodsi4_neg2>
    31d4:	14 d0       	rcall	.+40     	; 0x31fe <__udivmodsi4>
    31d6:	0a d0       	rcall	.+20     	; 0x31ec <__divmodsi4_neg1>
    31d8:	00 1c       	adc	r0, r0
    31da:	38 f4       	brcc	.+14     	; 0x31ea <__divmodsi4_exit>

000031dc <__divmodsi4_neg2>:
    31dc:	50 95       	com	r21
    31de:	40 95       	com	r20
    31e0:	30 95       	com	r19
    31e2:	21 95       	neg	r18
    31e4:	3f 4f       	sbci	r19, 0xFF	; 255
    31e6:	4f 4f       	sbci	r20, 0xFF	; 255
    31e8:	5f 4f       	sbci	r21, 0xFF	; 255

000031ea <__divmodsi4_exit>:
    31ea:	08 95       	ret

000031ec <__divmodsi4_neg1>:
    31ec:	f6 f7       	brtc	.-4      	; 0x31ea <__divmodsi4_exit>
    31ee:	90 95       	com	r25
    31f0:	80 95       	com	r24
    31f2:	70 95       	com	r23
    31f4:	61 95       	neg	r22
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255
    31f8:	8f 4f       	sbci	r24, 0xFF	; 255
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	08 95       	ret

000031fe <__udivmodsi4>:
    31fe:	a1 e2       	ldi	r26, 0x21	; 33
    3200:	1a 2e       	mov	r1, r26
    3202:	aa 1b       	sub	r26, r26
    3204:	bb 1b       	sub	r27, r27
    3206:	fd 01       	movw	r30, r26
    3208:	0d c0       	rjmp	.+26     	; 0x3224 <__udivmodsi4_ep>

0000320a <__udivmodsi4_loop>:
    320a:	aa 1f       	adc	r26, r26
    320c:	bb 1f       	adc	r27, r27
    320e:	ee 1f       	adc	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	a2 17       	cp	r26, r18
    3214:	b3 07       	cpc	r27, r19
    3216:	e4 07       	cpc	r30, r20
    3218:	f5 07       	cpc	r31, r21
    321a:	20 f0       	brcs	.+8      	; 0x3224 <__udivmodsi4_ep>
    321c:	a2 1b       	sub	r26, r18
    321e:	b3 0b       	sbc	r27, r19
    3220:	e4 0b       	sbc	r30, r20
    3222:	f5 0b       	sbc	r31, r21

00003224 <__udivmodsi4_ep>:
    3224:	66 1f       	adc	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	1a 94       	dec	r1
    322e:	69 f7       	brne	.-38     	; 0x320a <__udivmodsi4_loop>
    3230:	60 95       	com	r22
    3232:	70 95       	com	r23
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	bd 01       	movw	r22, r26
    323e:	cf 01       	movw	r24, r30
    3240:	08 95       	ret

00003242 <__prologue_saves__>:
    3242:	2f 92       	push	r2
    3244:	3f 92       	push	r3
    3246:	4f 92       	push	r4
    3248:	5f 92       	push	r5
    324a:	6f 92       	push	r6
    324c:	7f 92       	push	r7
    324e:	8f 92       	push	r8
    3250:	9f 92       	push	r9
    3252:	af 92       	push	r10
    3254:	bf 92       	push	r11
    3256:	cf 92       	push	r12
    3258:	df 92       	push	r13
    325a:	ef 92       	push	r14
    325c:	ff 92       	push	r15
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	ca 1b       	sub	r28, r26
    326c:	db 0b       	sbc	r29, r27
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	09 94       	ijmp

0000327a <__epilogue_restores__>:
    327a:	2a 88       	ldd	r2, Y+18	; 0x12
    327c:	39 88       	ldd	r3, Y+17	; 0x11
    327e:	48 88       	ldd	r4, Y+16	; 0x10
    3280:	5f 84       	ldd	r5, Y+15	; 0x0f
    3282:	6e 84       	ldd	r6, Y+14	; 0x0e
    3284:	7d 84       	ldd	r7, Y+13	; 0x0d
    3286:	8c 84       	ldd	r8, Y+12	; 0x0c
    3288:	9b 84       	ldd	r9, Y+11	; 0x0b
    328a:	aa 84       	ldd	r10, Y+10	; 0x0a
    328c:	b9 84       	ldd	r11, Y+9	; 0x09
    328e:	c8 84       	ldd	r12, Y+8	; 0x08
    3290:	df 80       	ldd	r13, Y+7	; 0x07
    3292:	ee 80       	ldd	r14, Y+6	; 0x06
    3294:	fd 80       	ldd	r15, Y+5	; 0x05
    3296:	0c 81       	ldd	r16, Y+4	; 0x04
    3298:	1b 81       	ldd	r17, Y+3	; 0x03
    329a:	aa 81       	ldd	r26, Y+2	; 0x02
    329c:	b9 81       	ldd	r27, Y+1	; 0x01
    329e:	ce 0f       	add	r28, r30
    32a0:	d1 1d       	adc	r29, r1
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	ed 01       	movw	r28, r26
    32ae:	08 95       	ret

000032b0 <_exit>:
    32b0:	f8 94       	cli

000032b2 <__stop_program>:
    32b2:	ff cf       	rjmp	.-2      	; 0x32b2 <__stop_program>
