
ping_pong_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000045ac  00004640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800108  00800108  000046e8  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  000046e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd4  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a90d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c995  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <main>
      8a:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ec       	ldi	r26, 0xCD	; 205
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ec       	ldi	r24, 0xCD	; 205
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_Init>:
#include "DIO_Private.h"



void DIO_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	e9 52       	subi	r30, 0x29	; 41
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	90 81       	ld	r25, Z
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	69 2f       	mov	r22, r25
     b66:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_InitPin>

void DIO_Init(void)
{
	DIO_Pin_type i;

	for(i=PINA0;i<TOTAL_PINS;i++)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 32       	cpi	r24, 0x20	; 32
     b74:	78 f3       	brcs	.-34     	; 0xb54 <DIO_Init+0xe>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DIO_InitPin>:




void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2c 97       	sbiw	r28, 0x0c	; 12
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	86 95       	lsr	r24
     ba0:	86 95       	lsr	r24
     ba2:	86 95       	lsr	r24
     ba4:	89 83       	std	Y+1, r24	; 0x01

	switch(status)
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3c 87       	std	Y+12, r19	; 0x0c
     bae:	2b 87       	std	Y+11, r18	; 0x0b
     bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <DIO_InitPin+0x3e>
     bba:	c9 c0       	rjmp	.+402    	; 0xd4e <DIO_InitPin+0x1d0>
     bbc:	2b 85       	ldd	r18, Y+11	; 0x0b
     bbe:	3c 85       	ldd	r19, Y+12	; 0x0c
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <DIO_InitPin+0x4a>
     bc6:	85 c1       	rjmp	.+778    	; 0xed2 <DIO_InitPin+0x354>
     bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bca:	9c 85       	ldd	r25, Y+12	; 0x0c
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	09 f0       	breq	.+2      	; 0xbd2 <DIO_InitPin+0x54>
     bd0:	3d c2       	rjmp	.+1146   	; 0x104c <DIO_InitPin+0x4ce>
	{
		case OUTPUT:
		switch(port)
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3a 87       	std	Y+10, r19	; 0x0a
     bda:	29 87       	std	Y+9, r18	; 0x09
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <DIO_InitPin+0x6a>
     be6:	3e c0       	rjmp	.+124    	; 0xc64 <DIO_InitPin+0xe6>
     be8:	29 85       	ldd	r18, Y+9	; 0x09
     bea:	3a 85       	ldd	r19, Y+10	; 0x0a
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	2c f4       	brge	.+10     	; 0xbfc <DIO_InitPin+0x7e>
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	71 f0       	breq	.+28     	; 0xc16 <DIO_InitPin+0x98>
     bfa:	28 c2       	rjmp	.+1104   	; 0x104c <DIO_InitPin+0x4ce>
     bfc:	29 85       	ldd	r18, Y+9	; 0x09
     bfe:	3a 85       	ldd	r19, Y+10	; 0x0a
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <DIO_InitPin+0x8a>
     c06:	55 c0       	rjmp	.+170    	; 0xcb2 <DIO_InitPin+0x134>
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <DIO_InitPin+0x96>
     c12:	76 c0       	rjmp	.+236    	; 0xd00 <DIO_InitPin+0x182>
     c14:	1b c2       	rjmp	.+1078   	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			SET_BIT(DDRA,pin_num);
     c16:	aa e3       	ldi	r26, 0x3A	; 58
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e3       	ldi	r30, 0x3A	; 58
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_InitPin+0xb4>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	2a 95       	dec	r18
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_InitPin+0xb0>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
     c3a:	ab e3       	ldi	r26, 0x3B	; 59
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	eb e3       	ldi	r30, 0x3B	; 59
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_InitPin+0xda>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_InitPin+0xd6>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	f4 c1       	rjmp	.+1000   	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			SET_BIT(DDRB,pin_num);
     c64:	a7 e3       	ldi	r26, 0x37	; 55
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_InitPin+0x102>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	2a 95       	dec	r18
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_InitPin+0xfe>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
     c88:	a8 e3       	ldi	r26, 0x38	; 56
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_InitPin+0x128>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_InitPin+0x124>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	cd c1       	rjmp	.+922    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
     cb2:	a4 e3       	ldi	r26, 0x34	; 52
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_InitPin+0x150>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	2a 95       	dec	r18
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_InitPin+0x14c>
     cd2:	84 2b       	or	r24, r20
     cd4:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
     cd6:	a5 e3       	ldi	r26, 0x35	; 53
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e3       	ldi	r30, 0x35	; 53
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_InitPin+0x176>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_InitPin+0x172>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	a6 c1       	rjmp	.+844    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
     d00:	a1 e3       	ldi	r26, 0x31	; 49
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e1 e3       	ldi	r30, 0x31	; 49
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_InitPin+0x19e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	2a 95       	dec	r18
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_InitPin+0x19a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
     d24:	a2 e3       	ldi	r26, 0x32	; 50
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e2 e3       	ldi	r30, 0x32	; 50
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_InitPin+0x1c4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_InitPin+0x1c0>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	7f c1       	rjmp	.+766    	; 0x104c <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INFREE:
		switch(port)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	38 87       	std	Y+8, r19	; 0x08
     d56:	2f 83       	std	Y+7, r18	; 0x07
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_InitPin+0x1e6>
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <DIO_InitPin+0x264>
     d64:	2f 81       	ldd	r18, Y+7	; 0x07
     d66:	38 85       	ldd	r19, Y+8	; 0x08
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <DIO_InitPin+0x1fa>
     d6e:	8f 81       	ldd	r24, Y+7	; 0x07
     d70:	98 85       	ldd	r25, Y+8	; 0x08
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	71 f0       	breq	.+28     	; 0xd92 <DIO_InitPin+0x214>
     d76:	6a c1       	rjmp	.+724    	; 0x104c <DIO_InitPin+0x4ce>
     d78:	2f 81       	ldd	r18, Y+7	; 0x07
     d7a:	38 85       	ldd	r19, Y+8	; 0x08
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <DIO_InitPin+0x206>
     d82:	57 c0       	rjmp	.+174    	; 0xe32 <DIO_InitPin+0x2b4>
     d84:	8f 81       	ldd	r24, Y+7	; 0x07
     d86:	98 85       	ldd	r25, Y+8	; 0x08
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <DIO_InitPin+0x212>
     d8e:	79 c0       	rjmp	.+242    	; 0xe82 <DIO_InitPin+0x304>
     d90:	5d c1       	rjmp	.+698    	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     d92:	aa e3       	ldi	r26, 0x3A	; 58
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ea e3       	ldi	r30, 0x3A	; 58
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_InitPin+0x230>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	2a 95       	dec	r18
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_InitPin+0x22c>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
     db8:	ab e3       	ldi	r26, 0x3B	; 59
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e3       	ldi	r30, 0x3B	; 59
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_InitPin+0x258>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_InitPin+0x254>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	35 c1       	rjmp	.+618    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_InitPin+0x280>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	2a 95       	dec	r18
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_InitPin+0x27c>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_InitPin+0x2a8>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_InitPin+0x2a4>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	0d c1       	rjmp	.+538    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
     e32:	a4 e3       	ldi	r26, 0x34	; 52
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_InitPin+0x2d0>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	2a 95       	dec	r18
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_InitPin+0x2cc>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
     e58:	a5 e3       	ldi	r26, 0x35	; 53
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e3       	ldi	r30, 0x35	; 53
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_InitPin+0x2f8>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_InitPin+0x2f4>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	e5 c0       	rjmp	.+458    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_InitPin+0x320>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	2a 95       	dec	r18
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_InitPin+0x31c>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
     ea8:	a2 e3       	ldi	r26, 0x32	; 50
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e2 e3       	ldi	r30, 0x32	; 50
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_InitPin+0x348>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_InitPin+0x344>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	bd c0       	rjmp	.+378    	; 0x104c <DIO_InitPin+0x4ce>
			break;

		}
		break;
		case INPULL:
		switch(port)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3e 83       	std	Y+6, r19	; 0x06
     eda:	2d 83       	std	Y+5, r18	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <DIO_InitPin+0x36a>
     ee6:	3e c0       	rjmp	.+124    	; 0xf64 <DIO_InitPin+0x3e6>
     ee8:	2d 81       	ldd	r18, Y+5	; 0x05
     eea:	3e 81       	ldd	r19, Y+6	; 0x06
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	2c f4       	brge	.+10     	; 0xefc <DIO_InitPin+0x37e>
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	71 f0       	breq	.+28     	; 0xf16 <DIO_InitPin+0x398>
     efa:	a8 c0       	rjmp	.+336    	; 0x104c <DIO_InitPin+0x4ce>
     efc:	2d 81       	ldd	r18, Y+5	; 0x05
     efe:	3e 81       	ldd	r19, Y+6	; 0x06
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_InitPin+0x38a>
     f06:	55 c0       	rjmp	.+170    	; 0xfb2 <DIO_InitPin+0x434>
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <DIO_InitPin+0x396>
     f12:	76 c0       	rjmp	.+236    	; 0x1000 <DIO_InitPin+0x482>
     f14:	9b c0       	rjmp	.+310    	; 0x104c <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_InitPin+0x3b4>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_InitPin+0x3b0>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin_num);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_InitPin+0x3dc>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_InitPin+0x3d8>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	74 c0       	rjmp	.+232    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
     f64:	a7 e3       	ldi	r26, 0x37	; 55
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e3       	ldi	r30, 0x37	; 55
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_InitPin+0x402>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_InitPin+0x3fe>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
     f8a:	a8 e3       	ldi	r26, 0x38	; 56
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e3       	ldi	r30, 0x38	; 56
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_InitPin+0x42a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_InitPin+0x426>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	4d c0       	rjmp	.+154    	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_InitPin+0x450>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_InitPin+0x44c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
     fd8:	a5 e3       	ldi	r26, 0x35	; 53
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_InitPin+0x478>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_InitPin+0x474>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	26 c0       	rjmp	.+76     	; 0x104c <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1000:	a1 e3       	ldi	r26, 0x31	; 49
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e1 e3       	ldi	r30, 0x31	; 49
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_InitPin+0x49e>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_InitPin+0x49a>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_InitPin+0x4c6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_InitPin+0x4c2>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24

		}
		break;

	}
}
    104c:	2c 96       	adiw	r28, 0x0c	; 12
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	28 97       	sbiw	r28, 0x08	; 8
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin_num = pin%8;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	87 70       	andi	r24, 0x07	; 7
    107a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	86 95       	lsr	r24
    1080:	86 95       	lsr	r24
    1082:	86 95       	lsr	r24
    1084:	89 83       	std	Y+1, r24	; 0x01

	if(volt==HIGH)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	09 f0       	breq	.+2      	; 0x108e <DIO_WritePin+0x30>
    108c:	6f c0       	rjmp	.+222    	; 0x116c <DIO_WritePin+0x10e>
	{
		switch(port)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	49 f1       	breq	.+82     	; 0x10f4 <DIO_WritePin+0x96>
    10a2:	2f 81       	ldd	r18, Y+7	; 0x07
    10a4:	38 85       	ldd	r19, Y+8	; 0x08
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <DIO_WritePin+0x58>
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	61 f0       	breq	.+24     	; 0x10cc <DIO_WritePin+0x6e>
    10b4:	ce c0       	rjmp	.+412    	; 0x1252 <DIO_WritePin+0x1f4>
    10b6:	2f 81       	ldd	r18, Y+7	; 0x07
    10b8:	38 85       	ldd	r19, Y+8	; 0x08
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	71 f1       	breq	.+92     	; 0x111c <DIO_WritePin+0xbe>
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	e9 f1       	breq	.+122    	; 0x1144 <DIO_WritePin+0xe6>
    10ca:	c3 c0       	rjmp	.+390    	; 0x1252 <DIO_WritePin+0x1f4>
		{
			case PA:

			SET_BIT(PORTA,pin_num);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_WritePin+0x8c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_WritePin+0x88>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	af c0       	rjmp	.+350    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PB:

			SET_BIT(PORTB,pin_num);
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_WritePin+0xb4>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_WritePin+0xb0>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	9b c0       	rjmp	.+310    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PC:

			SET_BIT(PORTC,pin_num);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_WritePin+0xdc>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_WritePin+0xd8>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	87 c0       	rjmp	.+270    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PD:

			SET_BIT(PORTD,pin_num);
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_WritePin+0x104>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_WritePin+0x100>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	73 c0       	rjmp	.+230    	; 0x1252 <DIO_WritePin+0x1f4>

		}
	}
	else
	{
		switch(port)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3e 83       	std	Y+6, r19	; 0x06
    1174:	2d 83       	std	Y+5, r18	; 0x05
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	59 f1       	breq	.+86     	; 0x11d6 <DIO_WritePin+0x178>
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_WritePin+0x136>
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f0       	breq	.+26     	; 0x11ac <DIO_WritePin+0x14e>
    1192:	5f c0       	rjmp	.+190    	; 0x1252 <DIO_WritePin+0x1f4>
    1194:	2d 81       	ldd	r18, Y+5	; 0x05
    1196:	3e 81       	ldd	r19, Y+6	; 0x06
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	89 f1       	breq	.+98     	; 0x1200 <DIO_WritePin+0x1a2>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_WritePin+0x14c>
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <DIO_WritePin+0x1cc>
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <DIO_WritePin+0x1f4>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_WritePin+0x16c>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_WritePin+0x168>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	3e c0       	rjmp	.+124    	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PB:
			CLR_BIT(PORTB,pin_num);
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_WritePin+0x196>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_WritePin+0x192>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	29 c0       	rjmp	.+82     	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_WritePin+0x1c0>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_WritePin+0x1bc>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <DIO_WritePin+0x1f4>
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_WritePin+0x1ea>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_WritePin+0x1e6>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
			break;

		}
	}
}
    1252:	28 96       	adiw	r28, 0x08	; 8
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <DIO_ReadPin>:


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <DIO_ReadPin+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_ReadPin+0x8>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_ReadPin+0xa>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin_num = pin%8;
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	87 70       	andi	r24, 0x07	; 7
    1278:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port=pin/8;
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    1284:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3e 83       	std	Y+6, r19	; 0x06
    128e:	2d 83       	std	Y+5, r18	; 0x05
    1290:	4d 81       	ldd	r20, Y+5	; 0x05
    1292:	5e 81       	ldd	r21, Y+6	; 0x06
    1294:	41 30       	cpi	r20, 0x01	; 1
    1296:	51 05       	cpc	r21, r1
    1298:	41 f1       	breq	.+80     	; 0x12ea <DIO_ReadPin+0x86>
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	34 f4       	brge	.+12     	; 0x12b0 <DIO_ReadPin+0x4c>
    12a4:	2d 81       	ldd	r18, Y+5	; 0x05
    12a6:	3e 81       	ldd	r19, Y+6	; 0x06
    12a8:	21 15       	cp	r18, r1
    12aa:	31 05       	cpc	r19, r1
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <DIO_ReadPin+0x62>
    12ae:	52 c0       	rjmp	.+164    	; 0x1354 <DIO_ReadPin+0xf0>
    12b0:	4d 81       	ldd	r20, Y+5	; 0x05
    12b2:	5e 81       	ldd	r21, Y+6	; 0x06
    12b4:	42 30       	cpi	r20, 0x02	; 2
    12b6:	51 05       	cpc	r21, r1
    12b8:	51 f1       	breq	.+84     	; 0x130e <DIO_ReadPin+0xaa>
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	b9 f1       	breq	.+110    	; 0x1332 <DIO_ReadPin+0xce>
    12c4:	47 c0       	rjmp	.+142    	; 0x1354 <DIO_ReadPin+0xf0>
	{
		case PA:

		volt=READ_BIT(PINA,pin_num);
    12c6:	e9 e3       	ldi	r30, 0x39	; 57
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_ReadPin+0x7a>
    12da:	55 95       	asr	r21
    12dc:	47 95       	ror	r20
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_ReadPin+0x76>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	35 c0       	rjmp	.+106    	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PB:

		volt=READ_BIT(PINB,pin_num);
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_ReadPin+0x9e>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_ReadPin+0x9a>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	23 c0       	rjmp	.+70     	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PC:

		volt=READ_BIT(PINC,pin_num);
    130e:	e3 e3       	ldi	r30, 0x33	; 51
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a9 01       	movw	r20, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_ReadPin+0xc2>
    1322:	55 95       	asr	r21
    1324:	47 95       	ror	r20
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_ReadPin+0xbe>
    132a:	ca 01       	movw	r24, r20
    132c:	81 70       	andi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	11 c0       	rjmp	.+34     	; 0x1354 <DIO_ReadPin+0xf0>
		break;
		case PD:

		volt=READ_BIT(PIND,pin_num);
    1332:	e0 e3       	ldi	r30, 0x30	; 48
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_ReadPin+0xe6>
    1346:	55 95       	asr	r21
    1348:	47 95       	ror	r20
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_ReadPin+0xe2>
    134e:	ca 01       	movw	r24, r20
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return volt;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_TogglePin+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_TogglePin+0x8>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num = pin%8;
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port=pin/8;
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	86 95       	lsr	r24
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	49 f1       	breq	.+82     	; 0x13ee <DIO_TogglePin+0x86>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_TogglePin+0x48>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <DIO_TogglePin+0x5e>
    13ae:	5a c0       	rjmp	.+180    	; 0x1464 <DIO_TogglePin+0xfc>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	71 f1       	breq	.+92     	; 0x1416 <DIO_TogglePin+0xae>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	e9 f1       	breq	.+122    	; 0x143e <DIO_TogglePin+0xd6>
    13c4:	4f c0       	rjmp	.+158    	; 0x1464 <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_TogglePin+0x7c>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_TogglePin+0x78>
    13e8:	84 27       	eor	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	3b c0       	rjmp	.+118    	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PB:
		TOG_BIT(PORTB,pin_num);
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_TogglePin+0xa4>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_TogglePin+0xa0>
    1410:	84 27       	eor	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	27 c0       	rjmp	.+78     	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PC:
		TOG_BIT(PORTC,pin_num);
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_TogglePin+0xcc>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_TogglePin+0xc8>
    1438:	84 27       	eor	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <DIO_TogglePin+0xfc>
		break;
		case PD:
		TOG_BIT(PORTD,pin_num);
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_TogglePin+0xf4>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_TogglePin+0xf0>
    1460:	84 27       	eor	r24, r20
    1462:	8c 93       	st	X, r24
		break;

	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <DIO_WritePort>:


void DIO_WritePort(DIO_Port_type port, u8 data)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <DIO_WritePort+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <DIO_WritePort+0x8>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	d1 f0       	breq	.+52     	; 0x14cc <DIO_WritePort+0x58>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	2c f4       	brge	.+10     	; 0x14ac <DIO_WritePort+0x38>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <DIO_WritePort+0x4e>
    14aa:	1e c0       	rjmp	.+60     	; 0x14e8 <DIO_WritePort+0x74>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <DIO_WritePort+0x62>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	91 05       	cpc	r25, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <DIO_WritePort+0x6c>
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <DIO_WritePort+0x74>
	{
		case PA:
		PORTA = data;
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB = data;
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC = data;;
    14d6:	e5 e3       	ldi	r30, 0x35	; 53
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD = data;;
    14e0:	e2 e3       	ldi	r30, 0x32	; 50
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
		break;

	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <DIO_ReadPort+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <DIO_ReadPort+0x8>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    1504:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <DIO_ReadPort+0x58>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <DIO_ReadPort+0x38>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <DIO_ReadPort+0x4e>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <DIO_ReadPort+0x74>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <DIO_ReadPort+0x62>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <DIO_ReadPort+0x6c>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <DIO_ReadPort+0x74>
	{
		case PA:
		data = PINA;
    1544:	e9 e3       	ldi	r30, 0x39	; 57
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	0e c0       	rjmp	.+28     	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PB:
		data = PINB;
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	09 c0       	rjmp	.+18     	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PC:
		data = PINC;;
    1558:	e3 e3       	ldi	r30, 0x33	; 51
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	04 c0       	rjmp	.+8      	; 0x156a <DIO_ReadPort+0x74>
		break;
		case PD:
		data = PIND;;
    1562:	e0 e3       	ldi	r30, 0x30	; 48
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return data;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	e9 97       	sbiw	r28, 0x39	; 57
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, LOW);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    1598:	89 ad       	ldd	r24, Y+57	; 0x39
    159a:	98 2f       	mov	r25, r24
    159c:	99 1f       	adc	r25, r25
    159e:	99 27       	eor	r25, r25
    15a0:	99 1f       	adc	r25, r25
    15a2:	8b e0       	ldi	r24, 0x0B	; 11
    15a4:	69 2f       	mov	r22, r25
    15a6:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    15aa:	89 ad       	ldd	r24, Y+57	; 0x39
    15ac:	82 95       	swap	r24
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	83 70       	andi	r24, 0x03	; 3
    15b4:	98 2f       	mov	r25, r24
    15b6:	91 70       	andi	r25, 0x01	; 1
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	69 2f       	mov	r22, r25
    15bc:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    15c0:	89 ad       	ldd	r24, Y+57	; 0x39
    15c2:	82 95       	swap	r24
    15c4:	86 95       	lsr	r24
    15c6:	87 70       	andi	r24, 0x07	; 7
    15c8:	98 2f       	mov	r25, r24
    15ca:	91 70       	andi	r25, 0x01	; 1
    15cc:	89 e0       	ldi	r24, 0x09	; 9
    15ce:	69 2f       	mov	r22, r25
    15d0:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    15d4:	89 ad       	ldd	r24, Y+57	; 0x39
    15d6:	82 95       	swap	r24
    15d8:	8f 70       	andi	r24, 0x0F	; 15
    15da:	98 2f       	mov	r25, r24
    15dc:	91 70       	andi	r25, 0x01	; 1
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	69 2f       	mov	r22, r25
    15e2:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e8       	ldi	r26, 0x80	; 128
    15f4:	bf e3       	ldi	r27, 0x3F	; 63
    15f6:	8d ab       	std	Y+53, r24	; 0x35
    15f8:	9e ab       	std	Y+54, r25	; 0x36
    15fa:	af ab       	std	Y+55, r26	; 0x37
    15fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1600:	7e a9       	ldd	r23, Y+54	; 0x36
    1602:	8f a9       	ldd	r24, Y+55	; 0x37
    1604:	98 ad       	ldd	r25, Y+56	; 0x38
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	89 ab       	std	Y+49, r24	; 0x31
    1618:	9a ab       	std	Y+50, r25	; 0x32
    161a:	ab ab       	std	Y+51, r26	; 0x33
    161c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    161e:	69 a9       	ldd	r22, Y+49	; 0x31
    1620:	7a a9       	ldd	r23, Y+50	; 0x32
    1622:	8b a9       	ldd	r24, Y+51	; 0x33
    1624:	9c a9       	ldd	r25, Y+52	; 0x34
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <WriteIns+0xc6>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	98 ab       	std	Y+48, r25	; 0x30
    163c:	8f a7       	std	Y+47, r24	; 0x2f
    163e:	3f c0       	rjmp	.+126    	; 0x16be <WriteIns+0x144>
	else if (__tmp > 65535)
    1640:	69 a9       	ldd	r22, Y+49	; 0x31
    1642:	7a a9       	ldd	r23, Y+50	; 0x32
    1644:	8b a9       	ldd	r24, Y+51	; 0x33
    1646:	9c a9       	ldd	r25, Y+52	; 0x34
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <WriteIns+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6d a9       	ldd	r22, Y+53	; 0x35
    165a:	7e a9       	ldd	r23, Y+54	; 0x36
    165c:	8f a9       	ldd	r24, Y+55	; 0x37
    165e:	98 ad       	ldd	r25, Y+56	; 0x38
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <WriteIns+0x126>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e a7       	std	Y+46, r25	; 0x2e
    1688:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168a:	8d a5       	ldd	r24, Y+45	; 0x2d
    168c:	9e a5       	ldd	r25, Y+46	; 0x2e
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <WriteIns+0x114>
    1692:	9e a7       	std	Y+46, r25	; 0x2e
    1694:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8f a5       	ldd	r24, Y+47	; 0x2f
    1698:	98 a9       	ldd	r25, Y+48	; 0x30
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	98 ab       	std	Y+48, r25	; 0x30
    169e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a2:	98 a9       	ldd	r25, Y+48	; 0x30
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <WriteIns+0x108>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <WriteIns+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	98 ab       	std	Y+48, r25	; 0x30
    16bc:	8f a7       	std	Y+47, r24	; 0x2f
    16be:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c0:	98 a9       	ldd	r25, Y+48	; 0x30
    16c2:	9c a7       	std	Y+44, r25	; 0x2c
    16c4:	8b a7       	std	Y+43, r24	; 0x2b
    16c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <WriteIns+0x150>
    16ce:	9c a7       	std	Y+44, r25	; 0x2c
    16d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e8       	ldi	r26, 0x80	; 128
    16e0:	bf e3       	ldi	r27, 0x3F	; 63
    16e2:	8f a3       	std	Y+39, r24	; 0x27
    16e4:	98 a7       	std	Y+40, r25	; 0x28
    16e6:	a9 a7       	std	Y+41, r26	; 0x29
    16e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6f a1       	ldd	r22, Y+39	; 0x27
    16ec:	78 a5       	ldd	r23, Y+40	; 0x28
    16ee:	89 a5       	ldd	r24, Y+41	; 0x29
    16f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8b a3       	std	Y+35, r24	; 0x23
    1704:	9c a3       	std	Y+36, r25	; 0x24
    1706:	ad a3       	std	Y+37, r26	; 0x25
    1708:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    170a:	6b a1       	ldd	r22, Y+35	; 0x23
    170c:	7c a1       	ldd	r23, Y+36	; 0x24
    170e:	8d a1       	ldd	r24, Y+37	; 0x25
    1710:	9e a1       	ldd	r25, Y+38	; 0x26
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <WriteIns+0x1b2>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9a a3       	std	Y+34, r25	; 0x22
    1728:	89 a3       	std	Y+33, r24	; 0x21
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <WriteIns+0x230>
	else if (__tmp > 65535)
    172c:	6b a1       	ldd	r22, Y+35	; 0x23
    172e:	7c a1       	ldd	r23, Y+36	; 0x24
    1730:	8d a1       	ldd	r24, Y+37	; 0x25
    1732:	9e a1       	ldd	r25, Y+38	; 0x26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <WriteIns+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6f a1       	ldd	r22, Y+39	; 0x27
    1746:	78 a5       	ldd	r23, Y+40	; 0x28
    1748:	89 a5       	ldd	r24, Y+41	; 0x29
    174a:	9a a5       	ldd	r25, Y+42	; 0x2a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9a a3       	std	Y+34, r25	; 0x22
    176a:	89 a3       	std	Y+33, r24	; 0x21
    176c:	0f c0       	rjmp	.+30     	; 0x178c <WriteIns+0x212>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	98 a3       	std	Y+32, r25	; 0x20
    1774:	8f 8f       	std	Y+31, r24	; 0x1f
    1776:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1778:	98 a1       	ldd	r25, Y+32	; 0x20
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <WriteIns+0x200>
    177e:	98 a3       	std	Y+32, r25	; 0x20
    1780:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	89 a1       	ldd	r24, Y+33	; 0x21
    178e:	9a a1       	ldd	r25, Y+34	; 0x22
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <WriteIns+0x1f4>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <WriteIns+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6b a1       	ldd	r22, Y+35	; 0x23
    1798:	7c a1       	ldd	r23, Y+36	; 0x24
    179a:	8d a1       	ldd	r24, Y+37	; 0x25
    179c:	9e a1       	ldd	r25, Y+38	; 0x26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9a a3       	std	Y+34, r25	; 0x22
    17a8:	89 a3       	std	Y+33, r24	; 0x21
    17aa:	89 a1       	ldd	r24, Y+33	; 0x21
    17ac:	9a a1       	ldd	r25, Y+34	; 0x22
    17ae:	9e 8f       	std	Y+30, r25	; 0x1e
    17b0:	8d 8f       	std	Y+29, r24	; 0x1d
    17b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <WriteIns+0x23c>
    17ba:	9e 8f       	std	Y+30, r25	; 0x1e
    17bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(ins,3));
    17be:	89 ad       	ldd	r24, Y+57	; 0x39
    17c0:	86 95       	lsr	r24
    17c2:	86 95       	lsr	r24
    17c4:	86 95       	lsr	r24
    17c6:	98 2f       	mov	r25, r24
    17c8:	91 70       	andi	r25, 0x01	; 1
    17ca:	8b e0       	ldi	r24, 0x0B	; 11
    17cc:	69 2f       	mov	r22, r25
    17ce:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    17d2:	89 ad       	ldd	r24, Y+57	; 0x39
    17d4:	86 95       	lsr	r24
    17d6:	86 95       	lsr	r24
    17d8:	98 2f       	mov	r25, r24
    17da:	91 70       	andi	r25, 0x01	; 1
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	69 2f       	mov	r22, r25
    17e0:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    17e4:	89 ad       	ldd	r24, Y+57	; 0x39
    17e6:	86 95       	lsr	r24
    17e8:	98 2f       	mov	r25, r24
    17ea:	91 70       	andi	r25, 0x01	; 1
    17ec:	89 e0       	ldi	r24, 0x09	; 9
    17ee:	69 2f       	mov	r22, r25
    17f0:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	98 2f       	mov	r25, r24
    17f8:	91 70       	andi	r25, 0x01	; 1
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	69 2f       	mov	r22, r25
    17fe:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 e8       	ldi	r26, 0x80	; 128
    1810:	bf e3       	ldi	r27, 0x3F	; 63
    1812:	89 8f       	std	Y+25, r24	; 0x19
    1814:	9a 8f       	std	Y+26, r25	; 0x1a
    1816:	ab 8f       	std	Y+27, r26	; 0x1b
    1818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	69 8d       	ldd	r22, Y+25	; 0x19
    181c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a ef       	ldi	r20, 0xFA	; 250
    1828:	54 e4       	ldi	r21, 0x44	; 68
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8d 8b       	std	Y+21, r24	; 0x15
    1834:	9e 8b       	std	Y+22, r25	; 0x16
    1836:	af 8b       	std	Y+23, r26	; 0x17
    1838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <WriteIns+0x2e2>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
    185a:	3f c0       	rjmp	.+126    	; 0x18da <WriteIns+0x360>
	else if (__tmp > 65535)
    185c:	6d 89       	ldd	r22, Y+21	; 0x15
    185e:	7e 89       	ldd	r23, Y+22	; 0x16
    1860:	8f 89       	ldd	r24, Y+23	; 0x17
    1862:	98 8d       	ldd	r25, Y+24	; 0x18
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <WriteIns+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	69 8d       	ldd	r22, Y+25	; 0x19
    1876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <WriteIns+0x342>
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9a 8b       	std	Y+18, r25	; 0x12
    18a4:	89 8b       	std	Y+17, r24	; 0x11
    18a6:	89 89       	ldd	r24, Y+17	; 0x11
    18a8:	9a 89       	ldd	r25, Y+18	; 0x12
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <WriteIns+0x330>
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	8b 89       	ldd	r24, Y+19	; 0x13
    18b4:	9c 89       	ldd	r25, Y+20	; 0x14
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9c 8b       	std	Y+20, r25	; 0x14
    18ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <WriteIns+0x324>
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <WriteIns+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	98 8b       	std	Y+16, r25	; 0x10
    18e0:	8f 87       	std	Y+15, r24	; 0x0f
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	98 89       	ldd	r25, Y+16	; 0x10
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <WriteIns+0x36c>
    18ea:	98 8b       	std	Y+16, r25	; 0x10
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e8       	ldi	r26, 0x80	; 128
    18fc:	bf e3       	ldi	r27, 0x3F	; 63
    18fe:	8b 87       	std	Y+11, r24	; 0x0b
    1900:	9c 87       	std	Y+12, r25	; 0x0c
    1902:	ad 87       	std	Y+13, r26	; 0x0d
    1904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8f 83       	std	Y+7, r24	; 0x07
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	a9 87       	std	Y+9, r26	; 0x09
    1924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <WriteIns+0x3ce>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <WriteIns+0x44c>
	else if (__tmp > 65535)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <WriteIns+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <WriteIns+0x42e>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <WriteIns+0x41c>
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <WriteIns+0x410>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <WriteIns+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <WriteIns+0x458>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    19da:	e9 96       	adiw	r28, 0x39	; 57
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <WriteData>:

void WriteData(u8 data)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	e9 97       	sbiw	r28, 0x39	; 57
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS, HIGH);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
    1a0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	99 27       	eor	r25, r25
    1a12:	99 1f       	adc	r25, r25
    1a14:	8b e0       	ldi	r24, 0x0B	; 11
    1a16:	69 2f       	mov	r22, r25
    1a18:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    1a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a1e:	82 95       	swap	r24
    1a20:	86 95       	lsr	r24
    1a22:	86 95       	lsr	r24
    1a24:	83 70       	andi	r24, 0x03	; 3
    1a26:	98 2f       	mov	r25, r24
    1a28:	91 70       	andi	r25, 0x01	; 1
    1a2a:	8a e0       	ldi	r24, 0x0A	; 10
    1a2c:	69 2f       	mov	r22, r25
    1a2e:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    1a32:	89 ad       	ldd	r24, Y+57	; 0x39
    1a34:	82 95       	swap	r24
    1a36:	86 95       	lsr	r24
    1a38:	87 70       	andi	r24, 0x07	; 7
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	91 70       	andi	r25, 0x01	; 1
    1a3e:	89 e0       	ldi	r24, 0x09	; 9
    1a40:	69 2f       	mov	r22, r25
    1a42:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    1a46:	89 ad       	ldd	r24, Y+57	; 0x39
    1a48:	82 95       	swap	r24
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	91 70       	andi	r25, 0x01	; 1
    1a50:	88 e0       	ldi	r24, 0x08	; 8
    1a52:	69 2f       	mov	r22, r25
    1a54:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e8       	ldi	r26, 0x80	; 128
    1a66:	bf e3       	ldi	r27, 0x3F	; 63
    1a68:	8d ab       	std	Y+53, r24	; 0x35
    1a6a:	9e ab       	std	Y+54, r25	; 0x36
    1a6c:	af ab       	std	Y+55, r26	; 0x37
    1a6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	6d a9       	ldd	r22, Y+53	; 0x35
    1a72:	7e a9       	ldd	r23, Y+54	; 0x36
    1a74:	8f a9       	ldd	r24, Y+55	; 0x37
    1a76:	98 ad       	ldd	r25, Y+56	; 0x38
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	89 ab       	std	Y+49, r24	; 0x31
    1a8a:	9a ab       	std	Y+50, r25	; 0x32
    1a8c:	ab ab       	std	Y+51, r26	; 0x33
    1a8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a90:	69 a9       	ldd	r22, Y+49	; 0x31
    1a92:	7a a9       	ldd	r23, Y+50	; 0x32
    1a94:	8b a9       	ldd	r24, Y+51	; 0x33
    1a96:	9c a9       	ldd	r25, Y+52	; 0x34
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <WriteData+0xc6>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	98 ab       	std	Y+48, r25	; 0x30
    1aae:	8f a7       	std	Y+47, r24	; 0x2f
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <WriteData+0x144>
	else if (__tmp > 65535)
    1ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	6d a9       	ldd	r22, Y+53	; 0x35
    1acc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ace:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <WriteData+0x126>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	8d a7       	std	Y+45, r24	; 0x2d
    1afc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1afe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <WriteData+0x114>
    1b04:	9e a7       	std	Y+46, r25	; 0x2e
    1b06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <WriteData+0x108>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b32:	98 a9       	ldd	r25, Y+48	; 0x30
    1b34:	9c a7       	std	Y+44, r25	; 0x2c
    1b36:	8b a7       	std	Y+43, r24	; 0x2b
    1b38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <WriteData+0x150>
    1b40:	9c a7       	std	Y+44, r25	; 0x2c
    1b42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	8f a3       	std	Y+39, r24	; 0x27
    1b56:	98 a7       	std	Y+40, r25	; 0x28
    1b58:	a9 a7       	std	Y+41, r26	; 0x29
    1b5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b60:	89 a5       	ldd	r24, Y+41	; 0x29
    1b62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8b a3       	std	Y+35, r24	; 0x23
    1b76:	9c a3       	std	Y+36, r25	; 0x24
    1b78:	ad a3       	std	Y+37, r26	; 0x25
    1b7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <WriteData+0x1b2>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <WriteData+0x230>
	else if (__tmp > 65535)
    1b9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bba:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <WriteData+0x212>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	98 a3       	std	Y+32, r25	; 0x20
    1be6:	8f 8f       	std	Y+31, r24	; 0x1f
    1be8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bea:	98 a1       	ldd	r25, Y+32	; 0x20
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <WriteData+0x200>
    1bf0:	98 a3       	std	Y+32, r25	; 0x20
    1bf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9a a3       	std	Y+34, r25	; 0x22
    1bfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <WriteData+0x1f4>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9a a3       	std	Y+34, r25	; 0x22
    1c1a:	89 a3       	std	Y+33, r24	; 0x21
    1c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c20:	9e 8f       	std	Y+30, r25	; 0x1e
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
    1c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <WriteData+0x23c>
    1c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7,READ_BIT(data,3));
    1c30:	89 ad       	ldd	r24, Y+57	; 0x39
    1c32:	86 95       	lsr	r24
    1c34:	86 95       	lsr	r24
    1c36:	86 95       	lsr	r24
    1c38:	98 2f       	mov	r25, r24
    1c3a:	91 70       	andi	r25, 0x01	; 1
    1c3c:	8b e0       	ldi	r24, 0x0B	; 11
    1c3e:	69 2f       	mov	r22, r25
    1c40:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    1c44:	89 ad       	ldd	r24, Y+57	; 0x39
    1c46:	86 95       	lsr	r24
    1c48:	86 95       	lsr	r24
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	91 70       	andi	r25, 0x01	; 1
    1c4e:	8a e0       	ldi	r24, 0x0A	; 10
    1c50:	69 2f       	mov	r22, r25
    1c52:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    1c56:	89 ad       	ldd	r24, Y+57	; 0x39
    1c58:	86 95       	lsr	r24
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	91 70       	andi	r25, 0x01	; 1
    1c5e:	89 e0       	ldi	r24, 0x09	; 9
    1c60:	69 2f       	mov	r22, r25
    1c62:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	98 2f       	mov	r25, r24
    1c6a:	91 70       	andi	r25, 0x01	; 1
    1c6c:	88 e0       	ldi	r24, 0x08	; 8
    1c6e:	69 2f       	mov	r22, r25
    1c70:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>

	DIO_WritePin(E, HIGH);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	89 8f       	std	Y+25, r24	; 0x19
    1c86:	9a 8f       	std	Y+26, r25	; 0x1a
    1c88:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 8b       	std	Y+21, r24	; 0x15
    1ca6:	9e 8b       	std	Y+22, r25	; 0x16
    1ca8:	af 8b       	std	Y+23, r26	; 0x17
    1caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <WriteData+0x2e2>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <WriteData+0x360>
	else if (__tmp > 65535)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <WriteData+0x342>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <WriteData+0x330>
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <WriteData+0x324>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <WriteData+0x36c>
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E, LOW);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <WriteData+0x3ce>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <WriteData+0x44c>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <WriteData+0x42e>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <WriteData+0x41c>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <WriteData+0x410>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <WriteData+0x458>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e4c:	e9 96       	adiw	r28, 0x39	; 57
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_Init>:

void LCD_Init(void)
{
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	c4 55       	subi	r28, 0x54	; 84
    1e6c:	d0 40       	sbci	r29, 0x00	; 0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ef 5a       	subi	r30, 0xAF	; 175
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a8 e4       	ldi	r26, 0x48	; 72
    1e84:	b2 e4       	ldi	r27, 0x42	; 66
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	a2 83       	std	Z+2, r26	; 0x02
    1e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	03 5b       	subi	r16, 0xB3	; 179
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	ef 5a       	subi	r30, 0xAF	; 175
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e3 5b       	subi	r30, 0xB3	; 179
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	44 f4       	brge	.+16     	; 0x1eea <LCD_Init+0x8c>
		__ticks = 1;
    1eda:	fe 01       	movw	r30, r28
    1edc:	e5 5b       	subi	r30, 0xB5	; 181
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	64 c0       	rjmp	.+200    	; 0x1fb2 <LCD_Init+0x154>
	else if (__tmp > 65535)
    1eea:	fe 01       	movw	r30, r28
    1eec:	e3 5b       	subi	r30, 0xB3	; 179
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <LCD_Init+0xac>
    1f08:	43 c0       	rjmp	.+134    	; 0x1f90 <LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ef 5a       	subi	r30, 0xAF	; 175
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8e 01       	movw	r16, r28
    1f2a:	05 5b       	subi	r16, 0xB5	; 181
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	1f c0       	rjmp	.+62     	; 0x1f80 <LCD_Init+0x122>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 5b       	subi	r30, 0xB7	; 183
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	fe 01       	movw	r30, r28
    1f52:	e7 5b       	subi	r30, 0xB7	; 183
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_Init+0xfc>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e7 5b       	subi	r30, 0xB7	; 183
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	de 01       	movw	r26, r28
    1f6a:	a5 5b       	subi	r26, 0xB5	; 181
    1f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e5 5b       	subi	r30, 0xB5	; 181
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	11 96       	adiw	r26, 0x01	; 1
    1f7c:	9c 93       	st	X, r25
    1f7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	fe 01       	movw	r30, r28
    1f82:	e5 5b       	subi	r30, 0xB5	; 181
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	d1 f6       	brne	.-76     	; 0x1f42 <LCD_Init+0xe4>
    1f8e:	27 c0       	rjmp	.+78     	; 0x1fde <LCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	8e 01       	movw	r16, r28
    1f92:	05 5b       	subi	r16, 0xB5	; 181
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e3 5b       	subi	r30, 0xB3	; 179
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	de 01       	movw	r26, r28
    1fb4:	a9 5b       	subi	r26, 0xB9	; 185
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e5 5b       	subi	r30, 0xB5	; 181
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	8d 93       	st	X+, r24
    1fc4:	9c 93       	st	X, r25
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e9 5b       	subi	r30, 0xB9	; 185
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_Init+0x172>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e9 5b       	subi	r30, 0xB9	; 185
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
	_delay_ms(50);
	WriteIns(0x02);
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ed 5b       	subi	r30, 0xBD	; 189
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	80 83       	st	Z, r24
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	01 5c       	subi	r16, 0xC1	; 193
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	ed 5b       	subi	r30, 0xBD	; 189
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	f8 01       	movw	r30, r16
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2028:	fe 01       	movw	r30, r28
    202a:	ff 96       	adiw	r30, 0x3f	; 63
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_Init+0x1f0>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e af       	std	Y+62, r25	; 0x3e
    204a:	8d af       	std	Y+61, r24	; 0x3d
    204c:	46 c0       	rjmp	.+140    	; 0x20da <LCD_Init+0x27c>
	else if (__tmp > 65535)
    204e:	fe 01       	movw	r30, r28
    2050:	ff 96       	adiw	r30, 0x3f	; 63
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	64 f5       	brge	.+88     	; 0x20c2 <LCD_Init+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	fe 01       	movw	r30, r28
    206c:	ed 5b       	subi	r30, 0xBD	; 189
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e af       	std	Y+62, r25	; 0x3e
    2096:	8d af       	std	Y+61, r24	; 0x3d
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_Init+0x25a>
    209a:	88 ec       	ldi	r24, 0xC8	; 200
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c af       	std	Y+60, r25	; 0x3c
    20a0:	8b af       	std	Y+59, r24	; 0x3b
    20a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    20a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_Init+0x248>
    20aa:	9c af       	std	Y+60, r25	; 0x3c
    20ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    20b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9e af       	std	Y+62, r25	; 0x3e
    20b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <LCD_Init+0x23c>
    20c0:	16 c0       	rjmp	.+44     	; 0x20ee <LCD_Init+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	fe 01       	movw	r30, r28
    20c4:	ff 96       	adiw	r30, 0x3f	; 63
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e af       	std	Y+62, r25	; 0x3e
    20d8:	8d af       	std	Y+61, r24	; 0x3d
    20da:	8d ad       	ldd	r24, Y+61	; 0x3d
    20dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    20de:	9a af       	std	Y+58, r25	; 0x3a
    20e0:	89 af       	std	Y+57, r24	; 0x39
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_Init+0x288>
    20ea:	9a af       	std	Y+58, r25	; 0x3a
    20ec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	WriteIns(0x28);
    20ee:	88 e2       	ldi	r24, 0x28	; 40
    20f0:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	8d ab       	std	Y+53, r24	; 0x35
    20fe:	9e ab       	std	Y+54, r25	; 0x36
    2100:	af ab       	std	Y+55, r26	; 0x37
    2102:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6d a9       	ldd	r22, Y+53	; 0x35
    2106:	7e a9       	ldd	r23, Y+54	; 0x36
    2108:	8f a9       	ldd	r24, Y+55	; 0x37
    210a:	98 ad       	ldd	r25, Y+56	; 0x38
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	89 ab       	std	Y+49, r24	; 0x31
    211e:	9a ab       	std	Y+50, r25	; 0x32
    2120:	ab ab       	std	Y+51, r26	; 0x33
    2122:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2124:	69 a9       	ldd	r22, Y+49	; 0x31
    2126:	7a a9       	ldd	r23, Y+50	; 0x32
    2128:	8b a9       	ldd	r24, Y+51	; 0x33
    212a:	9c a9       	ldd	r25, Y+52	; 0x34
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <LCD_Init+0x2e8>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	98 ab       	std	Y+48, r25	; 0x30
    2142:	8f a7       	std	Y+47, r24	; 0x2f
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <LCD_Init+0x366>
	else if (__tmp > 65535)
    2146:	69 a9       	ldd	r22, Y+49	; 0x31
    2148:	7a a9       	ldd	r23, Y+50	; 0x32
    214a:	8b a9       	ldd	r24, Y+51	; 0x33
    214c:	9c a9       	ldd	r25, Y+52	; 0x34
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <LCD_Init+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6d a9       	ldd	r22, Y+53	; 0x35
    2160:	7e a9       	ldd	r23, Y+54	; 0x36
    2162:	8f a9       	ldd	r24, Y+55	; 0x37
    2164:	98 ad       	ldd	r25, Y+56	; 0x38
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	98 ab       	std	Y+48, r25	; 0x30
    2184:	8f a7       	std	Y+47, r24	; 0x2f
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_Init+0x348>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9e a7       	std	Y+46, r25	; 0x2e
    218e:	8d a7       	std	Y+45, r24	; 0x2d
    2190:	8d a5       	ldd	r24, Y+45	; 0x2d
    2192:	9e a5       	ldd	r25, Y+46	; 0x2e
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_Init+0x336>
    2198:	9e a7       	std	Y+46, r25	; 0x2e
    219a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8f a5       	ldd	r24, Y+47	; 0x2f
    219e:	98 a9       	ldd	r25, Y+48	; 0x30
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	98 ab       	std	Y+48, r25	; 0x30
    21a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a8:	98 a9       	ldd	r25, Y+48	; 0x30
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <LCD_Init+0x32a>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <LCD_Init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	69 a9       	ldd	r22, Y+49	; 0x31
    21b2:	7a a9       	ldd	r23, Y+50	; 0x32
    21b4:	8b a9       	ldd	r24, Y+51	; 0x33
    21b6:	9c a9       	ldd	r25, Y+52	; 0x34
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	98 ab       	std	Y+48, r25	; 0x30
    21c2:	8f a7       	std	Y+47, r24	; 0x2f
    21c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c6:	98 a9       	ldd	r25, Y+48	; 0x30
    21c8:	9c a7       	std	Y+44, r25	; 0x2c
    21ca:	8b a7       	std	Y+43, r24	; 0x2b
    21cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_Init+0x372>
    21d4:	9c a7       	std	Y+44, r25	; 0x2c
    21d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	WriteIns(0x0C);
    21d8:	8c e0       	ldi	r24, 0x0C	; 12
    21da:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	8f a3       	std	Y+39, r24	; 0x27
    21e8:	98 a7       	std	Y+40, r25	; 0x28
    21ea:	a9 a7       	std	Y+41, r26	; 0x29
    21ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	6f a1       	ldd	r22, Y+39	; 0x27
    21f0:	78 a5       	ldd	r23, Y+40	; 0x28
    21f2:	89 a5       	ldd	r24, Y+41	; 0x29
    21f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8b a3       	std	Y+35, r24	; 0x23
    2208:	9c a3       	std	Y+36, r25	; 0x24
    220a:	ad a3       	std	Y+37, r26	; 0x25
    220c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    220e:	6b a1       	ldd	r22, Y+35	; 0x23
    2210:	7c a1       	ldd	r23, Y+36	; 0x24
    2212:	8d a1       	ldd	r24, Y+37	; 0x25
    2214:	9e a1       	ldd	r25, Y+38	; 0x26
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <LCD_Init+0x3d2>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9a a3       	std	Y+34, r25	; 0x22
    222c:	89 a3       	std	Y+33, r24	; 0x21
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <LCD_Init+0x450>
	else if (__tmp > 65535)
    2230:	6b a1       	ldd	r22, Y+35	; 0x23
    2232:	7c a1       	ldd	r23, Y+36	; 0x24
    2234:	8d a1       	ldd	r24, Y+37	; 0x25
    2236:	9e a1       	ldd	r25, Y+38	; 0x26
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <LCD_Init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	6f a1       	ldd	r22, Y+39	; 0x27
    224a:	78 a5       	ldd	r23, Y+40	; 0x28
    224c:	89 a5       	ldd	r24, Y+41	; 0x29
    224e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9a a3       	std	Y+34, r25	; 0x22
    226e:	89 a3       	std	Y+33, r24	; 0x21
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_Init+0x432>
    2272:	88 ec       	ldi	r24, 0xC8	; 200
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	98 a3       	std	Y+32, r25	; 0x20
    2278:	8f 8f       	std	Y+31, r24	; 0x1f
    227a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    227c:	98 a1       	ldd	r25, Y+32	; 0x20
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_Init+0x420>
    2282:	98 a3       	std	Y+32, r25	; 0x20
    2284:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	89 a1       	ldd	r24, Y+33	; 0x21
    2288:	9a a1       	ldd	r25, Y+34	; 0x22
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	89 a1       	ldd	r24, Y+33	; 0x21
    2292:	9a a1       	ldd	r25, Y+34	; 0x22
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <LCD_Init+0x414>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <LCD_Init+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6b a1       	ldd	r22, Y+35	; 0x23
    229c:	7c a1       	ldd	r23, Y+36	; 0x24
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	9e a1       	ldd	r25, Y+38	; 0x26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
    22ae:	89 a1       	ldd	r24, Y+33	; 0x21
    22b0:	9a a1       	ldd	r25, Y+34	; 0x22
    22b2:	9e 8f       	std	Y+30, r25	; 0x1e
    22b4:	8d 8f       	std	Y+29, r24	; 0x1d
    22b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_Init+0x45c>
    22be:	9e 8f       	std	Y+30, r25	; 0x1e
    22c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	WriteIns(0x01); //clear screen
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e4       	ldi	r27, 0x40	; 64
    22d0:	89 8f       	std	Y+25, r24	; 0x19
    22d2:	9a 8f       	std	Y+26, r25	; 0x1a
    22d4:	ab 8f       	std	Y+27, r26	; 0x1b
    22d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	69 8d       	ldd	r22, Y+25	; 0x19
    22da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a ef       	ldi	r20, 0xFA	; 250
    22e6:	54 e4       	ldi	r21, 0x44	; 68
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8d 8b       	std	Y+21, r24	; 0x15
    22f2:	9e 8b       	std	Y+22, r25	; 0x16
    22f4:	af 8b       	std	Y+23, r26	; 0x17
    22f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <LCD_Init+0x4bc>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <LCD_Init+0x53a>
	else if (__tmp > 65535)
    231a:	6d 89       	ldd	r22, Y+21	; 0x15
    231c:	7e 89       	ldd	r23, Y+22	; 0x16
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	98 8d       	ldd	r25, Y+24	; 0x18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <LCD_Init+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	69 8d       	ldd	r22, Y+25	; 0x19
    2334:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2336:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2338:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9c 8b       	std	Y+20, r25	; 0x14
    2358:	8b 8b       	std	Y+19, r24	; 0x13
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_Init+0x51c>
    235c:	88 ec       	ldi	r24, 0xC8	; 200
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9a 8b       	std	Y+18, r25	; 0x12
    2362:	89 8b       	std	Y+17, r24	; 0x11
    2364:	89 89       	ldd	r24, Y+17	; 0x11
    2366:	9a 89       	ldd	r25, Y+18	; 0x12
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_Init+0x50a>
    236c:	9a 8b       	std	Y+18, r25	; 0x12
    236e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8b 89       	ldd	r24, Y+19	; 0x13
    2372:	9c 89       	ldd	r25, Y+20	; 0x14
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8b 89       	ldd	r24, Y+19	; 0x13
    237c:	9c 89       	ldd	r25, Y+20	; 0x14
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <LCD_Init+0x4fe>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <LCD_Init+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6d 89       	ldd	r22, Y+21	; 0x15
    2386:	7e 89       	ldd	r23, Y+22	; 0x16
    2388:	8f 89       	ldd	r24, Y+23	; 0x17
    238a:	98 8d       	ldd	r25, Y+24	; 0x18
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9c 8b       	std	Y+20, r25	; 0x14
    2396:	8b 8b       	std	Y+19, r24	; 0x13
    2398:	8b 89       	ldd	r24, Y+19	; 0x13
    239a:	9c 89       	ldd	r25, Y+20	; 0x14
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	8f 87       	std	Y+15, r24	; 0x0f
    23a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a2:	98 89       	ldd	r25, Y+16	; 0x10
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_Init+0x546>
    23a8:	98 8b       	std	Y+16, r25	; 0x10
    23aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	WriteIns(0x06);
    23ac:	86 e0       	ldi	r24, 0x06	; 6
    23ae:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a0 e8       	ldi	r26, 0x80	; 128
    23b8:	bf e3       	ldi	r27, 0x3F	; 63
    23ba:	8b 87       	std	Y+11, r24	; 0x0b
    23bc:	9c 87       	std	Y+12, r25	; 0x0c
    23be:	ad 87       	std	Y+13, r26	; 0x0d
    23c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a ef       	ldi	r20, 0xFA	; 250
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	98 87       	std	Y+8, r25	; 0x08
    23de:	a9 87       	std	Y+9, r26	; 0x09
    23e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e2:	6f 81       	ldd	r22, Y+7	; 0x07
    23e4:	78 85       	ldd	r23, Y+8	; 0x08
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <LCD_Init+0x5a6>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <LCD_Init+0x624>
	else if (__tmp > 65535)
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	4c f5       	brge	.+82     	; 0x246e <LCD_Init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	6b 85       	ldd	r22, Y+11	; 0x0b
    241e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2420:	8d 85       	ldd	r24, Y+13	; 0x0d
    2422:	9e 85       	ldd	r25, Y+14	; 0x0e
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <LCD_Init+0x606>
    2446:	88 ec       	ldi	r24, 0xC8	; 200
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_Init+0x5f4>
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f7       	brne	.-38     	; 0x2446 <LCD_Init+0x5e8>
    246c:	14 c0       	rjmp	.+40     	; 0x2496 <LCD_Init+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_Init+0x630>
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2496:	cc 5a       	subi	r28, 0xAC	; 172
    2498:	df 4f       	sbci	r29, 0xFF	; 255
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret

000024ae <LCD_Clear>:

#endif

void LCD_Clear(void)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
	WriteIns(0x01);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <LCD_GoTo>:

void LCD_GoTo(u8 line, u8 cell)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <LCD_GoTo+0x6>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 23       	and	r24, r24
    24d4:	29 f4       	brne	.+10     	; 0x24e0 <LCD_GoTo+0x1e>
	{
		WriteIns(0x80+cell);
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	80 58       	subi	r24, 0x80	; 128
    24da:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    24de:	17 c0       	rjmp	.+46     	; 0x250e <LCD_GoTo+0x4c>
	}
	else if (line==1)
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <LCD_GoTo+0x2e>
	{
		WriteIns(0x80+0x40+cell);
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	80 54       	subi	r24, 0x40	; 64
    24ea:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <LCD_GoTo+0x4c>
	}
	else if (line==2)
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	82 30       	cpi	r24, 0x02	; 2
    24f4:	29 f4       	brne	.+10     	; 0x2500 <LCD_GoTo+0x3e>
	{
		WriteIns(0x94+cell);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	8c 56       	subi	r24, 0x6C	; 108
    24fa:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <LCD_GoTo+0x4c>
	}
	else if (line==3)
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	83 30       	cpi	r24, 0x03	; 3
    2504:	21 f4       	brne	.+8      	; 0x250e <LCD_GoTo+0x4c>
	{
		WriteIns(0xD4+cell);
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	8c 52       	subi	r24, 0x2C	; 44
    250a:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
	}
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <LCD_WriteChar>:


void LCD_WriteChar(u8 ch)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
	WriteData(ch);
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <WriteData>
}
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_WriteString>:

void LCD_WriteString(c8* str)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <LCD_WriteString+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	9b 83       	std	Y+3, r25	; 0x03
    2540:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; str[i]; i++)
    2542:	19 82       	std	Y+1, r1	; 0x01
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <LCD_WriteString+0x30>
	{
		LCD_WriteChar(str[i]);
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	fc 01       	movw	r30, r24
    2552:	e2 0f       	add	r30, r18
    2554:	f3 1f       	adc	r31, r19
    2556:	80 81       	ld	r24, Z
    2558:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
}

void LCD_WriteString(c8* str)
{
	u8 i;
	for(i=0; str[i]; i++)
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	fc 01       	movw	r30, r24
    256e:	e2 0f       	add	r30, r18
    2570:	f3 1f       	adc	r31, r19
    2572:	80 81       	ld	r24, Z
    2574:	88 23       	and	r24, r24
    2576:	39 f7       	brne	.-50     	; 0x2546 <LCD_WriteString+0x14>
	{
		LCD_WriteChar(str[i]);
	}
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	66 97       	sbiw	r28, 0x16	; 22
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	6b 8b       	std	Y+19, r22	; 0x13
    259e:	7c 8b       	std	Y+20, r23	; 0x14
    25a0:	8d 8b       	std	Y+21, r24	; 0x15
    25a2:	9e 8b       	std	Y+22, r25	; 0x16
	c8 str[16];
	u8 i=0;
    25a4:	1a 82       	std	Y+2, r1	; 0x02
	s8 j=0;
    25a6:	19 82       	std	Y+1, r1	; 0x01

	if(num==0)
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	ad 89       	ldd	r26, Y+21	; 0x15
    25ae:	be 89       	ldd	r27, Y+22	; 0x16
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	a1 05       	cpc	r26, r1
    25b4:	b1 05       	cpc	r27, r1
    25b6:	21 f4       	brne	.+8      	; 0x25c0 <LCD_WriteNumber+0x3c>
	{
		LCD_WriteChar('0');
    25b8:	80 e3       	ldi	r24, 0x30	; 48
    25ba:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    25be:	67 c0       	rjmp	.+206    	; 0x268e <LCD_WriteNumber+0x10a>
		return;
	}
	if(num<0)
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	ad 89       	ldd	r26, Y+21	; 0x15
    25c6:	be 89       	ldd	r27, Y+22	; 0x16
    25c8:	bb 23       	and	r27, r27
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <LCD_WriteNumber+0x4a>
    25cc:	41 c0       	rjmp	.+130    	; 0x2650 <LCD_WriteNumber+0xcc>
	{
		LCD_WriteChar('-');
    25ce:	8d e2       	ldi	r24, 0x2D	; 45
    25d0:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
		num = num * -1;
    25d4:	8b 89       	ldd	r24, Y+19	; 0x13
    25d6:	9c 89       	ldd	r25, Y+20	; 0x14
    25d8:	ad 89       	ldd	r26, Y+21	; 0x15
    25da:	be 89       	ldd	r27, Y+22	; 0x16
    25dc:	b0 95       	com	r27
    25de:	a0 95       	com	r26
    25e0:	90 95       	com	r25
    25e2:	81 95       	neg	r24
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	af 4f       	sbci	r26, 0xFF	; 255
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	8b 8b       	std	Y+19, r24	; 0x13
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	ad 8b       	std	Y+21, r26	; 0x15
    25f0:	be 8b       	std	Y+22, r27	; 0x16
    25f2:	2e c0       	rjmp	.+92     	; 0x2650 <LCD_WriteNumber+0xcc>
	}

	while(num)
	{
		str[i++] = num%10 +'0';
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	08 2f       	mov	r16, r24
    25f8:	10 e0       	ldi	r17, 0x00	; 0
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	9c 89       	ldd	r25, Y+20	; 0x14
    25fe:	ad 89       	ldd	r26, Y+21	; 0x15
    2600:	be 89       	ldd	r27, Y+22	; 0x16
    2602:	2a e0       	ldi	r18, 0x0A	; 10
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	28 2f       	mov	r18, r24
    2618:	20 5d       	subi	r18, 0xD0	; 208
    261a:	ce 01       	movw	r24, r28
    261c:	03 96       	adiw	r24, 0x03	; 3
    261e:	fc 01       	movw	r30, r24
    2620:	e0 0f       	add	r30, r16
    2622:	f1 1f       	adc	r31, r17
    2624:	20 83       	st	Z, r18
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	8a 83       	std	Y+2, r24	; 0x02
		num = num/10;
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	ad 89       	ldd	r26, Y+21	; 0x15
    2632:	be 89       	ldd	r27, Y+22	; 0x16
    2634:	2a e0       	ldi	r18, 0x0A	; 10
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    2644:	da 01       	movw	r26, r20
    2646:	c9 01       	movw	r24, r18
    2648:	8b 8b       	std	Y+19, r24	; 0x13
    264a:	9c 8b       	std	Y+20, r25	; 0x14
    264c:	ad 8b       	std	Y+21, r26	; 0x15
    264e:	be 8b       	std	Y+22, r27	; 0x16
	{
		LCD_WriteChar('-');
		num = num * -1;
	}

	while(num)
    2650:	8b 89       	ldd	r24, Y+19	; 0x13
    2652:	9c 89       	ldd	r25, Y+20	; 0x14
    2654:	ad 89       	ldd	r26, Y+21	; 0x15
    2656:	be 89       	ldd	r27, Y+22	; 0x16
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	a1 05       	cpc	r26, r1
    265c:	b1 05       	cpc	r27, r1
    265e:	51 f6       	brne	.-108    	; 0x25f4 <LCD_WriteNumber+0x70>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	10 c0       	rjmp	.+32     	; 0x2688 <LCD_WriteNumber+0x104>
	{
		LCD_WriteChar(str[j]);
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	33 27       	eor	r19, r19
    266e:	27 fd       	sbrc	r18, 7
    2670:	30 95       	com	r19
    2672:	ce 01       	movw	r24, r28
    2674:	03 96       	adiw	r24, 0x03	; 3
    2676:	fc 01       	movw	r30, r24
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	80 81       	ld	r24, Z
    267e:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	{
		str[i++] = num%10 +'0';
		num = num/10;
	}

	for(j=i-1; j>=0; j--)
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	81 50       	subi	r24, 0x01	; 1
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	88 23       	and	r24, r24
    268c:	6c f7       	brge	.-38     	; 0x2668 <LCD_WriteNumber+0xe4>
	{
		LCD_WriteChar(str[j]);
	}


}
    268e:	66 96       	adiw	r28, 0x16	; 22
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <LCD_Write_4D>:

void LCD_Write_4D(u16 num) //5214
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <LCD_Write_4D+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteChar(((num%10000)/1000)+'0');
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	20 e1       	ldi	r18, 0x10	; 16
    26b8:	37 e2       	ldi	r19, 0x27	; 39
    26ba:	b9 01       	movw	r22, r18
    26bc:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    26c0:	28 ee       	ldi	r18, 0xE8	; 232
    26c2:	33 e0       	ldi	r19, 0x03	; 3
    26c4:	b9 01       	movw	r22, r18
    26c6:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    26ca:	cb 01       	movw	r24, r22
    26cc:	80 5d       	subi	r24, 0xD0	; 208
    26ce:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	LCD_WriteChar(((num%1000)/100)+'0');
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	28 ee       	ldi	r18, 0xE8	; 232
    26d8:	33 e0       	ldi	r19, 0x03	; 3
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    26e0:	24 e6       	ldi	r18, 0x64	; 100
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    26ea:	cb 01       	movw	r24, r22
    26ec:	80 5d       	subi	r24, 0xD0	; 208
    26ee:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	LCD_WriteChar(((num%100)/10)+'0');
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	24 e6       	ldi	r18, 0x64	; 100
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	b9 01       	movw	r22, r18
    26fc:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    2700:	2a e0       	ldi	r18, 0x0A	; 10
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	b9 01       	movw	r22, r18
    2706:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    270a:	cb 01       	movw	r24, r22
    270c:	80 5d       	subi	r24, 0xD0	; 208
    270e:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	LCD_WriteChar(((num%10)/1)+'0');
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	2a e0       	ldi	r18, 0x0A	; 10
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	b9 01       	movw	r22, r18
    271c:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    2720:	80 5d       	subi	r24, 0xD0	; 208
    2722:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_WriteBinary>:

void LCD_WriteBinary(u8 num)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <LCD_WriteBinary+0x6>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	for(i=7; i>=0; i--)
    273c:	87 e0       	ldi	r24, 0x07	; 7
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	1c c0       	rjmp	.+56     	; 0x277a <LCD_WriteBinary+0x4a>
	{
		if(((num>>i)&1)==1)
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	99 27       	eor	r25, r25
    274c:	87 fd       	sbrc	r24, 7
    274e:	90 95       	com	r25
    2750:	a9 01       	movw	r20, r18
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <LCD_WriteBinary+0x28>
    2754:	55 95       	asr	r21
    2756:	47 95       	ror	r20
    2758:	8a 95       	dec	r24
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <LCD_WriteBinary+0x24>
    275c:	ca 01       	movw	r24, r20
    275e:	81 70       	andi	r24, 0x01	; 1
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	88 23       	and	r24, r24
    2764:	21 f0       	breq	.+8      	; 0x276e <LCD_WriteBinary+0x3e>
		{
			LCD_WriteChar('1');
    2766:	81 e3       	ldi	r24, 0x31	; 49
    2768:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <LCD_WriteBinary+0x44>
		}
		else
		{
			LCD_WriteChar('0');
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
}

void LCD_WriteBinary(u8 num)
{
	s8 i;
	for(i=7; i>=0; i--)
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	81 50       	subi	r24, 0x01	; 1
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	88 23       	and	r24, r24
    277e:	0c f7       	brge	.-62     	; 0x2742 <LCD_WriteBinary+0x12>
		{
			LCD_WriteChar('0');
		}
		//LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <LCD_WriteHex>:

void LCD_WriteHex(u8 num)
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <LCD_WriteHex+0x6>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8b 83       	std	Y+3, r24	; 0x03
	u8 d0,d1;
	d0=num&0x0F;
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	8f 70       	andi	r24, 0x0F	; 15
    279c:	8a 83       	std	Y+2, r24	; 0x02
	d1=(num>>4)&0x0F;
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	82 95       	swap	r24
    27a2:	8f 70       	andi	r24, 0x0F	; 15
    27a4:	89 83       	std	Y+1, r24	; 0x01

	if(d1<10)
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	8a 30       	cpi	r24, 0x0A	; 10
    27aa:	28 f4       	brcc	.+10     	; 0x27b6 <LCD_WriteHex+0x2c>
	{
		LCD_WriteChar(d1+'0');
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	80 5d       	subi	r24, 0xD0	; 208
    27b0:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <LCD_WriteHex+0x34>
	}
	else
	{
		LCD_WriteChar(d1-10+'A');
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	89 5c       	subi	r24, 0xC9	; 201
    27ba:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	}

	if(d0<10)
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	8a 30       	cpi	r24, 0x0A	; 10
    27c2:	28 f4       	brcc	.+10     	; 0x27ce <LCD_WriteHex+0x44>
	{
		LCD_WriteChar(d0+'0');
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	80 5d       	subi	r24, 0xD0	; 208
    27c8:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <LCD_WriteHex+0x4c>
	}
	else
	{
		LCD_WriteChar(d0-10+'A');
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	89 5c       	subi	r24, 0xC9	; 201
    27d2:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
	}
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_WriteStringGoTo>:

void LCD_WriteStringGoTo(u8 line, u8 cell, c8* str)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_WriteStringGoTo+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <LCD_WriteStringGoTo+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	6a 83       	std	Y+2, r22	; 0x02
    27f2:	5c 83       	std	Y+4, r21	; 0x04
    27f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoTo(line,cell);
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	6a 81       	ldd	r22, Y+2	; 0x02
    27fa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString(str);
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_ClearPosition>:

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <LCD_ClearPosition+0x6>
    281a:	00 d0       	rcall	.+0      	; 0x281c <LCD_ClearPosition+0x8>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	6b 83       	std	Y+3, r22	; 0x03
    2824:	4c 83       	std	Y+4, r20	; 0x04
	u8 i;
	LCD_GoTo(line,cell);
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	6b 81       	ldd	r22, Y+3	; 0x03
    282a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	for(i=0; i<NoOfCells; i++)
    282e:	19 82       	std	Y+1, r1	; 0x01
    2830:	06 c0       	rjmp	.+12     	; 0x283e <LCD_ClearPosition+0x2a>
	{
		LCD_WriteChar(' ');
    2832:	80 e2       	ldi	r24, 0x20	; 32
    2834:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>

void LCD_ClearPosition(u8 line, u8 cell, u8 NoOfCells)
{
	u8 i;
	LCD_GoTo(line,cell);
	for(i=0; i<NoOfCells; i++)
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	99 81       	ldd	r25, Y+1	; 0x01
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	98 17       	cp	r25, r24
    2844:	b0 f3       	brcs	.-20     	; 0x2832 <LCD_ClearPosition+0x1e>
	{
		LCD_WriteChar(' ');
	}
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LCD_CustomChar>:


void LCD_CustomChar(u8 address, u8* pattern)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <LCD_CustomChar+0x6>
    285a:	00 d0       	rcall	.+0      	; 0x285c <LCD_CustomChar+0x8>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	7c 83       	std	Y+4, r23	; 0x04
    2864:	6b 83       	std	Y+3, r22	; 0x03
	u8 i;

	WriteIns(0x40+address*8);
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	08 96       	adiw	r24, 0x08	; 8
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
	for(i=0; i<8; i++)
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	0e c0       	rjmp	.+28     	; 0x289e <LCD_CustomChar+0x4a>
	{
		LCD_WriteChar(pattern[i]);
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	fc 01       	movw	r30, r24
    288e:	e2 0f       	add	r30, r18
    2890:	f3 1f       	adc	r31, r19
    2892:	80 81       	ld	r24, Z
    2894:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
void LCD_CustomChar(u8 address, u8* pattern)
{
	u8 i;

	WriteIns(0x40+address*8);
	for(i=0; i<8; i++)
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	88 30       	cpi	r24, 0x08	; 8
    28a2:	78 f3       	brcs	.-34     	; 0x2882 <LCD_CustomChar+0x2e>
	{
		LCD_WriteChar(pattern[i]);
	}
	WriteIns(0x80);
    28a4:	80 e8       	ldi	r24, 0x80	; 128
    28a6:	0e 94 bd 0a 	call	0x157a	; 0x157a <WriteIns>
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <left_To_Right>:
 *
 * 				Function Left to Right
 *
 ****************************************************/
void left_To_Right(void)
{
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	c0 57       	subi	r28, 0x70	; 112
    28c6:	d0 40       	sbci	r29, 0x00	; 0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
	for(ball_y=1;ball_y<=19;ball_y++)
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	80 93 d6 00 	sts	0x00D6, r24
    28d8:	b8 c5       	rjmp	.+2928   	; 0x344a <left_To_Right+0xb92>
	{
		if(ball_y==19)
    28da:	80 91 d6 00 	lds	r24, 0x00D6
    28de:	83 31       	cpi	r24, 0x13	; 19
    28e0:	79 f4       	brne	.+30     	; 0x2900 <left_To_Right+0x48>
		{
			LCD_GoTo(3, 4);
    28e2:	83 e0       	ldi	r24, 0x03	; 3
    28e4:	64 e0       	ldi	r22, 0x04	; 4
    28e6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteNumber(score1);
    28ea:	80 91 0c 01 	lds	r24, 0x010C
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>
    28fe:	aa c5       	rjmp	.+2900   	; 0x3454 <left_To_Right+0xb9c>
			break;
		}
		LCD_Clear();
    2900:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_Clear>

		LCD_GoTo(3, 1);
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteString("P1:          P2:");
    290c:	80 e6       	ldi	r24, 0x60	; 96
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>

		/*Printing Player 1*/
		LCD_GoTo(player1_x,0);
    2914:	80 91 08 01 	lds	r24, 0x0108
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(0);
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>

		/*Printing Player 2*/
		LCD_GoTo(player2_x,19);
    2924:	80 91 0a 01 	lds	r24, 0x010A
    2928:	63 e1       	ldi	r22, 0x13	; 19
    292a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(0);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>

		/*Printing score1*/
		LCD_GoTo(3, 4);
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	64 e0       	ldi	r22, 0x04	; 4
    2938:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteNumber(score1);
    293c:	80 91 0c 01 	lds	r24, 0x010C
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e0       	ldi	r26, 0x00	; 0
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>

		/*Printing score2*/
		LCD_GoTo(3, 17);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	61 e1       	ldi	r22, 0x11	; 17
    2954:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteNumber(score2);
    2958:	80 91 0d 01 	lds	r24, 0x010D
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>

		/*Checking on the scores*/
		if( (ball_y==18) && (ball_x !=player2_x ))
    296c:	80 91 d6 00 	lds	r24, 0x00D6
    2970:	82 31       	cpi	r24, 0x12	; 18
    2972:	59 f4       	brne	.+22     	; 0x298a <left_To_Right+0xd2>
    2974:	90 91 0b 01 	lds	r25, 0x010B
    2978:	80 91 0a 01 	lds	r24, 0x010A
    297c:	98 17       	cp	r25, r24
    297e:	29 f0       	breq	.+10     	; 0x298a <left_To_Right+0xd2>
		{
			score1++;
    2980:	80 91 0c 01 	lds	r24, 0x010C
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	80 93 0c 01 	sts	0x010C, r24
		}
		else{}


		/*Printing the ball*/
		LCD_GoTo(ball_x,ball_y);
    298a:	80 91 0b 01 	lds	r24, 0x010B
    298e:	90 91 d6 00 	lds	r25, 0x00D6
    2992:	69 2f       	mov	r22, r25
    2994:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(1);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    299e:	fe 01       	movw	r30, r28
    29a0:	e3 59       	subi	r30, 0x93	; 147
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	aa e7       	ldi	r26, 0x7A	; 122
    29aa:	b3 e4       	ldi	r27, 0x43	; 67
    29ac:	80 83       	st	Z, r24
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	a2 83       	std	Z+2, r26	; 0x02
    29b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	8e 01       	movw	r16, r28
    29b6:	07 59       	subi	r16, 0x97	; 151
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	fe 01       	movw	r30, r28
    29bc:	e3 59       	subi	r30, 0x93	; 147
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a ef       	ldi	r20, 0xFA	; 250
    29ce:	54 e4       	ldi	r21, 0x44	; 68
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	f8 01       	movw	r30, r16
    29da:	80 83       	st	Z, r24
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	a2 83       	std	Z+2, r26	; 0x02
    29e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29e2:	fe 01       	movw	r30, r28
    29e4:	e7 59       	subi	r30, 0x97	; 151
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	44 f4       	brge	.+16     	; 0x2a10 <left_To_Right+0x158>
		__ticks = 1;
    2a00:	fe 01       	movw	r30, r28
    2a02:	e9 59       	subi	r30, 0x99	; 153
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	80 83       	st	Z, r24
    2a0e:	64 c0       	rjmp	.+200    	; 0x2ad8 <left_To_Right+0x220>
	else if (__tmp > 65535)
    2a10:	fe 01       	movw	r30, r28
    2a12:	e7 59       	subi	r30, 0x97	; 151
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <left_To_Right+0x178>
    2a2e:	43 c0       	rjmp	.+134    	; 0x2ab6 <left_To_Right+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	fe 01       	movw	r30, r28
    2a32:	e3 59       	subi	r30, 0x93	; 147
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8e 01       	movw	r16, r28
    2a50:	09 59       	subi	r16, 0x99	; 153
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	f8 01       	movw	r30, r16
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	1f c0       	rjmp	.+62     	; 0x2aa6 <left_To_Right+0x1ee>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	eb 59       	subi	r30, 0x9B	; 155
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	88 ec       	ldi	r24, 0xC8	; 200
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
    2a76:	fe 01       	movw	r30, r28
    2a78:	eb 59       	subi	r30, 0x9B	; 155
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <left_To_Right+0x1c8>
    2a84:	fe 01       	movw	r30, r28
    2a86:	eb 59       	subi	r30, 0x9B	; 155
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	de 01       	movw	r26, r28
    2a90:	a9 59       	subi	r26, 0x99	; 153
    2a92:	bf 4f       	sbci	r27, 0xFF	; 255
    2a94:	fe 01       	movw	r30, r28
    2a96:	e9 59       	subi	r30, 0x99	; 153
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	11 96       	adiw	r26, 0x01	; 1
    2aa2:	9c 93       	st	X, r25
    2aa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e9 59       	subi	r30, 0x99	; 153
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	d1 f6       	brne	.-76     	; 0x2a68 <left_To_Right+0x1b0>
    2ab4:	27 c0       	rjmp	.+78     	; 0x2b04 <left_To_Right+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	09 59       	subi	r16, 0x99	; 153
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 59       	subi	r30, 0x97	; 151
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	de 01       	movw	r26, r28
    2ada:	ad 59       	subi	r26, 0x9D	; 157
    2adc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e9 59       	subi	r30, 0x99	; 153
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	8d 93       	st	X+, r24
    2aea:	9c 93       	st	X, r25
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 59       	subi	r30, 0x9D	; 157
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <left_To_Right+0x23e>
    2afa:	fe 01       	movw	r30, r28
    2afc:	ed 59       	subi	r30, 0x9D	; 157
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	80 83       	st	Z, r24
		_delay_ms(250);
		LCD_ClearPosition(ball_x,ball_y,1);
    2b04:	80 91 0b 01 	lds	r24, 0x010B
    2b08:	90 91 d6 00 	lds	r25, 0x00D6
    2b0c:	69 2f       	mov	r22, r25
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_ClearPosition>

		/*Up player 1*/
		if(DIO_ReadPin(PIND6)==0)
    2b14:	8e e1       	ldi	r24, 0x1E	; 30
    2b16:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <left_To_Right+0x268>
    2b1e:	d1 c0       	rjmp	.+418    	; 0x2cc2 <left_To_Right+0x40a>
		{
			LCD_GoTo(player1_x, 0);
    2b20:	80 91 08 01 	lds	r24, 0x0108
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    2b2a:	80 e2       	ldi	r24, 0x20	; 32
    2b2c:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e1 5a       	subi	r30, 0xA1	; 161
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a8 ec       	ldi	r26, 0xC8	; 200
    2b3c:	b3 e4       	ldi	r27, 0x43	; 67
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	05 5a       	subi	r16, 0xA5	; 165
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e1 5a       	subi	r30, 0xA1	; 161
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	e5 5a       	subi	r30, 0xA5	; 165
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	44 f4       	brge	.+16     	; 0x2ba2 <left_To_Right+0x2ea>
		__ticks = 1;
    2b92:	fe 01       	movw	r30, r28
    2b94:	e7 5a       	subi	r30, 0xA7	; 167
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	64 c0       	rjmp	.+200    	; 0x2c6a <left_To_Right+0x3b2>
	else if (__tmp > 65535)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e5 5a       	subi	r30, 0xA5	; 165
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <left_To_Right+0x30a>
    2bc0:	43 c0       	rjmp	.+134    	; 0x2c48 <left_To_Right+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e1 5a       	subi	r30, 0xA1	; 161
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8e 01       	movw	r16, r28
    2be2:	07 5a       	subi	r16, 0xA7	; 167
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	1f c0       	rjmp	.+62     	; 0x2c38 <left_To_Right+0x380>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e9 5a       	subi	r30, 0xA9	; 169
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e9 5a       	subi	r30, 0xA9	; 169
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <left_To_Right+0x35a>
    2c16:	fe 01       	movw	r30, r28
    2c18:	e9 5a       	subi	r30, 0xA9	; 169
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	de 01       	movw	r26, r28
    2c22:	a7 5a       	subi	r26, 0xA7	; 167
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e7 5a       	subi	r30, 0xA7	; 167
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	9c 93       	st	X, r25
    2c36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e7 5a       	subi	r30, 0xA7	; 167
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	d1 f6       	brne	.-76     	; 0x2bfa <left_To_Right+0x342>
    2c46:	28 c0       	rjmp	.+80     	; 0x2c98 <left_To_Right+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	8e 01       	movw	r16, r28
    2c4a:	07 5a       	subi	r16, 0xA7	; 167
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 5a       	subi	r30, 0xA5	; 165
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	de 01       	movw	r26, r28
    2c6c:	ab 5a       	subi	r26, 0xAB	; 171
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	e7 5a       	subi	r30, 0xA7	; 167
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	9c 93       	st	X, r25
    2c7e:	8e 93       	st	-X, r24
    2c80:	fe 01       	movw	r30, r28
    2c82:	eb 5a       	subi	r30, 0xAB	; 171
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <left_To_Right+0x3d2>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 5a       	subi	r30, 0xAB	; 171
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
			_delay_ms(400);

			if(player1_x==0)
    2c98:	80 91 08 01 	lds	r24, 0x0108
    2c9c:	88 23       	and	r24, r24
    2c9e:	19 f4       	brne	.+6      	; 0x2ca6 <left_To_Right+0x3ee>
			{
				player1_x=3;
    2ca0:	83 e0       	ldi	r24, 0x03	; 3
    2ca2:	80 93 08 01 	sts	0x0108, r24
			}

			player1_x--;
    2ca6:	80 91 08 01 	lds	r24, 0x0108
    2caa:	81 50       	subi	r24, 0x01	; 1
    2cac:	80 93 08 01 	sts	0x0108, r24

			LCD_GoTo(player1_x, 0);
    2cb0:	80 91 08 01 	lds	r24, 0x0108
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2cc0:	42 c3       	rjmp	.+1668   	; 0x3346 <left_To_Right+0xa8e>
		}
		/*down player1*/
		else if(DIO_ReadPin(PIND7)==0)
    2cc2:	8f e1       	ldi	r24, 0x1F	; 31
    2cc4:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f0       	breq	.+2      	; 0x2cce <left_To_Right+0x416>
    2ccc:	d0 c0       	rjmp	.+416    	; 0x2e6e <left_To_Right+0x5b6>
		{
			LCD_GoTo(player1_x, 0);
    2cce:	80 91 08 01 	lds	r24, 0x0108
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    2cd8:	80 e2       	ldi	r24, 0x20	; 32
    2cda:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ef 5a       	subi	r30, 0xAF	; 175
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a8 ec       	ldi	r26, 0xC8	; 200
    2cea:	b3 e4       	ldi	r27, 0x43	; 67
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	03 5b       	subi	r16, 0xB3	; 179
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ef 5a       	subi	r30, 0xAF	; 175
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a ef       	ldi	r20, 0xFA	; 250
    2d0e:	54 e4       	ldi	r21, 0x44	; 68
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d22:	fe 01       	movw	r30, r28
    2d24:	e3 5b       	subi	r30, 0xB3	; 179
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	44 f4       	brge	.+16     	; 0x2d50 <left_To_Right+0x498>
		__ticks = 1;
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 5b       	subi	r30, 0xB5	; 181
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	64 c0       	rjmp	.+200    	; 0x2e18 <left_To_Right+0x560>
	else if (__tmp > 65535)
    2d50:	fe 01       	movw	r30, r28
    2d52:	e3 5b       	subi	r30, 0xB3	; 179
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	3f ef       	ldi	r19, 0xFF	; 255
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	57 e4       	ldi	r21, 0x47	; 71
    2d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <left_To_Right+0x4b8>
    2d6e:	43 c0       	rjmp	.+134    	; 0x2df6 <left_To_Right+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	fe 01       	movw	r30, r28
    2d72:	ef 5a       	subi	r30, 0xAF	; 175
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8e 01       	movw	r16, r28
    2d90:	05 5b       	subi	r16, 0xB5	; 181
    2d92:	1f 4f       	sbci	r17, 0xFF	; 255
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	f8 01       	movw	r30, r16
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	1f c0       	rjmp	.+62     	; 0x2de6 <left_To_Right+0x52e>
    2da8:	fe 01       	movw	r30, r28
    2daa:	e7 5b       	subi	r30, 0xB7	; 183
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	88 ec       	ldi	r24, 0xC8	; 200
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	fe 01       	movw	r30, r28
    2db8:	e7 5b       	subi	r30, 0xB7	; 183
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <left_To_Right+0x508>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5b       	subi	r30, 0xB7	; 183
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dce:	de 01       	movw	r26, r28
    2dd0:	a5 5b       	subi	r26, 0xB5	; 181
    2dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 5b       	subi	r30, 0xB5	; 181
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de6:	fe 01       	movw	r30, r28
    2de8:	e5 5b       	subi	r30, 0xB5	; 181
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	d1 f6       	brne	.-76     	; 0x2da8 <left_To_Right+0x4f0>
    2df4:	28 c0       	rjmp	.+80     	; 0x2e46 <left_To_Right+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df6:	8e 01       	movw	r16, r28
    2df8:	05 5b       	subi	r16, 0xB5	; 181
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e3 5b       	subi	r30, 0xB3	; 179
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	f8 01       	movw	r30, r16
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	de 01       	movw	r26, r28
    2e1a:	a9 5b       	subi	r26, 0xB9	; 185
    2e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e5 5b       	subi	r30, 0xB5	; 181
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e9 5b       	subi	r30, 0xB9	; 185
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <left_To_Right+0x580>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e9 5b       	subi	r30, 0xB9	; 185
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
			_delay_ms(400);

			player1_x++;
    2e46:	80 91 08 01 	lds	r24, 0x0108
    2e4a:	8f 5f       	subi	r24, 0xFF	; 255
    2e4c:	80 93 08 01 	sts	0x0108, r24

			if(player1_x==3)
    2e50:	80 91 08 01 	lds	r24, 0x0108
    2e54:	83 30       	cpi	r24, 0x03	; 3
    2e56:	11 f4       	brne	.+4      	; 0x2e5c <left_To_Right+0x5a4>
			{
				player1_x=0;
    2e58:	10 92 08 01 	sts	0x0108, r1
			}


			LCD_GoTo(player1_x, 0);
    2e5c:	80 91 08 01 	lds	r24, 0x0108
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2e6c:	6c c2       	rjmp	.+1240   	; 0x3346 <left_To_Right+0xa8e>
		}

		/*down player 2*/
		else if(DIO_ReadPin(PIND3)==0)
    2e6e:	8b e1       	ldi	r24, 0x1B	; 27
    2e70:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    2e74:	88 23       	and	r24, r24
    2e76:	09 f0       	breq	.+2      	; 0x2e7a <left_To_Right+0x5c2>
    2e78:	a1 c0       	rjmp	.+322    	; 0x2fbc <left_To_Right+0x704>
		{
			LCD_GoTo(player2_x,19);
    2e7a:	80 91 0a 01 	lds	r24, 0x010A
    2e7e:	63 e1       	ldi	r22, 0x13	; 19
    2e80:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    2e84:	80 e2       	ldi	r24, 0x20	; 32
    2e86:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ed 5b       	subi	r30, 0xBD	; 189
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a8 ec       	ldi	r26, 0xC8	; 200
    2e96:	b3 e4       	ldi	r27, 0x43	; 67
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	01 5c       	subi	r16, 0xC1	; 193
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ed 5b       	subi	r30, 0xBD	; 189
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	80 83       	st	Z, r24
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	a2 83       	std	Z+2, r26	; 0x02
    2ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ff 96       	adiw	r30, 0x3f	; 63
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e8       	ldi	r20, 0x80	; 128
    2ee0:	5f e3       	ldi	r21, 0x3F	; 63
    2ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee6:	88 23       	and	r24, r24
    2ee8:	2c f4       	brge	.+10     	; 0x2ef4 <left_To_Right+0x63c>
		__ticks = 1;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9e af       	std	Y+62, r25	; 0x3e
    2ef0:	8d af       	std	Y+61, r24	; 0x3d
    2ef2:	46 c0       	rjmp	.+140    	; 0x2f80 <left_To_Right+0x6c8>
	else if (__tmp > 65535)
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ff 96       	adiw	r30, 0x3f	; 63
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	3f ef       	ldi	r19, 0xFF	; 255
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	57 e4       	ldi	r21, 0x47	; 71
    2f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f0c:	18 16       	cp	r1, r24
    2f0e:	64 f5       	brge	.+88     	; 0x2f68 <left_To_Right+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f10:	fe 01       	movw	r30, r28
    2f12:	ed 5b       	subi	r30, 0xBD	; 189
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e2       	ldi	r20, 0x20	; 32
    2f24:	51 e4       	ldi	r21, 0x41	; 65
    2f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e af       	std	Y+62, r25	; 0x3e
    2f3c:	8d af       	std	Y+61, r24	; 0x3d
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <left_To_Right+0x6a6>
    2f40:	88 ec       	ldi	r24, 0xC8	; 200
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9c af       	std	Y+60, r25	; 0x3c
    2f46:	8b af       	std	Y+59, r24	; 0x3b
    2f48:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <left_To_Right+0x694>
    2f50:	9c af       	std	Y+60, r25	; 0x3c
    2f52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9e af       	std	Y+62, r25	; 0x3e
    2f5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <left_To_Right+0x688>
    2f66:	16 c0       	rjmp	.+44     	; 0x2f94 <left_To_Right+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ff 96       	adiw	r30, 0x3f	; 63
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	9e af       	std	Y+62, r25	; 0x3e
    2f7e:	8d af       	std	Y+61, r24	; 0x3d
    2f80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f84:	9a af       	std	Y+58, r25	; 0x3a
    2f86:	89 af       	std	Y+57, r24	; 0x39
    2f88:	89 ad       	ldd	r24, Y+57	; 0x39
    2f8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <left_To_Right+0x6d4>
    2f90:	9a af       	std	Y+58, r25	; 0x3a
    2f92:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(400);

			player2_x++;
    2f94:	80 91 0a 01 	lds	r24, 0x010A
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	80 93 0a 01 	sts	0x010A, r24

			if(player2_x==3)
    2f9e:	80 91 0a 01 	lds	r24, 0x010A
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	11 f4       	brne	.+4      	; 0x2faa <left_To_Right+0x6f2>
			{
				player2_x=0;
    2fa6:	10 92 0a 01 	sts	0x010A, r1
			}

			LCD_GoTo(player2_x, 19);
    2faa:	80 91 0a 01 	lds	r24, 0x010A
    2fae:	63 e1       	ldi	r22, 0x13	; 19
    2fb0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2fba:	c5 c1       	rjmp	.+906    	; 0x3346 <left_To_Right+0xa8e>
		}

		/*up player 2*/
		else if(DIO_ReadPin(PIND5)==0)
    2fbc:	8d e1       	ldi	r24, 0x1D	; 29
    2fbe:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    2fc2:	88 23       	and	r24, r24
    2fc4:	09 f0       	breq	.+2      	; 0x2fc8 <left_To_Right+0x710>
    2fc6:	8f c0       	rjmp	.+286    	; 0x30e6 <left_To_Right+0x82e>
		{
			LCD_GoTo(player2_x,19);
    2fc8:	80 91 0a 01 	lds	r24, 0x010A
    2fcc:	63 e1       	ldi	r22, 0x13	; 19
    2fce:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a8 ec       	ldi	r26, 0xC8	; 200
    2fde:	b3 e4       	ldi	r27, 0x43	; 67
    2fe0:	8d ab       	std	Y+53, r24	; 0x35
    2fe2:	9e ab       	std	Y+54, r25	; 0x36
    2fe4:	af ab       	std	Y+55, r26	; 0x37
    2fe6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fea:	7e a9       	ldd	r23, Y+54	; 0x36
    2fec:	8f a9       	ldd	r24, Y+55	; 0x37
    2fee:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a ef       	ldi	r20, 0xFA	; 250
    2ff6:	54 e4       	ldi	r21, 0x44	; 68
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	89 ab       	std	Y+49, r24	; 0x31
    3002:	9a ab       	std	Y+50, r25	; 0x32
    3004:	ab ab       	std	Y+51, r26	; 0x33
    3006:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3008:	69 a9       	ldd	r22, Y+49	; 0x31
    300a:	7a a9       	ldd	r23, Y+50	; 0x32
    300c:	8b a9       	ldd	r24, Y+51	; 0x33
    300e:	9c a9       	ldd	r25, Y+52	; 0x34
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	2c f4       	brge	.+10     	; 0x302a <left_To_Right+0x772>
		__ticks = 1;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	98 ab       	std	Y+48, r25	; 0x30
    3026:	8f a7       	std	Y+47, r24	; 0x2f
    3028:	3f c0       	rjmp	.+126    	; 0x30a8 <left_To_Right+0x7f0>
	else if (__tmp > 65535)
    302a:	69 a9       	ldd	r22, Y+49	; 0x31
    302c:	7a a9       	ldd	r23, Y+50	; 0x32
    302e:	8b a9       	ldd	r24, Y+51	; 0x33
    3030:	9c a9       	ldd	r25, Y+52	; 0x34
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	4f e7       	ldi	r20, 0x7F	; 127
    3038:	57 e4       	ldi	r21, 0x47	; 71
    303a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    303e:	18 16       	cp	r1, r24
    3040:	4c f5       	brge	.+82     	; 0x3094 <left_To_Right+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3042:	6d a9       	ldd	r22, Y+53	; 0x35
    3044:	7e a9       	ldd	r23, Y+54	; 0x36
    3046:	8f a9       	ldd	r24, Y+55	; 0x37
    3048:	98 ad       	ldd	r25, Y+56	; 0x38
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
    306a:	0f c0       	rjmp	.+30     	; 0x308a <left_To_Right+0x7d2>
    306c:	88 ec       	ldi	r24, 0xC8	; 200
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9e a7       	std	Y+46, r25	; 0x2e
    3072:	8d a7       	std	Y+45, r24	; 0x2d
    3074:	8d a5       	ldd	r24, Y+45	; 0x2d
    3076:	9e a5       	ldd	r25, Y+46	; 0x2e
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <left_To_Right+0x7c0>
    307c:	9e a7       	std	Y+46, r25	; 0x2e
    307e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	8f a5       	ldd	r24, Y+47	; 0x2f
    3082:	98 a9       	ldd	r25, Y+48	; 0x30
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	98 ab       	std	Y+48, r25	; 0x30
    3088:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308a:	8f a5       	ldd	r24, Y+47	; 0x2f
    308c:	98 a9       	ldd	r25, Y+48	; 0x30
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	69 f7       	brne	.-38     	; 0x306c <left_To_Right+0x7b4>
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <left_To_Right+0x804>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3094:	69 a9       	ldd	r22, Y+49	; 0x31
    3096:	7a a9       	ldd	r23, Y+50	; 0x32
    3098:	8b a9       	ldd	r24, Y+51	; 0x33
    309a:	9c a9       	ldd	r25, Y+52	; 0x34
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	98 ab       	std	Y+48, r25	; 0x30
    30a6:	8f a7       	std	Y+47, r24	; 0x2f
    30a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30aa:	98 a9       	ldd	r25, Y+48	; 0x30
    30ac:	9c a7       	std	Y+44, r25	; 0x2c
    30ae:	8b a7       	std	Y+43, r24	; 0x2b
    30b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <left_To_Right+0x7fc>
    30b8:	9c a7       	std	Y+44, r25	; 0x2c
    30ba:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(400);

			if(player2_x==0)
    30bc:	80 91 0a 01 	lds	r24, 0x010A
    30c0:	88 23       	and	r24, r24
    30c2:	19 f4       	brne	.+6      	; 0x30ca <left_To_Right+0x812>
			{
				player2_x=3;
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	80 93 0a 01 	sts	0x010A, r24
			}

			player2_x--;
    30ca:	80 91 0a 01 	lds	r24, 0x010A
    30ce:	81 50       	subi	r24, 0x01	; 1
    30d0:	80 93 0a 01 	sts	0x010A, r24

			LCD_GoTo(player2_x, 19);
    30d4:	80 91 0a 01 	lds	r24, 0x010A
    30d8:	63 e1       	ldi	r22, 0x13	; 19
    30da:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    30e4:	30 c1       	rjmp	.+608    	; 0x3346 <left_To_Right+0xa8e>
		}


		/*Down Ball*/
		else if(DIO_ReadPin(PINA3)==0)
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    30ec:	88 23       	and	r24, r24
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <left_To_Right+0x83a>
    30f0:	92 c0       	rjmp	.+292    	; 0x3216 <left_To_Right+0x95e>
		{
			LCD_GoTo(ball_x, ball_y);
    30f2:	80 91 0b 01 	lds	r24, 0x010B
    30f6:	90 91 d6 00 	lds	r25, 0x00D6
    30fa:	69 2f       	mov	r22, r25
    30fc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3100:	80 e2       	ldi	r24, 0x20	; 32
    3102:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	a8 ec       	ldi	r26, 0xC8	; 200
    310c:	b3 e4       	ldi	r27, 0x43	; 67
    310e:	8f a3       	std	Y+39, r24	; 0x27
    3110:	98 a7       	std	Y+40, r25	; 0x28
    3112:	a9 a7       	std	Y+41, r26	; 0x29
    3114:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3116:	6f a1       	ldd	r22, Y+39	; 0x27
    3118:	78 a5       	ldd	r23, Y+40	; 0x28
    311a:	89 a5       	ldd	r24, Y+41	; 0x29
    311c:	9a a5       	ldd	r25, Y+42	; 0x2a
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	8b a3       	std	Y+35, r24	; 0x23
    3130:	9c a3       	std	Y+36, r25	; 0x24
    3132:	ad a3       	std	Y+37, r26	; 0x25
    3134:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3136:	6b a1       	ldd	r22, Y+35	; 0x23
    3138:	7c a1       	ldd	r23, Y+36	; 0x24
    313a:	8d a1       	ldd	r24, Y+37	; 0x25
    313c:	9e a1       	ldd	r25, Y+38	; 0x26
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	2c f4       	brge	.+10     	; 0x3158 <left_To_Right+0x8a0>
		__ticks = 1;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	9a a3       	std	Y+34, r25	; 0x22
    3154:	89 a3       	std	Y+33, r24	; 0x21
    3156:	3f c0       	rjmp	.+126    	; 0x31d6 <left_To_Right+0x91e>
	else if (__tmp > 65535)
    3158:	6b a1       	ldd	r22, Y+35	; 0x23
    315a:	7c a1       	ldd	r23, Y+36	; 0x24
    315c:	8d a1       	ldd	r24, Y+37	; 0x25
    315e:	9e a1       	ldd	r25, Y+38	; 0x26
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	4c f5       	brge	.+82     	; 0x31c2 <left_To_Right+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3170:	6f a1       	ldd	r22, Y+39	; 0x27
    3172:	78 a5       	ldd	r23, Y+40	; 0x28
    3174:	89 a5       	ldd	r24, Y+41	; 0x29
    3176:	9a a5       	ldd	r25, Y+42	; 0x2a
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9a a3       	std	Y+34, r25	; 0x22
    3196:	89 a3       	std	Y+33, r24	; 0x21
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <left_To_Right+0x900>
    319a:	88 ec       	ldi	r24, 0xC8	; 200
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	98 a3       	std	Y+32, r25	; 0x20
    31a0:	8f 8f       	std	Y+31, r24	; 0x1f
    31a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31a4:	98 a1       	ldd	r25, Y+32	; 0x20
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <left_To_Right+0x8ee>
    31aa:	98 a3       	std	Y+32, r25	; 0x20
    31ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	89 a1       	ldd	r24, Y+33	; 0x21
    31b0:	9a a1       	ldd	r25, Y+34	; 0x22
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9a a3       	std	Y+34, r25	; 0x22
    31b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ba:	9a a1       	ldd	r25, Y+34	; 0x22
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <left_To_Right+0x8e2>
    31c0:	14 c0       	rjmp	.+40     	; 0x31ea <left_To_Right+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	6b a1       	ldd	r22, Y+35	; 0x23
    31c4:	7c a1       	ldd	r23, Y+36	; 0x24
    31c6:	8d a1       	ldd	r24, Y+37	; 0x25
    31c8:	9e a1       	ldd	r25, Y+38	; 0x26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9a a3       	std	Y+34, r25	; 0x22
    31d4:	89 a3       	std	Y+33, r24	; 0x21
    31d6:	89 a1       	ldd	r24, Y+33	; 0x21
    31d8:	9a a1       	ldd	r25, Y+34	; 0x22
    31da:	9e 8f       	std	Y+30, r25	; 0x1e
    31dc:	8d 8f       	std	Y+29, r24	; 0x1d
    31de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <left_To_Right+0x92a>
    31e6:	9e 8f       	std	Y+30, r25	; 0x1e
    31e8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(400);

			ball_x++;
    31ea:	80 91 0b 01 	lds	r24, 0x010B
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	80 93 0b 01 	sts	0x010B, r24

			if(ball_x==3)
    31f4:	80 91 0b 01 	lds	r24, 0x010B
    31f8:	83 30       	cpi	r24, 0x03	; 3
    31fa:	11 f4       	brne	.+4      	; 0x3200 <left_To_Right+0x948>
			{
				ball_x=0;
    31fc:	10 92 0b 01 	sts	0x010B, r1
			}

			LCD_GoTo(ball_x,ball_y);
    3200:	80 91 0b 01 	lds	r24, 0x010B
    3204:	90 91 d6 00 	lds	r25, 0x00D6
    3208:	69 2f       	mov	r22, r25
    320a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(1);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3214:	98 c0       	rjmp	.+304    	; 0x3346 <left_To_Right+0xa8e>
		}

		/*Up Ball*/
		else if(DIO_ReadPin(PINA2)==0)
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    321c:	88 23       	and	r24, r24
    321e:	09 f0       	breq	.+2      	; 0x3222 <left_To_Right+0x96a>
    3220:	92 c0       	rjmp	.+292    	; 0x3346 <left_To_Right+0xa8e>
		{
			LCD_GoTo(ball_x, ball_y);
    3222:	80 91 0b 01 	lds	r24, 0x010B
    3226:	90 91 d6 00 	lds	r25, 0x00D6
    322a:	69 2f       	mov	r22, r25
    322c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3230:	80 e2       	ldi	r24, 0x20	; 32
    3232:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a8 ec       	ldi	r26, 0xC8	; 200
    323c:	b3 e4       	ldi	r27, 0x43	; 67
    323e:	89 8f       	std	Y+25, r24	; 0x19
    3240:	9a 8f       	std	Y+26, r25	; 0x1a
    3242:	ab 8f       	std	Y+27, r26	; 0x1b
    3244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	69 8d       	ldd	r22, Y+25	; 0x19
    3248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    324a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a ef       	ldi	r20, 0xFA	; 250
    3254:	54 e4       	ldi	r21, 0x44	; 68
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8d 8b       	std	Y+21, r24	; 0x15
    3260:	9e 8b       	std	Y+22, r25	; 0x16
    3262:	af 8b       	std	Y+23, r26	; 0x17
    3264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <left_To_Right+0x9d0>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <left_To_Right+0xa4e>
	else if (__tmp > 65535)
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <left_To_Right+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	69 8d       	ldd	r22, Y+25	; 0x19
    32a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9c 8b       	std	Y+20, r25	; 0x14
    32c6:	8b 8b       	std	Y+19, r24	; 0x13
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <left_To_Right+0xa30>
    32ca:	88 ec       	ldi	r24, 0xC8	; 200
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9a 8b       	std	Y+18, r25	; 0x12
    32d0:	89 8b       	std	Y+17, r24	; 0x11
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	9a 89       	ldd	r25, Y+18	; 0x12
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <left_To_Right+0xa1e>
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ea:	9c 89       	ldd	r25, Y+20	; 0x14
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <left_To_Right+0xa12>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <left_To_Right+0xa62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6d 89       	ldd	r22, Y+21	; 0x15
    32f4:	7e 89       	ldd	r23, Y+22	; 0x16
    32f6:	8f 89       	ldd	r24, Y+23	; 0x17
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	98 8b       	std	Y+16, r25	; 0x10
    330c:	8f 87       	std	Y+15, r24	; 0x0f
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	98 89       	ldd	r25, Y+16	; 0x10
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <left_To_Right+0xa5a>
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(400);

			if(ball_x==0)
    331a:	80 91 0b 01 	lds	r24, 0x010B
    331e:	88 23       	and	r24, r24
    3320:	19 f4       	brne	.+6      	; 0x3328 <left_To_Right+0xa70>
			{
				ball_x=3;
    3322:	83 e0       	ldi	r24, 0x03	; 3
    3324:	80 93 0b 01 	sts	0x010B, r24
			}

			ball_x--;
    3328:	80 91 0b 01 	lds	r24, 0x010B
    332c:	81 50       	subi	r24, 0x01	; 1
    332e:	80 93 0b 01 	sts	0x010B, r24

			LCD_GoTo(ball_x,ball_y);
    3332:	80 91 0b 01 	lds	r24, 0x010B
    3336:	90 91 d6 00 	lds	r25, 0x00D6
    333a:	69 2f       	mov	r22, r25
    333c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(1);
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
		}
		else{}

		if(score1==3 || score2==3)
    3346:	80 91 0c 01 	lds	r24, 0x010C
    334a:	83 30       	cpi	r24, 0x03	; 3
    334c:	29 f0       	breq	.+10     	; 0x3358 <left_To_Right+0xaa0>
    334e:	80 91 0d 01 	lds	r24, 0x010D
    3352:	83 30       	cpi	r24, 0x03	; 3
    3354:	09 f0       	breq	.+2      	; 0x3358 <left_To_Right+0xaa0>
    3356:	74 c0       	rjmp	.+232    	; 0x3440 <left_To_Right+0xb88>
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	aa ef       	ldi	r26, 0xFA	; 250
    335e:	b3 e4       	ldi	r27, 0x43	; 67
    3360:	8b 87       	std	Y+11, r24	; 0x0b
    3362:	9c 87       	std	Y+12, r25	; 0x0c
    3364:	ad 87       	std	Y+13, r26	; 0x0d
    3366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3368:	6b 85       	ldd	r22, Y+11	; 0x0b
    336a:	7c 85       	ldd	r23, Y+12	; 0x0c
    336c:	8d 85       	ldd	r24, Y+13	; 0x0d
    336e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4a ef       	ldi	r20, 0xFA	; 250
    3376:	54 e4       	ldi	r21, 0x44	; 68
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	8f 83       	std	Y+7, r24	; 0x07
    3382:	98 87       	std	Y+8, r25	; 0x08
    3384:	a9 87       	std	Y+9, r26	; 0x09
    3386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	5f e3       	ldi	r21, 0x3F	; 63
    3398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339c:	88 23       	and	r24, r24
    339e:	2c f4       	brge	.+10     	; 0x33aa <left_To_Right+0xaf2>
		__ticks = 1;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
    33a8:	3f c0       	rjmp	.+126    	; 0x3428 <left_To_Right+0xb70>
	else if (__tmp > 65535)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	4f e7       	ldi	r20, 0x7F	; 127
    33b8:	57 e4       	ldi	r21, 0x47	; 71
    33ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33be:	18 16       	cp	r1, r24
    33c0:	4c f5       	brge	.+82     	; 0x3414 <left_To_Right+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9e 83       	std	Y+6, r25	; 0x06
    33e8:	8d 83       	std	Y+5, r24	; 0x05
    33ea:	0f c0       	rjmp	.+30     	; 0x340a <left_To_Right+0xb52>
    33ec:	88 ec       	ldi	r24, 0xC8	; 200
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9c 83       	std	Y+4, r25	; 0x04
    33f2:	8b 83       	std	Y+3, r24	; 0x03
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	9c 81       	ldd	r25, Y+4	; 0x04
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <left_To_Right+0xb40>
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	69 f7       	brne	.-38     	; 0x33ec <left_To_Right+0xb34>
    3412:	14 c0       	rjmp	.+40     	; 0x343c <left_To_Right+0xb84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	9e 83       	std	Y+6, r25	; 0x06
    3426:	8d 83       	std	Y+5, r24	; 0x05
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <left_To_Right+0xb7c>
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			pingpong_end();
    343c:	0e 94 b7 20 	call	0x416e	; 0x416e <pingpong_end>
 * 				Function Left to Right
 *
 ****************************************************/
void left_To_Right(void)
{
	for(ball_y=1;ball_y<=19;ball_y++)
    3440:	80 91 d6 00 	lds	r24, 0x00D6
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	80 93 d6 00 	sts	0x00D6, r24
    344a:	80 91 d6 00 	lds	r24, 0x00D6
    344e:	84 31       	cpi	r24, 0x14	; 20
    3450:	08 f4       	brcc	.+2      	; 0x3454 <left_To_Right+0xb9c>
    3452:	43 ca       	rjmp	.-2938   	; 0x28da <left_To_Right+0x22>
		}
		else{}

	}/*End of for loop 1*/

}/*End of the function*/
    3454:	c0 59       	subi	r28, 0x90	; 144
    3456:	df 4f       	sbci	r29, 0xFF	; 255
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	08 95       	ret

0000346c <Right_To_Left>:
 *
 * 				Function Right to left
 *
 ****************************************************/
void Right_To_Left(void)
{
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	c0 57       	subi	r28, 0x70	; 112
    347a:	d0 40       	sbci	r29, 0x00	; 0
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	cd bf       	out	0x3d, r28	; 61
	for(ball_y=17;ball_y>0;ball_y--)
    3486:	81 e1       	ldi	r24, 0x11	; 17
    3488:	80 93 d6 00 	sts	0x00D6, r24
    348c:	b8 c5       	rjmp	.+2928   	; 0x3ffe <Right_To_Left+0xb92>
	{
		if(ball_y==0)
    348e:	80 91 d6 00 	lds	r24, 0x00D6
    3492:	88 23       	and	r24, r24
    3494:	79 f4       	brne	.+30     	; 0x34b4 <Right_To_Left+0x48>
		{
			LCD_GoTo(3, 17);
    3496:	83 e0       	ldi	r24, 0x03	; 3
    3498:	61 e1       	ldi	r22, 0x11	; 17
    349a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteNumber(score2);
    349e:	80 91 0d 01 	lds	r24, 0x010D
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e0       	ldi	r26, 0x00	; 0
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>
    34b2:	aa c5       	rjmp	.+2900   	; 0x4008 <Right_To_Left+0xb9c>
			break;
		}
		LCD_Clear();
    34b4:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_Clear>

		LCD_GoTo(3, 1);
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteString("P1:          P2:");
    34c0:	80 e6       	ldi	r24, 0x60	; 96
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>

		/*Printing score1*/
		LCD_GoTo(3, 4);
    34c8:	83 e0       	ldi	r24, 0x03	; 3
    34ca:	64 e0       	ldi	r22, 0x04	; 4
    34cc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteNumber(score1);
    34d0:	80 91 0c 01 	lds	r24, 0x010C
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 e0       	ldi	r26, 0x00	; 0
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>

		/*Printing score2*/
		LCD_GoTo(3, 17);
    34e4:	83 e0       	ldi	r24, 0x03	; 3
    34e6:	61 e1       	ldi	r22, 0x11	; 17
    34e8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteNumber(score2);
    34ec:	80 91 0d 01 	lds	r24, 0x010D
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	a0 e0       	ldi	r26, 0x00	; 0
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_WriteNumber>

		/*Printing Player1*/
		LCD_GoTo(player1_x,0);
    3500:	80 91 08 01 	lds	r24, 0x0108
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(0);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
		/*Printing Player 2*/
		LCD_GoTo(player2_x,19);
    3510:	80 91 0a 01 	lds	r24, 0x010A
    3514:	63 e1       	ldi	r22, 0x13	; 19
    3516:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(0);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>

		/*Checking on the scores*/
		if( (ball_y==1) && (ball_x !=player1_x ))
    3520:	80 91 d6 00 	lds	r24, 0x00D6
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	59 f4       	brne	.+22     	; 0x353e <Right_To_Left+0xd2>
    3528:	90 91 0b 01 	lds	r25, 0x010B
    352c:	80 91 08 01 	lds	r24, 0x0108
    3530:	98 17       	cp	r25, r24
    3532:	29 f0       	breq	.+10     	; 0x353e <Right_To_Left+0xd2>
		{
			score2++;
    3534:	80 91 0d 01 	lds	r24, 0x010D
    3538:	8f 5f       	subi	r24, 0xFF	; 255
    353a:	80 93 0d 01 	sts	0x010D, r24
		}
		else{}


		/*Printing the ball*/
		LCD_GoTo(ball_x,ball_y);
    353e:	80 91 0b 01 	lds	r24, 0x010B
    3542:	90 91 d6 00 	lds	r25, 0x00D6
    3546:	69 2f       	mov	r22, r25
    3548:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
		LCD_WriteChar(1);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3552:	fe 01       	movw	r30, r28
    3554:	e3 59       	subi	r30, 0x93	; 147
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a8 ec       	ldi	r26, 0xC8	; 200
    355e:	b3 e4       	ldi	r27, 0x43	; 67
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	a2 83       	std	Z+2, r26	; 0x02
    3566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3568:	8e 01       	movw	r16, r28
    356a:	07 59       	subi	r16, 0x97	; 151
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	fe 01       	movw	r30, r28
    3570:	e3 59       	subi	r30, 0x93	; 147
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	4a ef       	ldi	r20, 0xFA	; 250
    3582:	54 e4       	ldi	r21, 0x44	; 68
    3584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	f8 01       	movw	r30, r16
    358e:	80 83       	st	Z, r24
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	a2 83       	std	Z+2, r26	; 0x02
    3594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3596:	fe 01       	movw	r30, r28
    3598:	e7 59       	subi	r30, 0x97	; 151
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e8       	ldi	r20, 0x80	; 128
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b0:	88 23       	and	r24, r24
    35b2:	44 f4       	brge	.+16     	; 0x35c4 <Right_To_Left+0x158>
		__ticks = 1;
    35b4:	fe 01       	movw	r30, r28
    35b6:	e9 59       	subi	r30, 0x99	; 153
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
    35c2:	64 c0       	rjmp	.+200    	; 0x368c <Right_To_Left+0x220>
	else if (__tmp > 65535)
    35c4:	fe 01       	movw	r30, r28
    35c6:	e7 59       	subi	r30, 0x97	; 151
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	60 81       	ld	r22, Z
    35cc:	71 81       	ldd	r23, Z+1	; 0x01
    35ce:	82 81       	ldd	r24, Z+2	; 0x02
    35d0:	93 81       	ldd	r25, Z+3	; 0x03
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	3f ef       	ldi	r19, 0xFF	; 255
    35d6:	4f e7       	ldi	r20, 0x7F	; 127
    35d8:	57 e4       	ldi	r21, 0x47	; 71
    35da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35de:	18 16       	cp	r1, r24
    35e0:	0c f0       	brlt	.+2      	; 0x35e4 <Right_To_Left+0x178>
    35e2:	43 c0       	rjmp	.+134    	; 0x366a <Right_To_Left+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e4:	fe 01       	movw	r30, r28
    35e6:	e3 59       	subi	r30, 0x93	; 147
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e2       	ldi	r20, 0x20	; 32
    35f8:	51 e4       	ldi	r21, 0x41	; 65
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	8e 01       	movw	r16, r28
    3604:	09 59       	subi	r16, 0x99	; 153
    3606:	1f 4f       	sbci	r17, 0xFF	; 255
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	f8 01       	movw	r30, r16
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	80 83       	st	Z, r24
    361a:	1f c0       	rjmp	.+62     	; 0x365a <Right_To_Left+0x1ee>
    361c:	fe 01       	movw	r30, r28
    361e:	eb 59       	subi	r30, 0x9B	; 155
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	88 ec       	ldi	r24, 0xC8	; 200
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
    362a:	fe 01       	movw	r30, r28
    362c:	eb 59       	subi	r30, 0x9B	; 155
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	80 81       	ld	r24, Z
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <Right_To_Left+0x1c8>
    3638:	fe 01       	movw	r30, r28
    363a:	eb 59       	subi	r30, 0x9B	; 155
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	91 83       	std	Z+1, r25	; 0x01
    3640:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	de 01       	movw	r26, r28
    3644:	a9 59       	subi	r26, 0x99	; 153
    3646:	bf 4f       	sbci	r27, 0xFF	; 255
    3648:	fe 01       	movw	r30, r28
    364a:	e9 59       	subi	r30, 0x99	; 153
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	11 96       	adiw	r26, 0x01	; 1
    3656:	9c 93       	st	X, r25
    3658:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365a:	fe 01       	movw	r30, r28
    365c:	e9 59       	subi	r30, 0x99	; 153
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	91 81       	ldd	r25, Z+1	; 0x01
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	d1 f6       	brne	.-76     	; 0x361c <Right_To_Left+0x1b0>
    3668:	27 c0       	rjmp	.+78     	; 0x36b8 <Right_To_Left+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366a:	8e 01       	movw	r16, r28
    366c:	09 59       	subi	r16, 0x99	; 153
    366e:	1f 4f       	sbci	r17, 0xFF	; 255
    3670:	fe 01       	movw	r30, r28
    3672:	e7 59       	subi	r30, 0x97	; 151
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	60 81       	ld	r22, Z
    3678:	71 81       	ldd	r23, Z+1	; 0x01
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	f8 01       	movw	r30, r16
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	80 83       	st	Z, r24
    368c:	de 01       	movw	r26, r28
    368e:	ad 59       	subi	r26, 0x9D	; 157
    3690:	bf 4f       	sbci	r27, 0xFF	; 255
    3692:	fe 01       	movw	r30, r28
    3694:	e9 59       	subi	r30, 0x99	; 153
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 81       	ld	r24, Z
    369a:	91 81       	ldd	r25, Z+1	; 0x01
    369c:	8d 93       	st	X+, r24
    369e:	9c 93       	st	X, r25
    36a0:	fe 01       	movw	r30, r28
    36a2:	ed 59       	subi	r30, 0x9D	; 157
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <Right_To_Left+0x23e>
    36ae:	fe 01       	movw	r30, r28
    36b0:	ed 59       	subi	r30, 0x9D	; 157
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
		_delay_ms(400);
		LCD_ClearPosition(ball_x,ball_y,1);
    36b8:	80 91 0b 01 	lds	r24, 0x010B
    36bc:	90 91 d6 00 	lds	r25, 0x00D6
    36c0:	69 2f       	mov	r22, r25
    36c2:	41 e0       	ldi	r20, 0x01	; 1
    36c4:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_ClearPosition>

		/*Up player 1*/
		if(DIO_ReadPin(PIND6)==0)
    36c8:	8e e1       	ldi	r24, 0x1E	; 30
    36ca:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    36ce:	88 23       	and	r24, r24
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <Right_To_Left+0x268>
    36d2:	d1 c0       	rjmp	.+418    	; 0x3876 <Right_To_Left+0x40a>
		{
			LCD_GoTo(player1_x, 0);
    36d4:	80 91 08 01 	lds	r24, 0x0108
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    36de:	80 e2       	ldi	r24, 0x20	; 32
    36e0:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    36e4:	fe 01       	movw	r30, r28
    36e6:	e1 5a       	subi	r30, 0xA1	; 161
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a8 ec       	ldi	r26, 0xC8	; 200
    36f0:	b3 e4       	ldi	r27, 0x43	; 67
    36f2:	80 83       	st	Z, r24
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	a2 83       	std	Z+2, r26	; 0x02
    36f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	8e 01       	movw	r16, r28
    36fc:	05 5a       	subi	r16, 0xA5	; 165
    36fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	e1 5a       	subi	r30, 0xA1	; 161
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	4a ef       	ldi	r20, 0xFA	; 250
    3714:	54 e4       	ldi	r21, 0x44	; 68
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	f8 01       	movw	r30, r16
    3720:	80 83       	st	Z, r24
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	a2 83       	std	Z+2, r26	; 0x02
    3726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3728:	fe 01       	movw	r30, r28
    372a:	e5 5a       	subi	r30, 0xA5	; 165
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e8       	ldi	r20, 0x80	; 128
    373c:	5f e3       	ldi	r21, 0x3F	; 63
    373e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3742:	88 23       	and	r24, r24
    3744:	44 f4       	brge	.+16     	; 0x3756 <Right_To_Left+0x2ea>
		__ticks = 1;
    3746:	fe 01       	movw	r30, r28
    3748:	e7 5a       	subi	r30, 0xA7	; 167
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
    3754:	64 c0       	rjmp	.+200    	; 0x381e <Right_To_Left+0x3b2>
	else if (__tmp > 65535)
    3756:	fe 01       	movw	r30, r28
    3758:	e5 5a       	subi	r30, 0xA5	; 165
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	60 81       	ld	r22, Z
    375e:	71 81       	ldd	r23, Z+1	; 0x01
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	3f ef       	ldi	r19, 0xFF	; 255
    3768:	4f e7       	ldi	r20, 0x7F	; 127
    376a:	57 e4       	ldi	r21, 0x47	; 71
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3770:	18 16       	cp	r1, r24
    3772:	0c f0       	brlt	.+2      	; 0x3776 <Right_To_Left+0x30a>
    3774:	43 c0       	rjmp	.+134    	; 0x37fc <Right_To_Left+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3776:	fe 01       	movw	r30, r28
    3778:	e1 5a       	subi	r30, 0xA1	; 161
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	60 81       	ld	r22, Z
    377e:	71 81       	ldd	r23, Z+1	; 0x01
    3780:	82 81       	ldd	r24, Z+2	; 0x02
    3782:	93 81       	ldd	r25, Z+3	; 0x03
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e2       	ldi	r20, 0x20	; 32
    378a:	51 e4       	ldi	r21, 0x41	; 65
    378c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	8e 01       	movw	r16, r28
    3796:	07 5a       	subi	r16, 0xA7	; 167
    3798:	1f 4f       	sbci	r17, 0xFF	; 255
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	f8 01       	movw	r30, r16
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
    37ac:	1f c0       	rjmp	.+62     	; 0x37ec <Right_To_Left+0x380>
    37ae:	fe 01       	movw	r30, r28
    37b0:	e9 5a       	subi	r30, 0xA9	; 169
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	88 ec       	ldi	r24, 0xC8	; 200
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
    37bc:	fe 01       	movw	r30, r28
    37be:	e9 5a       	subi	r30, 0xA9	; 169
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	91 81       	ldd	r25, Z+1	; 0x01
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <Right_To_Left+0x35a>
    37ca:	fe 01       	movw	r30, r28
    37cc:	e9 5a       	subi	r30, 0xA9	; 169
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	de 01       	movw	r26, r28
    37d6:	a7 5a       	subi	r26, 0xA7	; 167
    37d8:	bf 4f       	sbci	r27, 0xFF	; 255
    37da:	fe 01       	movw	r30, r28
    37dc:	e7 5a       	subi	r30, 0xA7	; 167
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	11 96       	adiw	r26, 0x01	; 1
    37e8:	9c 93       	st	X, r25
    37ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ec:	fe 01       	movw	r30, r28
    37ee:	e7 5a       	subi	r30, 0xA7	; 167
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 81       	ld	r24, Z
    37f4:	91 81       	ldd	r25, Z+1	; 0x01
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	d1 f6       	brne	.-76     	; 0x37ae <Right_To_Left+0x342>
    37fa:	28 c0       	rjmp	.+80     	; 0x384c <Right_To_Left+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fc:	8e 01       	movw	r16, r28
    37fe:	07 5a       	subi	r16, 0xA7	; 167
    3800:	1f 4f       	sbci	r17, 0xFF	; 255
    3802:	fe 01       	movw	r30, r28
    3804:	e5 5a       	subi	r30, 0xA5	; 165
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	60 81       	ld	r22, Z
    380a:	71 81       	ldd	r23, Z+1	; 0x01
    380c:	82 81       	ldd	r24, Z+2	; 0x02
    380e:	93 81       	ldd	r25, Z+3	; 0x03
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	f8 01       	movw	r30, r16
    381a:	91 83       	std	Z+1, r25	; 0x01
    381c:	80 83       	st	Z, r24
    381e:	de 01       	movw	r26, r28
    3820:	ab 5a       	subi	r26, 0xAB	; 171
    3822:	bf 4f       	sbci	r27, 0xFF	; 255
    3824:	fe 01       	movw	r30, r28
    3826:	e7 5a       	subi	r30, 0xA7	; 167
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	11 96       	adiw	r26, 0x01	; 1
    3830:	9c 93       	st	X, r25
    3832:	8e 93       	st	-X, r24
    3834:	fe 01       	movw	r30, r28
    3836:	eb 5a       	subi	r30, 0xAB	; 171
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <Right_To_Left+0x3d2>
    3842:	fe 01       	movw	r30, r28
    3844:	eb 5a       	subi	r30, 0xAB	; 171
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	91 83       	std	Z+1, r25	; 0x01
    384a:	80 83       	st	Z, r24
			_delay_ms(400);

			if(player1_x==0)
    384c:	80 91 08 01 	lds	r24, 0x0108
    3850:	88 23       	and	r24, r24
    3852:	19 f4       	brne	.+6      	; 0x385a <Right_To_Left+0x3ee>
			{
				player1_x=3;
    3854:	83 e0       	ldi	r24, 0x03	; 3
    3856:	80 93 08 01 	sts	0x0108, r24
			}

			player1_x--;
    385a:	80 91 08 01 	lds	r24, 0x0108
    385e:	81 50       	subi	r24, 0x01	; 1
    3860:	80 93 08 01 	sts	0x0108, r24

			LCD_GoTo(player1_x, 0);
    3864:	80 91 08 01 	lds	r24, 0x0108
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3874:	42 c3       	rjmp	.+1668   	; 0x3efa <Right_To_Left+0xa8e>
		}
		/*down player1*/
		else if(DIO_ReadPin(PIND7)==0)
    3876:	8f e1       	ldi	r24, 0x1F	; 31
    3878:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    387c:	88 23       	and	r24, r24
    387e:	09 f0       	breq	.+2      	; 0x3882 <Right_To_Left+0x416>
    3880:	d0 c0       	rjmp	.+416    	; 0x3a22 <Right_To_Left+0x5b6>
		{
			LCD_GoTo(player1_x, 0);
    3882:	80 91 08 01 	lds	r24, 0x0108
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    388c:	80 e2       	ldi	r24, 0x20	; 32
    388e:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3892:	fe 01       	movw	r30, r28
    3894:	ef 5a       	subi	r30, 0xAF	; 175
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a8 ec       	ldi	r26, 0xC8	; 200
    389e:	b3 e4       	ldi	r27, 0x43	; 67
    38a0:	80 83       	st	Z, r24
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	a2 83       	std	Z+2, r26	; 0x02
    38a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	8e 01       	movw	r16, r28
    38aa:	03 5b       	subi	r16, 0xB3	; 179
    38ac:	1f 4f       	sbci	r17, 0xFF	; 255
    38ae:	fe 01       	movw	r30, r28
    38b0:	ef 5a       	subi	r30, 0xAF	; 175
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	4a ef       	ldi	r20, 0xFA	; 250
    38c2:	54 e4       	ldi	r21, 0x44	; 68
    38c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	f8 01       	movw	r30, r16
    38ce:	80 83       	st	Z, r24
    38d0:	91 83       	std	Z+1, r25	; 0x01
    38d2:	a2 83       	std	Z+2, r26	; 0x02
    38d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38d6:	fe 01       	movw	r30, r28
    38d8:	e3 5b       	subi	r30, 0xB3	; 179
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	44 f4       	brge	.+16     	; 0x3904 <Right_To_Left+0x498>
		__ticks = 1;
    38f4:	fe 01       	movw	r30, r28
    38f6:	e5 5b       	subi	r30, 0xB5	; 181
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	80 83       	st	Z, r24
    3902:	64 c0       	rjmp	.+200    	; 0x39cc <Right_To_Left+0x560>
	else if (__tmp > 65535)
    3904:	fe 01       	movw	r30, r28
    3906:	e3 5b       	subi	r30, 0xB3	; 179
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	3f ef       	ldi	r19, 0xFF	; 255
    3916:	4f e7       	ldi	r20, 0x7F	; 127
    3918:	57 e4       	ldi	r21, 0x47	; 71
    391a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    391e:	18 16       	cp	r1, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <Right_To_Left+0x4b8>
    3922:	43 c0       	rjmp	.+134    	; 0x39aa <Right_To_Left+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3924:	fe 01       	movw	r30, r28
    3926:	ef 5a       	subi	r30, 0xAF	; 175
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e2       	ldi	r20, 0x20	; 32
    3938:	51 e4       	ldi	r21, 0x41	; 65
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8e 01       	movw	r16, r28
    3944:	05 5b       	subi	r16, 0xB5	; 181
    3946:	1f 4f       	sbci	r17, 0xFF	; 255
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	f8 01       	movw	r30, r16
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	1f c0       	rjmp	.+62     	; 0x399a <Right_To_Left+0x52e>
    395c:	fe 01       	movw	r30, r28
    395e:	e7 5b       	subi	r30, 0xB7	; 183
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
    396a:	fe 01       	movw	r30, r28
    396c:	e7 5b       	subi	r30, 0xB7	; 183
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <Right_To_Left+0x508>
    3978:	fe 01       	movw	r30, r28
    397a:	e7 5b       	subi	r30, 0xB7	; 183
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3982:	de 01       	movw	r26, r28
    3984:	a5 5b       	subi	r26, 0xB5	; 181
    3986:	bf 4f       	sbci	r27, 0xFF	; 255
    3988:	fe 01       	movw	r30, r28
    398a:	e5 5b       	subi	r30, 0xB5	; 181
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	11 96       	adiw	r26, 0x01	; 1
    3996:	9c 93       	st	X, r25
    3998:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399a:	fe 01       	movw	r30, r28
    399c:	e5 5b       	subi	r30, 0xB5	; 181
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	d1 f6       	brne	.-76     	; 0x395c <Right_To_Left+0x4f0>
    39a8:	28 c0       	rjmp	.+80     	; 0x39fa <Right_To_Left+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39aa:	8e 01       	movw	r16, r28
    39ac:	05 5b       	subi	r16, 0xB5	; 181
    39ae:	1f 4f       	sbci	r17, 0xFF	; 255
    39b0:	fe 01       	movw	r30, r28
    39b2:	e3 5b       	subi	r30, 0xB3	; 179
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	f8 01       	movw	r30, r16
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	80 83       	st	Z, r24
    39cc:	de 01       	movw	r26, r28
    39ce:	a9 5b       	subi	r26, 0xB9	; 185
    39d0:	bf 4f       	sbci	r27, 0xFF	; 255
    39d2:	fe 01       	movw	r30, r28
    39d4:	e5 5b       	subi	r30, 0xB5	; 181
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	11 96       	adiw	r26, 0x01	; 1
    39de:	9c 93       	st	X, r25
    39e0:	8e 93       	st	-X, r24
    39e2:	fe 01       	movw	r30, r28
    39e4:	e9 5b       	subi	r30, 0xB9	; 185
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <Right_To_Left+0x580>
    39f0:	fe 01       	movw	r30, r28
    39f2:	e9 5b       	subi	r30, 0xB9	; 185
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
			_delay_ms(400);

			player1_x++;
    39fa:	80 91 08 01 	lds	r24, 0x0108
    39fe:	8f 5f       	subi	r24, 0xFF	; 255
    3a00:	80 93 08 01 	sts	0x0108, r24

			if(player1_x==3)
    3a04:	80 91 08 01 	lds	r24, 0x0108
    3a08:	83 30       	cpi	r24, 0x03	; 3
    3a0a:	11 f4       	brne	.+4      	; 0x3a10 <Right_To_Left+0x5a4>
			{
				player1_x=0;
    3a0c:	10 92 08 01 	sts	0x0108, r1
			}


			LCD_GoTo(player1_x, 0);
    3a10:	80 91 08 01 	lds	r24, 0x0108
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3a20:	6c c2       	rjmp	.+1240   	; 0x3efa <Right_To_Left+0xa8e>
		}

		/*down player 2*/
		else if(DIO_ReadPin(PIND3)==0)
    3a22:	8b e1       	ldi	r24, 0x1B	; 27
    3a24:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    3a28:	88 23       	and	r24, r24
    3a2a:	09 f0       	breq	.+2      	; 0x3a2e <Right_To_Left+0x5c2>
    3a2c:	a1 c0       	rjmp	.+322    	; 0x3b70 <Right_To_Left+0x704>
		{
			LCD_GoTo(player2_x,19);
    3a2e:	80 91 0a 01 	lds	r24, 0x010A
    3a32:	63 e1       	ldi	r22, 0x13	; 19
    3a34:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3a38:	80 e2       	ldi	r24, 0x20	; 32
    3a3a:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3a3e:	fe 01       	movw	r30, r28
    3a40:	ed 5b       	subi	r30, 0xBD	; 189
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a8 ec       	ldi	r26, 0xC8	; 200
    3a4a:	b3 e4       	ldi	r27, 0x43	; 67
    3a4c:	80 83       	st	Z, r24
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	a2 83       	std	Z+2, r26	; 0x02
    3a52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a54:	8e 01       	movw	r16, r28
    3a56:	01 5c       	subi	r16, 0xC1	; 193
    3a58:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	ed 5b       	subi	r30, 0xBD	; 189
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	4a ef       	ldi	r20, 0xFA	; 250
    3a6e:	54 e4       	ldi	r21, 0x44	; 68
    3a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	f8 01       	movw	r30, r16
    3a7a:	80 83       	st	Z, r24
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	a2 83       	std	Z+2, r26	; 0x02
    3a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a82:	fe 01       	movw	r30, r28
    3a84:	ff 96       	adiw	r30, 0x3f	; 63
    3a86:	60 81       	ld	r22, Z
    3a88:	71 81       	ldd	r23, Z+1	; 0x01
    3a8a:	82 81       	ldd	r24, Z+2	; 0x02
    3a8c:	93 81       	ldd	r25, Z+3	; 0x03
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e8       	ldi	r20, 0x80	; 128
    3a94:	5f e3       	ldi	r21, 0x3F	; 63
    3a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a9a:	88 23       	and	r24, r24
    3a9c:	2c f4       	brge	.+10     	; 0x3aa8 <Right_To_Left+0x63c>
		__ticks = 1;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	9e af       	std	Y+62, r25	; 0x3e
    3aa4:	8d af       	std	Y+61, r24	; 0x3d
    3aa6:	46 c0       	rjmp	.+140    	; 0x3b34 <Right_To_Left+0x6c8>
	else if (__tmp > 65535)
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ff 96       	adiw	r30, 0x3f	; 63
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	57 e4       	ldi	r21, 0x47	; 71
    3abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac0:	18 16       	cp	r1, r24
    3ac2:	64 f5       	brge	.+88     	; 0x3b1c <Right_To_Left+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	ed 5b       	subi	r30, 0xBD	; 189
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	60 81       	ld	r22, Z
    3acc:	71 81       	ldd	r23, Z+1	; 0x01
    3ace:	82 81       	ldd	r24, Z+2	; 0x02
    3ad0:	93 81       	ldd	r25, Z+3	; 0x03
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e2       	ldi	r20, 0x20	; 32
    3ad8:	51 e4       	ldi	r21, 0x41	; 65
    3ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9e af       	std	Y+62, r25	; 0x3e
    3af0:	8d af       	std	Y+61, r24	; 0x3d
    3af2:	0f c0       	rjmp	.+30     	; 0x3b12 <Right_To_Left+0x6a6>
    3af4:	88 ec       	ldi	r24, 0xC8	; 200
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	9c af       	std	Y+60, r25	; 0x3c
    3afa:	8b af       	std	Y+59, r24	; 0x3b
    3afc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3afe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	f1 f7       	brne	.-4      	; 0x3b00 <Right_To_Left+0x694>
    3b04:	9c af       	std	Y+60, r25	; 0x3c
    3b06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	9e af       	std	Y+62, r25	; 0x3e
    3b10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b12:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b14:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b16:	00 97       	sbiw	r24, 0x00	; 0
    3b18:	69 f7       	brne	.-38     	; 0x3af4 <Right_To_Left+0x688>
    3b1a:	16 c0       	rjmp	.+44     	; 0x3b48 <Right_To_Left+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	ff 96       	adiw	r30, 0x3f	; 63
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9e af       	std	Y+62, r25	; 0x3e
    3b32:	8d af       	std	Y+61, r24	; 0x3d
    3b34:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b36:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b38:	9a af       	std	Y+58, r25	; 0x3a
    3b3a:	89 af       	std	Y+57, r24	; 0x39
    3b3c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <Right_To_Left+0x6d4>
    3b44:	9a af       	std	Y+58, r25	; 0x3a
    3b46:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(400);

			player2_x++;
    3b48:	80 91 0a 01 	lds	r24, 0x010A
    3b4c:	8f 5f       	subi	r24, 0xFF	; 255
    3b4e:	80 93 0a 01 	sts	0x010A, r24

			if(player2_x==3)
    3b52:	80 91 0a 01 	lds	r24, 0x010A
    3b56:	83 30       	cpi	r24, 0x03	; 3
    3b58:	11 f4       	brne	.+4      	; 0x3b5e <Right_To_Left+0x6f2>
			{
				player2_x=0;
    3b5a:	10 92 0a 01 	sts	0x010A, r1
			}

			LCD_GoTo(player2_x, 19);
    3b5e:	80 91 0a 01 	lds	r24, 0x010A
    3b62:	63 e1       	ldi	r22, 0x13	; 19
    3b64:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3b6e:	c5 c1       	rjmp	.+906    	; 0x3efa <Right_To_Left+0xa8e>
		}

		/*up player 2*/
		else if(DIO_ReadPin(PIND5)==0)
    3b70:	8d e1       	ldi	r24, 0x1D	; 29
    3b72:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    3b76:	88 23       	and	r24, r24
    3b78:	09 f0       	breq	.+2      	; 0x3b7c <Right_To_Left+0x710>
    3b7a:	8f c0       	rjmp	.+286    	; 0x3c9a <Right_To_Left+0x82e>
		{
			LCD_GoTo(player2_x,19);
    3b7c:	80 91 0a 01 	lds	r24, 0x010A
    3b80:	63 e1       	ldi	r22, 0x13	; 19
    3b82:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3b86:	80 e2       	ldi	r24, 0x20	; 32
    3b88:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	a8 ec       	ldi	r26, 0xC8	; 200
    3b92:	b3 e4       	ldi	r27, 0x43	; 67
    3b94:	8d ab       	std	Y+53, r24	; 0x35
    3b96:	9e ab       	std	Y+54, r25	; 0x36
    3b98:	af ab       	std	Y+55, r26	; 0x37
    3b9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3ba0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ba2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a ef       	ldi	r20, 0xFA	; 250
    3baa:	54 e4       	ldi	r21, 0x44	; 68
    3bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	89 ab       	std	Y+49, r24	; 0x31
    3bb6:	9a ab       	std	Y+50, r25	; 0x32
    3bb8:	ab ab       	std	Y+51, r26	; 0x33
    3bba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bbc:	69 a9       	ldd	r22, Y+49	; 0x31
    3bbe:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc2:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e8       	ldi	r20, 0x80	; 128
    3bca:	5f e3       	ldi	r21, 0x3F	; 63
    3bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd0:	88 23       	and	r24, r24
    3bd2:	2c f4       	brge	.+10     	; 0x3bde <Right_To_Left+0x772>
		__ticks = 1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	98 ab       	std	Y+48, r25	; 0x30
    3bda:	8f a7       	std	Y+47, r24	; 0x2f
    3bdc:	3f c0       	rjmp	.+126    	; 0x3c5c <Right_To_Left+0x7f0>
	else if (__tmp > 65535)
    3bde:	69 a9       	ldd	r22, Y+49	; 0x31
    3be0:	7a a9       	ldd	r23, Y+50	; 0x32
    3be2:	8b a9       	ldd	r24, Y+51	; 0x33
    3be4:	9c a9       	ldd	r25, Y+52	; 0x34
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	3f ef       	ldi	r19, 0xFF	; 255
    3bea:	4f e7       	ldi	r20, 0x7F	; 127
    3bec:	57 e4       	ldi	r21, 0x47	; 71
    3bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf2:	18 16       	cp	r1, r24
    3bf4:	4c f5       	brge	.+82     	; 0x3c48 <Right_To_Left+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	6d a9       	ldd	r22, Y+53	; 0x35
    3bf8:	7e a9       	ldd	r23, Y+54	; 0x36
    3bfa:	8f a9       	ldd	r24, Y+55	; 0x37
    3bfc:	98 ad       	ldd	r25, Y+56	; 0x38
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e2       	ldi	r20, 0x20	; 32
    3c04:	51 e4       	ldi	r21, 0x41	; 65
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	98 ab       	std	Y+48, r25	; 0x30
    3c1c:	8f a7       	std	Y+47, r24	; 0x2f
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <Right_To_Left+0x7d2>
    3c20:	88 ec       	ldi	r24, 0xC8	; 200
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	9e a7       	std	Y+46, r25	; 0x2e
    3c26:	8d a7       	std	Y+45, r24	; 0x2d
    3c28:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <Right_To_Left+0x7c0>
    3c30:	9e a7       	std	Y+46, r25	; 0x2e
    3c32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c36:	98 a9       	ldd	r25, Y+48	; 0x30
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	98 ab       	std	Y+48, r25	; 0x30
    3c3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c40:	98 a9       	ldd	r25, Y+48	; 0x30
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f7       	brne	.-38     	; 0x3c20 <Right_To_Left+0x7b4>
    3c46:	14 c0       	rjmp	.+40     	; 0x3c70 <Right_To_Left+0x804>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c48:	69 a9       	ldd	r22, Y+49	; 0x31
    3c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	98 ab       	std	Y+48, r25	; 0x30
    3c5a:	8f a7       	std	Y+47, r24	; 0x2f
    3c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c60:	9c a7       	std	Y+44, r25	; 0x2c
    3c62:	8b a7       	std	Y+43, r24	; 0x2b
    3c64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c66:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <Right_To_Left+0x7fc>
    3c6c:	9c a7       	std	Y+44, r25	; 0x2c
    3c6e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(400);

			if(player2_x==0)
    3c70:	80 91 0a 01 	lds	r24, 0x010A
    3c74:	88 23       	and	r24, r24
    3c76:	19 f4       	brne	.+6      	; 0x3c7e <Right_To_Left+0x812>
			{
				player2_x=3;
    3c78:	83 e0       	ldi	r24, 0x03	; 3
    3c7a:	80 93 0a 01 	sts	0x010A, r24
			}

			player2_x--;
    3c7e:	80 91 0a 01 	lds	r24, 0x010A
    3c82:	81 50       	subi	r24, 0x01	; 1
    3c84:	80 93 0a 01 	sts	0x010A, r24

			LCD_GoTo(player2_x, 19);
    3c88:	80 91 0a 01 	lds	r24, 0x010A
    3c8c:	63 e1       	ldi	r22, 0x13	; 19
    3c8e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(0);
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3c98:	30 c1       	rjmp	.+608    	; 0x3efa <Right_To_Left+0xa8e>
		}


		/*Down Ball*/
		else if(DIO_ReadPin(PINA3)==0)
    3c9a:	83 e0       	ldi	r24, 0x03	; 3
    3c9c:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    3ca0:	88 23       	and	r24, r24
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <Right_To_Left+0x83a>
    3ca4:	92 c0       	rjmp	.+292    	; 0x3dca <Right_To_Left+0x95e>
		{
			LCD_GoTo(ball_x, ball_y);
    3ca6:	80 91 0b 01 	lds	r24, 0x010B
    3caa:	90 91 d6 00 	lds	r25, 0x00D6
    3cae:	69 2f       	mov	r22, r25
    3cb0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3cb4:	80 e2       	ldi	r24, 0x20	; 32
    3cb6:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	a8 ec       	ldi	r26, 0xC8	; 200
    3cc0:	b3 e4       	ldi	r27, 0x43	; 67
    3cc2:	8f a3       	std	Y+39, r24	; 0x27
    3cc4:	98 a7       	std	Y+40, r25	; 0x28
    3cc6:	a9 a7       	std	Y+41, r26	; 0x29
    3cc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cca:	6f a1       	ldd	r22, Y+39	; 0x27
    3ccc:	78 a5       	ldd	r23, Y+40	; 0x28
    3cce:	89 a5       	ldd	r24, Y+41	; 0x29
    3cd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	4a ef       	ldi	r20, 0xFA	; 250
    3cd8:	54 e4       	ldi	r21, 0x44	; 68
    3cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	8b a3       	std	Y+35, r24	; 0x23
    3ce4:	9c a3       	std	Y+36, r25	; 0x24
    3ce6:	ad a3       	std	Y+37, r26	; 0x25
    3ce8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cea:	6b a1       	ldd	r22, Y+35	; 0x23
    3cec:	7c a1       	ldd	r23, Y+36	; 0x24
    3cee:	8d a1       	ldd	r24, Y+37	; 0x25
    3cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e8       	ldi	r20, 0x80	; 128
    3cf8:	5f e3       	ldi	r21, 0x3F	; 63
    3cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cfe:	88 23       	and	r24, r24
    3d00:	2c f4       	brge	.+10     	; 0x3d0c <Right_To_Left+0x8a0>
		__ticks = 1;
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	9a a3       	std	Y+34, r25	; 0x22
    3d08:	89 a3       	std	Y+33, r24	; 0x21
    3d0a:	3f c0       	rjmp	.+126    	; 0x3d8a <Right_To_Left+0x91e>
	else if (__tmp > 65535)
    3d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3d10:	8d a1       	ldd	r24, Y+37	; 0x25
    3d12:	9e a1       	ldd	r25, Y+38	; 0x26
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	3f ef       	ldi	r19, 0xFF	; 255
    3d18:	4f e7       	ldi	r20, 0x7F	; 127
    3d1a:	57 e4       	ldi	r21, 0x47	; 71
    3d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d20:	18 16       	cp	r1, r24
    3d22:	4c f5       	brge	.+82     	; 0x3d76 <Right_To_Left+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d24:	6f a1       	ldd	r22, Y+39	; 0x27
    3d26:	78 a5       	ldd	r23, Y+40	; 0x28
    3d28:	89 a5       	ldd	r24, Y+41	; 0x29
    3d2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e2       	ldi	r20, 0x20	; 32
    3d32:	51 e4       	ldi	r21, 0x41	; 65
    3d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	9a a3       	std	Y+34, r25	; 0x22
    3d4a:	89 a3       	std	Y+33, r24	; 0x21
    3d4c:	0f c0       	rjmp	.+30     	; 0x3d6c <Right_To_Left+0x900>
    3d4e:	88 ec       	ldi	r24, 0xC8	; 200
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	98 a3       	std	Y+32, r25	; 0x20
    3d54:	8f 8f       	std	Y+31, r24	; 0x1f
    3d56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d58:	98 a1       	ldd	r25, Y+32	; 0x20
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <Right_To_Left+0x8ee>
    3d5e:	98 a3       	std	Y+32, r25	; 0x20
    3d60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d62:	89 a1       	ldd	r24, Y+33	; 0x21
    3d64:	9a a1       	ldd	r25, Y+34	; 0x22
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	9a a3       	std	Y+34, r25	; 0x22
    3d6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	69 f7       	brne	.-38     	; 0x3d4e <Right_To_Left+0x8e2>
    3d74:	14 c0       	rjmp	.+40     	; 0x3d9e <Right_To_Left+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d76:	6b a1       	ldd	r22, Y+35	; 0x23
    3d78:	7c a1       	ldd	r23, Y+36	; 0x24
    3d7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	9a a3       	std	Y+34, r25	; 0x22
    3d88:	89 a3       	std	Y+33, r24	; 0x21
    3d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3d90:	8d 8f       	std	Y+29, r24	; 0x1d
    3d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <Right_To_Left+0x92a>
    3d9a:	9e 8f       	std	Y+30, r25	; 0x1e
    3d9c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(400);

			ball_x++;
    3d9e:	80 91 0b 01 	lds	r24, 0x010B
    3da2:	8f 5f       	subi	r24, 0xFF	; 255
    3da4:	80 93 0b 01 	sts	0x010B, r24

			if(ball_x==3)
    3da8:	80 91 0b 01 	lds	r24, 0x010B
    3dac:	83 30       	cpi	r24, 0x03	; 3
    3dae:	11 f4       	brne	.+4      	; 0x3db4 <Right_To_Left+0x948>
			{
				ball_x=0;
    3db0:	10 92 0b 01 	sts	0x010B, r1
			}

			LCD_GoTo(ball_x,ball_y);
    3db4:	80 91 0b 01 	lds	r24, 0x010B
    3db8:	90 91 d6 00 	lds	r25, 0x00D6
    3dbc:	69 2f       	mov	r22, r25
    3dbe:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(1);
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3dc8:	98 c0       	rjmp	.+304    	; 0x3efa <Right_To_Left+0xa8e>
		}

		/*Up Ball*/
		else if(DIO_ReadPin(PINA2)==0)
    3dca:	82 e0       	ldi	r24, 0x02	; 2
    3dcc:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_ReadPin>
    3dd0:	88 23       	and	r24, r24
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <Right_To_Left+0x96a>
    3dd4:	92 c0       	rjmp	.+292    	; 0x3efa <Right_To_Left+0xa8e>
		{
			LCD_GoTo(ball_x, ball_y);
    3dd6:	80 91 0b 01 	lds	r24, 0x010B
    3dda:	90 91 d6 00 	lds	r25, 0x00D6
    3dde:	69 2f       	mov	r22, r25
    3de0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(' ');
    3de4:	80 e2       	ldi	r24, 0x20	; 32
    3de6:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	a8 ec       	ldi	r26, 0xC8	; 200
    3df0:	b3 e4       	ldi	r27, 0x43	; 67
    3df2:	89 8f       	std	Y+25, r24	; 0x19
    3df4:	9a 8f       	std	Y+26, r25	; 0x1a
    3df6:	ab 8f       	std	Y+27, r26	; 0x1b
    3df8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    3dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	4a ef       	ldi	r20, 0xFA	; 250
    3e08:	54 e4       	ldi	r21, 0x44	; 68
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	8d 8b       	std	Y+21, r24	; 0x15
    3e14:	9e 8b       	std	Y+22, r25	; 0x16
    3e16:	af 8b       	std	Y+23, r26	; 0x17
    3e18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e20:	98 8d       	ldd	r25, Y+24	; 0x18
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e8       	ldi	r20, 0x80	; 128
    3e28:	5f e3       	ldi	r21, 0x3F	; 63
    3e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e2e:	88 23       	and	r24, r24
    3e30:	2c f4       	brge	.+10     	; 0x3e3c <Right_To_Left+0x9d0>
		__ticks = 1;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	9c 8b       	std	Y+20, r25	; 0x14
    3e38:	8b 8b       	std	Y+19, r24	; 0x13
    3e3a:	3f c0       	rjmp	.+126    	; 0x3eba <Right_To_Left+0xa4e>
	else if (__tmp > 65535)
    3e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e40:	8f 89       	ldd	r24, Y+23	; 0x17
    3e42:	98 8d       	ldd	r25, Y+24	; 0x18
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	3f ef       	ldi	r19, 0xFF	; 255
    3e48:	4f e7       	ldi	r20, 0x7F	; 127
    3e4a:	57 e4       	ldi	r21, 0x47	; 71
    3e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e50:	18 16       	cp	r1, r24
    3e52:	4c f5       	brge	.+82     	; 0x3ea6 <Right_To_Left+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e54:	69 8d       	ldd	r22, Y+25	; 0x19
    3e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e2       	ldi	r20, 0x20	; 32
    3e62:	51 e4       	ldi	r21, 0x41	; 65
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	9c 8b       	std	Y+20, r25	; 0x14
    3e7a:	8b 8b       	std	Y+19, r24	; 0x13
    3e7c:	0f c0       	rjmp	.+30     	; 0x3e9c <Right_To_Left+0xa30>
    3e7e:	88 ec       	ldi	r24, 0xC8	; 200
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	9a 8b       	std	Y+18, r25	; 0x12
    3e84:	89 8b       	std	Y+17, r24	; 0x11
    3e86:	89 89       	ldd	r24, Y+17	; 0x11
    3e88:	9a 89       	ldd	r25, Y+18	; 0x12
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <Right_To_Left+0xa1e>
    3e8e:	9a 8b       	std	Y+18, r25	; 0x12
    3e90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e92:	8b 89       	ldd	r24, Y+19	; 0x13
    3e94:	9c 89       	ldd	r25, Y+20	; 0x14
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	9c 8b       	std	Y+20, r25	; 0x14
    3e9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	69 f7       	brne	.-38     	; 0x3e7e <Right_To_Left+0xa12>
    3ea4:	14 c0       	rjmp	.+40     	; 0x3ece <Right_To_Left+0xa62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3eac:	98 8d       	ldd	r25, Y+24	; 0x18
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9c 8b       	std	Y+20, r25	; 0x14
    3eb8:	8b 8b       	std	Y+19, r24	; 0x13
    3eba:	8b 89       	ldd	r24, Y+19	; 0x13
    3ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebe:	98 8b       	std	Y+16, r25	; 0x10
    3ec0:	8f 87       	std	Y+15, r24	; 0x0f
    3ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec4:	98 89       	ldd	r25, Y+16	; 0x10
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <Right_To_Left+0xa5a>
    3eca:	98 8b       	std	Y+16, r25	; 0x10
    3ecc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(400);

			if(ball_x==0)
    3ece:	80 91 0b 01 	lds	r24, 0x010B
    3ed2:	88 23       	and	r24, r24
    3ed4:	19 f4       	brne	.+6      	; 0x3edc <Right_To_Left+0xa70>
			{
				ball_x=3;
    3ed6:	83 e0       	ldi	r24, 0x03	; 3
    3ed8:	80 93 0b 01 	sts	0x010B, r24
			}

			ball_x--;
    3edc:	80 91 0b 01 	lds	r24, 0x010B
    3ee0:	81 50       	subi	r24, 0x01	; 1
    3ee2:	80 93 0b 01 	sts	0x010B, r24

			LCD_GoTo(ball_x,ball_y);
    3ee6:	80 91 0b 01 	lds	r24, 0x010B
    3eea:	90 91 d6 00 	lds	r25, 0x00D6
    3eee:	69 2f       	mov	r22, r25
    3ef0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
			LCD_WriteChar(1);
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	0e 94 8c 12 	call	0x2518	; 0x2518 <LCD_WriteChar>
		}
		else{}

		if(score1==3 || score2==3)
    3efa:	80 91 0c 01 	lds	r24, 0x010C
    3efe:	83 30       	cpi	r24, 0x03	; 3
    3f00:	29 f0       	breq	.+10     	; 0x3f0c <Right_To_Left+0xaa0>
    3f02:	80 91 0d 01 	lds	r24, 0x010D
    3f06:	83 30       	cpi	r24, 0x03	; 3
    3f08:	09 f0       	breq	.+2      	; 0x3f0c <Right_To_Left+0xaa0>
    3f0a:	74 c0       	rjmp	.+232    	; 0x3ff4 <Right_To_Left+0xb88>
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	aa ef       	ldi	r26, 0xFA	; 250
    3f12:	b3 e4       	ldi	r27, 0x43	; 67
    3f14:	8b 87       	std	Y+11, r24	; 0x0b
    3f16:	9c 87       	std	Y+12, r25	; 0x0c
    3f18:	ad 87       	std	Y+13, r26	; 0x0d
    3f1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	4a ef       	ldi	r20, 0xFA	; 250
    3f2a:	54 e4       	ldi	r21, 0x44	; 68
    3f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	8f 83       	std	Y+7, r24	; 0x07
    3f36:	98 87       	std	Y+8, r25	; 0x08
    3f38:	a9 87       	std	Y+9, r26	; 0x09
    3f3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3e:	78 85       	ldd	r23, Y+8	; 0x08
    3f40:	89 85       	ldd	r24, Y+9	; 0x09
    3f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e8       	ldi	r20, 0x80	; 128
    3f4a:	5f e3       	ldi	r21, 0x3F	; 63
    3f4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f50:	88 23       	and	r24, r24
    3f52:	2c f4       	brge	.+10     	; 0x3f5e <Right_To_Left+0xaf2>
		__ticks = 1;
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	9e 83       	std	Y+6, r25	; 0x06
    3f5a:	8d 83       	std	Y+5, r24	; 0x05
    3f5c:	3f c0       	rjmp	.+126    	; 0x3fdc <Right_To_Left+0xb70>
	else if (__tmp > 65535)
    3f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f60:	78 85       	ldd	r23, Y+8	; 0x08
    3f62:	89 85       	ldd	r24, Y+9	; 0x09
    3f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	3f ef       	ldi	r19, 0xFF	; 255
    3f6a:	4f e7       	ldi	r20, 0x7F	; 127
    3f6c:	57 e4       	ldi	r21, 0x47	; 71
    3f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f72:	18 16       	cp	r1, r24
    3f74:	4c f5       	brge	.+82     	; 0x3fc8 <Right_To_Left+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e2       	ldi	r20, 0x20	; 32
    3f84:	51 e4       	ldi	r21, 0x41	; 65
    3f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	bc 01       	movw	r22, r24
    3f90:	cd 01       	movw	r24, r26
    3f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9e 83       	std	Y+6, r25	; 0x06
    3f9c:	8d 83       	std	Y+5, r24	; 0x05
    3f9e:	0f c0       	rjmp	.+30     	; 0x3fbe <Right_To_Left+0xb52>
    3fa0:	88 ec       	ldi	r24, 0xC8	; 200
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
    3fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3faa:	9c 81       	ldd	r25, Y+4	; 0x04
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	f1 f7       	brne	.-4      	; 0x3fac <Right_To_Left+0xb40>
    3fb0:	9c 83       	std	Y+4, r25	; 0x04
    3fb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	9e 83       	std	Y+6, r25	; 0x06
    3fbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	69 f7       	brne	.-38     	; 0x3fa0 <Right_To_Left+0xb34>
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <Right_To_Left+0xb84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fca:	78 85       	ldd	r23, Y+8	; 0x08
    3fcc:	89 85       	ldd	r24, Y+9	; 0x09
    3fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	9e 83       	std	Y+6, r25	; 0x06
    3fda:	8d 83       	std	Y+5, r24	; 0x05
    3fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fde:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe0:	9a 83       	std	Y+2, r25	; 0x02
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <Right_To_Left+0xb7c>
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			pingpong_end();
    3ff0:	0e 94 b7 20 	call	0x416e	; 0x416e <pingpong_end>
 * 				Function Right to left
 *
 ****************************************************/
void Right_To_Left(void)
{
	for(ball_y=17;ball_y>0;ball_y--)
    3ff4:	80 91 d6 00 	lds	r24, 0x00D6
    3ff8:	81 50       	subi	r24, 0x01	; 1
    3ffa:	80 93 d6 00 	sts	0x00D6, r24
    3ffe:	80 91 d6 00 	lds	r24, 0x00D6
    4002:	88 23       	and	r24, r24
    4004:	09 f0       	breq	.+2      	; 0x4008 <Right_To_Left+0xb9c>
    4006:	43 ca       	rjmp	.-2938   	; 0x348e <Right_To_Left+0x22>
			pingpong_end();
		}
		else{}
	}/*End of for loop2*/

}/*End of Function*/
    4008:	c0 59       	subi	r28, 0x90	; 144
    400a:	df 4f       	sbci	r29, 0xFF	; 255
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	de bf       	out	0x3e, r29	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	cf 91       	pop	r28
    4018:	df 91       	pop	r29
    401a:	1f 91       	pop	r17
    401c:	0f 91       	pop	r16
    401e:	08 95       	ret

00004020 <pingpong_Init>:
 *
 * 				Function pingpong_Init
 *
 ****************************************************/
void pingpong_Init()
{
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	2e 97       	sbiw	r28, 0x0e	; 14
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    4034:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_Clear>
	LCD_GoTo(1, 1);
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	61 e0       	ldi	r22, 0x01	; 1
    403c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("Welcome to My Game");
    4040:	81 e7       	ldi	r24, 0x71	; 113
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
	LCD_GoTo(2, 5);
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	65 e0       	ldi	r22, 0x05	; 5
    404c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("Ping Pong");
    4050:	84 e8       	ldi	r24, 0x84	; 132
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e8       	ldi	r25, 0x80	; 128
    405c:	ab eb       	ldi	r26, 0xBB	; 187
    405e:	b4 e4       	ldi	r27, 0x44	; 68
    4060:	8b 87       	std	Y+11, r24	; 0x0b
    4062:	9c 87       	std	Y+12, r25	; 0x0c
    4064:	ad 87       	std	Y+13, r26	; 0x0d
    4066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4068:	6b 85       	ldd	r22, Y+11	; 0x0b
    406a:	7c 85       	ldd	r23, Y+12	; 0x0c
    406c:	8d 85       	ldd	r24, Y+13	; 0x0d
    406e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	4a ef       	ldi	r20, 0xFA	; 250
    4076:	54 e4       	ldi	r21, 0x44	; 68
    4078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	8f 83       	std	Y+7, r24	; 0x07
    4082:	98 87       	std	Y+8, r25	; 0x08
    4084:	a9 87       	std	Y+9, r26	; 0x09
    4086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4088:	6f 81       	ldd	r22, Y+7	; 0x07
    408a:	78 85       	ldd	r23, Y+8	; 0x08
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e8       	ldi	r20, 0x80	; 128
    4096:	5f e3       	ldi	r21, 0x3F	; 63
    4098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    409c:	88 23       	and	r24, r24
    409e:	2c f4       	brge	.+10     	; 0x40aa <pingpong_Init+0x8a>
		__ticks = 1;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
    40a8:	3f c0       	rjmp	.+126    	; 0x4128 <pingpong_Init+0x108>
	else if (__tmp > 65535)
    40aa:	6f 81       	ldd	r22, Y+7	; 0x07
    40ac:	78 85       	ldd	r23, Y+8	; 0x08
    40ae:	89 85       	ldd	r24, Y+9	; 0x09
    40b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	3f ef       	ldi	r19, 0xFF	; 255
    40b6:	4f e7       	ldi	r20, 0x7F	; 127
    40b8:	57 e4       	ldi	r21, 0x47	; 71
    40ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40be:	18 16       	cp	r1, r24
    40c0:	4c f5       	brge	.+82     	; 0x4114 <pingpong_Init+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	40 e2       	ldi	r20, 0x20	; 32
    40d0:	51 e4       	ldi	r21, 0x41	; 65
    40d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	9e 83       	std	Y+6, r25	; 0x06
    40e8:	8d 83       	std	Y+5, r24	; 0x05
    40ea:	0f c0       	rjmp	.+30     	; 0x410a <pingpong_Init+0xea>
    40ec:	88 ec       	ldi	r24, 0xC8	; 200
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	9c 83       	std	Y+4, r25	; 0x04
    40f2:	8b 83       	std	Y+3, r24	; 0x03
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	9c 81       	ldd	r25, Y+4	; 0x04
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <pingpong_Init+0xd8>
    40fc:	9c 83       	std	Y+4, r25	; 0x04
    40fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4100:	8d 81       	ldd	r24, Y+5	; 0x05
    4102:	9e 81       	ldd	r25, Y+6	; 0x06
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    410a:	8d 81       	ldd	r24, Y+5	; 0x05
    410c:	9e 81       	ldd	r25, Y+6	; 0x06
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	69 f7       	brne	.-38     	; 0x40ec <pingpong_Init+0xcc>
    4112:	14 c0       	rjmp	.+40     	; 0x413c <pingpong_Init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4114:	6f 81       	ldd	r22, Y+7	; 0x07
    4116:	78 85       	ldd	r23, Y+8	; 0x08
    4118:	89 85       	ldd	r24, Y+9	; 0x09
    411a:	9a 85       	ldd	r25, Y+10	; 0x0a
    411c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	9e 83       	std	Y+6, r25	; 0x06
    4126:	8d 83       	std	Y+5, r24	; 0x05
    4128:	8d 81       	ldd	r24, Y+5	; 0x05
    412a:	9e 81       	ldd	r25, Y+6	; 0x06
    412c:	9a 83       	std	Y+2, r25	; 0x02
    412e:	89 83       	std	Y+1, r24	; 0x01
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	f1 f7       	brne	.-4      	; 0x4134 <pingpong_Init+0x114>
    4138:	9a 83       	std	Y+2, r25	; 0x02
    413a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_GoTo(1, 1);
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	61 e0       	ldi	r22, 0x01	; 1
    4140:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("                  ");
    4144:	8e e8       	ldi	r24, 0x8E	; 142
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
	LCD_GoTo(2, 1);
    414c:	82 e0       	ldi	r24, 0x02	; 2
    414e:	61 e0       	ldi	r22, 0x01	; 1
    4150:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("                  ");
    4154:	8e e8       	ldi	r24, 0x8E	; 142
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
}
    415c:	2e 96       	adiw	r28, 0x0e	; 14
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <pingpong_end>:
 *
 * 				Function pingpong_end
 *
 ****************************************************/
void pingpong_end(void)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	6c 97       	sbiw	r28, 0x1c	; 28
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    4182:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_Clear>
	LCD_GoTo(1, 3);
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	63 e0       	ldi	r22, 0x03	; 3
    418a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("Game Over!!");
    418e:	81 ea       	ldi	r24, 0xA1	; 161
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	aa e7       	ldi	r26, 0x7A	; 122
    419c:	b4 e4       	ldi	r27, 0x44	; 68
    419e:	89 8f       	std	Y+25, r24	; 0x19
    41a0:	9a 8f       	std	Y+26, r25	; 0x1a
    41a2:	ab 8f       	std	Y+27, r26	; 0x1b
    41a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a6:	69 8d       	ldd	r22, Y+25	; 0x19
    41a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	4a ef       	ldi	r20, 0xFA	; 250
    41b4:	54 e4       	ldi	r21, 0x44	; 68
    41b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	8d 8b       	std	Y+21, r24	; 0x15
    41c0:	9e 8b       	std	Y+22, r25	; 0x16
    41c2:	af 8b       	std	Y+23, r26	; 0x17
    41c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41c6:	6d 89       	ldd	r22, Y+21	; 0x15
    41c8:	7e 89       	ldd	r23, Y+22	; 0x16
    41ca:	8f 89       	ldd	r24, Y+23	; 0x17
    41cc:	98 8d       	ldd	r25, Y+24	; 0x18
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e8       	ldi	r20, 0x80	; 128
    41d4:	5f e3       	ldi	r21, 0x3F	; 63
    41d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41da:	88 23       	and	r24, r24
    41dc:	2c f4       	brge	.+10     	; 0x41e8 <pingpong_end+0x7a>
		__ticks = 1;
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9c 8b       	std	Y+20, r25	; 0x14
    41e4:	8b 8b       	std	Y+19, r24	; 0x13
    41e6:	3f c0       	rjmp	.+126    	; 0x4266 <pingpong_end+0xf8>
	else if (__tmp > 65535)
    41e8:	6d 89       	ldd	r22, Y+21	; 0x15
    41ea:	7e 89       	ldd	r23, Y+22	; 0x16
    41ec:	8f 89       	ldd	r24, Y+23	; 0x17
    41ee:	98 8d       	ldd	r25, Y+24	; 0x18
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	3f ef       	ldi	r19, 0xFF	; 255
    41f4:	4f e7       	ldi	r20, 0x7F	; 127
    41f6:	57 e4       	ldi	r21, 0x47	; 71
    41f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41fc:	18 16       	cp	r1, r24
    41fe:	4c f5       	brge	.+82     	; 0x4252 <pingpong_end+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4200:	69 8d       	ldd	r22, Y+25	; 0x19
    4202:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4204:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4206:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e2       	ldi	r20, 0x20	; 32
    420e:	51 e4       	ldi	r21, 0x41	; 65
    4210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9c 8b       	std	Y+20, r25	; 0x14
    4226:	8b 8b       	std	Y+19, r24	; 0x13
    4228:	0f c0       	rjmp	.+30     	; 0x4248 <pingpong_end+0xda>
    422a:	88 ec       	ldi	r24, 0xC8	; 200
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	9a 8b       	std	Y+18, r25	; 0x12
    4230:	89 8b       	std	Y+17, r24	; 0x11
    4232:	89 89       	ldd	r24, Y+17	; 0x11
    4234:	9a 89       	ldd	r25, Y+18	; 0x12
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	f1 f7       	brne	.-4      	; 0x4236 <pingpong_end+0xc8>
    423a:	9a 8b       	std	Y+18, r25	; 0x12
    423c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423e:	8b 89       	ldd	r24, Y+19	; 0x13
    4240:	9c 89       	ldd	r25, Y+20	; 0x14
    4242:	01 97       	sbiw	r24, 0x01	; 1
    4244:	9c 8b       	std	Y+20, r25	; 0x14
    4246:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4248:	8b 89       	ldd	r24, Y+19	; 0x13
    424a:	9c 89       	ldd	r25, Y+20	; 0x14
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	69 f7       	brne	.-38     	; 0x422a <pingpong_end+0xbc>
    4250:	14 c0       	rjmp	.+40     	; 0x427a <pingpong_end+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4252:	6d 89       	ldd	r22, Y+21	; 0x15
    4254:	7e 89       	ldd	r23, Y+22	; 0x16
    4256:	8f 89       	ldd	r24, Y+23	; 0x17
    4258:	98 8d       	ldd	r25, Y+24	; 0x18
    425a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	9c 8b       	std	Y+20, r25	; 0x14
    4264:	8b 8b       	std	Y+19, r24	; 0x13
    4266:	8b 89       	ldd	r24, Y+19	; 0x13
    4268:	9c 89       	ldd	r25, Y+20	; 0x14
    426a:	98 8b       	std	Y+16, r25	; 0x10
    426c:	8f 87       	std	Y+15, r24	; 0x0f
    426e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4270:	98 89       	ldd	r25, Y+16	; 0x10
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <pingpong_end+0x104>
    4276:	98 8b       	std	Y+16, r25	; 0x10
    4278:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_Clear();
    427a:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_Clear>
	LCD_GoTo(1, 5);
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	65 e0       	ldi	r22, 0x05	; 5
    4282:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	LCD_WriteString("The winner is");
    4286:	8d ea       	ldi	r24, 0xAD	; 173
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
	LCD_GoTo(2, 5);
    428e:	82 e0       	ldi	r24, 0x02	; 2
    4290:	65 e0       	ldi	r22, 0x05	; 5
    4292:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_GoTo>
	if(score1 > score2)
    4296:	90 91 0c 01 	lds	r25, 0x010C
    429a:	80 91 0d 01 	lds	r24, 0x010D
    429e:	89 17       	cp	r24, r25
    42a0:	28 f4       	brcc	.+10     	; 0x42ac <pingpong_end+0x13e>
	{
		LCD_WriteString("Player 1");
    42a2:	8b eb       	ldi	r24, 0xBB	; 187
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
    42aa:	04 c0       	rjmp	.+8      	; 0x42b4 <pingpong_end+0x146>
	}
	else
	{
		LCD_WriteString("Player 2");
    42ac:	84 ec       	ldi	r24, 0xC4	; 196
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_WriteString>
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	90 e8       	ldi	r25, 0x80	; 128
    42b8:	ab eb       	ldi	r26, 0xBB	; 187
    42ba:	b4 e4       	ldi	r27, 0x44	; 68
    42bc:	8b 87       	std	Y+11, r24	; 0x0b
    42be:	9c 87       	std	Y+12, r25	; 0x0c
    42c0:	ad 87       	std	Y+13, r26	; 0x0d
    42c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	4a ef       	ldi	r20, 0xFA	; 250
    42d2:	54 e4       	ldi	r21, 0x44	; 68
    42d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	8f 83       	std	Y+7, r24	; 0x07
    42de:	98 87       	std	Y+8, r25	; 0x08
    42e0:	a9 87       	std	Y+9, r26	; 0x09
    42e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42e4:	6f 81       	ldd	r22, Y+7	; 0x07
    42e6:	78 85       	ldd	r23, Y+8	; 0x08
    42e8:	89 85       	ldd	r24, Y+9	; 0x09
    42ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e8       	ldi	r20, 0x80	; 128
    42f2:	5f e3       	ldi	r21, 0x3F	; 63
    42f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42f8:	88 23       	and	r24, r24
    42fa:	2c f4       	brge	.+10     	; 0x4306 <pingpong_end+0x198>
		__ticks = 1;
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	9e 83       	std	Y+6, r25	; 0x06
    4302:	8d 83       	std	Y+5, r24	; 0x05
    4304:	3f c0       	rjmp	.+126    	; 0x4384 <pingpong_end+0x216>
	else if (__tmp > 65535)
    4306:	6f 81       	ldd	r22, Y+7	; 0x07
    4308:	78 85       	ldd	r23, Y+8	; 0x08
    430a:	89 85       	ldd	r24, Y+9	; 0x09
    430c:	9a 85       	ldd	r25, Y+10	; 0x0a
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	3f ef       	ldi	r19, 0xFF	; 255
    4312:	4f e7       	ldi	r20, 0x7F	; 127
    4314:	57 e4       	ldi	r21, 0x47	; 71
    4316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    431a:	18 16       	cp	r1, r24
    431c:	4c f5       	brge	.+82     	; 0x4370 <pingpong_end+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4320:	7c 85       	ldd	r23, Y+12	; 0x0c
    4322:	8d 85       	ldd	r24, Y+13	; 0x0d
    4324:	9e 85       	ldd	r25, Y+14	; 0x0e
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e2       	ldi	r20, 0x20	; 32
    432c:	51 e4       	ldi	r21, 0x41	; 65
    432e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	bc 01       	movw	r22, r24
    4338:	cd 01       	movw	r24, r26
    433a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433e:	dc 01       	movw	r26, r24
    4340:	cb 01       	movw	r24, r22
    4342:	9e 83       	std	Y+6, r25	; 0x06
    4344:	8d 83       	std	Y+5, r24	; 0x05
    4346:	0f c0       	rjmp	.+30     	; 0x4366 <pingpong_end+0x1f8>
    4348:	88 ec       	ldi	r24, 0xC8	; 200
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	9c 83       	std	Y+4, r25	; 0x04
    434e:	8b 83       	std	Y+3, r24	; 0x03
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <pingpong_end+0x1e6>
    4358:	9c 83       	std	Y+4, r25	; 0x04
    435a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435c:	8d 81       	ldd	r24, Y+5	; 0x05
    435e:	9e 81       	ldd	r25, Y+6	; 0x06
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	9e 83       	std	Y+6, r25	; 0x06
    4364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4366:	8d 81       	ldd	r24, Y+5	; 0x05
    4368:	9e 81       	ldd	r25, Y+6	; 0x06
    436a:	00 97       	sbiw	r24, 0x00	; 0
    436c:	69 f7       	brne	.-38     	; 0x4348 <pingpong_end+0x1da>
    436e:	14 c0       	rjmp	.+40     	; 0x4398 <pingpong_end+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4370:	6f 81       	ldd	r22, Y+7	; 0x07
    4372:	78 85       	ldd	r23, Y+8	; 0x08
    4374:	89 85       	ldd	r24, Y+9	; 0x09
    4376:	9a 85       	ldd	r25, Y+10	; 0x0a
    4378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	9e 81       	ldd	r25, Y+6	; 0x06
    4388:	9a 83       	std	Y+2, r25	; 0x02
    438a:	89 83       	std	Y+1, r24	; 0x01
    438c:	89 81       	ldd	r24, Y+1	; 0x01
    438e:	9a 81       	ldd	r25, Y+2	; 0x02
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <pingpong_end+0x222>
    4394:	9a 83       	std	Y+2, r25	; 0x02
    4396:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1500);
	pingpong_Init();
    4398:	0e 94 10 20 	call	0x4020	; 0x4020 <pingpong_Init>
	score1=0;
    439c:	10 92 0c 01 	sts	0x010C, r1
	score2=0;
    43a0:	10 92 0d 01 	sts	0x010D, r1
	ball_x=0;
    43a4:	10 92 0b 01 	sts	0x010B, r1
	ball_y=1;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	80 93 d6 00 	sts	0x00D6, r24
	player1_x=0;
    43ae:	10 92 08 01 	sts	0x0108, r1
	player1_y=0;
    43b2:	10 92 09 01 	sts	0x0109, r1
	player2_x=0;
    43b6:	10 92 0a 01 	sts	0x010A, r1
	player2_y=19;
    43ba:	83 e1       	ldi	r24, 0x13	; 19
    43bc:	80 93 d5 00 	sts	0x00D5, r24
}
    43c0:	6c 96       	adiw	r28, 0x1c	; 28
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <main>:
 *
 * 				Main Function
 *
 ****************************************************/
int main(void)
{
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	6a 97       	sbiw	r28, 0x1a	; 26
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	f8 94       	cli
    43e0:	de bf       	out	0x3e, r29	; 62
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
    43e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_Init>
	LCD_Init();
    43ea:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Init>
	pingpong_Init();
    43ee:	0e 94 10 20 	call	0x4020	; 0x4020 <pingpong_Init>

	/*Player*/
	u8 player[] = {0x04,0x04,0x0E,0x15,0x04,0x0A,0x11,0x00};
    43f2:	ce 01       	movw	r24, r28
    43f4:	01 96       	adiw	r24, 0x01	; 1
    43f6:	9a 8b       	std	Y+18, r25	; 0x12
    43f8:	89 8b       	std	Y+17, r24	; 0x11
    43fa:	ef ef       	ldi	r30, 0xFF	; 255
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	fc 8b       	std	Y+20, r31	; 0x14
    4400:	eb 8b       	std	Y+19, r30	; 0x13
    4402:	f8 e0       	ldi	r31, 0x08	; 8
    4404:	fd 8b       	std	Y+21, r31	; 0x15
    4406:	eb 89       	ldd	r30, Y+19	; 0x13
    4408:	fc 89       	ldd	r31, Y+20	; 0x14
    440a:	00 80       	ld	r0, Z
    440c:	8b 89       	ldd	r24, Y+19	; 0x13
    440e:	9c 89       	ldd	r25, Y+20	; 0x14
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	9c 8b       	std	Y+20, r25	; 0x14
    4414:	8b 8b       	std	Y+19, r24	; 0x13
    4416:	e9 89       	ldd	r30, Y+17	; 0x11
    4418:	fa 89       	ldd	r31, Y+18	; 0x12
    441a:	00 82       	st	Z, r0
    441c:	89 89       	ldd	r24, Y+17	; 0x11
    441e:	9a 89       	ldd	r25, Y+18	; 0x12
    4420:	01 96       	adiw	r24, 0x01	; 1
    4422:	9a 8b       	std	Y+18, r25	; 0x12
    4424:	89 8b       	std	Y+17, r24	; 0x11
    4426:	9d 89       	ldd	r25, Y+21	; 0x15
    4428:	91 50       	subi	r25, 0x01	; 1
    442a:	9d 8b       	std	Y+21, r25	; 0x15
    442c:	ed 89       	ldd	r30, Y+21	; 0x15
    442e:	ee 23       	and	r30, r30
    4430:	51 f7       	brne	.-44     	; 0x4406 <main+0x34>
	LCD_CustomChar(0,player);
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	9e 01       	movw	r18, r28
    4436:	2f 5f       	subi	r18, 0xFF	; 255
    4438:	3f 4f       	sbci	r19, 0xFF	; 255
    443a:	b9 01       	movw	r22, r18
    443c:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_CustomChar>

	/*Ball*/
	u8 ball[] = {0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00};
    4440:	ce 01       	movw	r24, r28
    4442:	09 96       	adiw	r24, 0x09	; 9
    4444:	9f 8b       	std	Y+23, r25	; 0x17
    4446:	8e 8b       	std	Y+22, r24	; 0x16
    4448:	e7 ef       	ldi	r30, 0xF7	; 247
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	f9 8f       	std	Y+25, r31	; 0x19
    444e:	e8 8f       	std	Y+24, r30	; 0x18
    4450:	f8 e0       	ldi	r31, 0x08	; 8
    4452:	fa 8f       	std	Y+26, r31	; 0x1a
    4454:	e8 8d       	ldd	r30, Y+24	; 0x18
    4456:	f9 8d       	ldd	r31, Y+25	; 0x19
    4458:	00 80       	ld	r0, Z
    445a:	88 8d       	ldd	r24, Y+24	; 0x18
    445c:	99 8d       	ldd	r25, Y+25	; 0x19
    445e:	01 96       	adiw	r24, 0x01	; 1
    4460:	99 8f       	std	Y+25, r25	; 0x19
    4462:	88 8f       	std	Y+24, r24	; 0x18
    4464:	ee 89       	ldd	r30, Y+22	; 0x16
    4466:	ff 89       	ldd	r31, Y+23	; 0x17
    4468:	00 82       	st	Z, r0
    446a:	8e 89       	ldd	r24, Y+22	; 0x16
    446c:	9f 89       	ldd	r25, Y+23	; 0x17
    446e:	01 96       	adiw	r24, 0x01	; 1
    4470:	9f 8b       	std	Y+23, r25	; 0x17
    4472:	8e 8b       	std	Y+22, r24	; 0x16
    4474:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4476:	91 50       	subi	r25, 0x01	; 1
    4478:	9a 8f       	std	Y+26, r25	; 0x1a
    447a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    447c:	ee 23       	and	r30, r30
    447e:	51 f7       	brne	.-44     	; 0x4454 <main+0x82>
	LCD_CustomChar(1,ball);
    4480:	9e 01       	movw	r18, r28
    4482:	27 5f       	subi	r18, 0xF7	; 247
    4484:	3f 4f       	sbci	r19, 0xFF	; 255
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	b9 01       	movw	r22, r18
    448a:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_CustomChar>


    while(1)
    {
    	left_To_Right();
    448e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <left_To_Right>
    	Right_To_Left();
    4492:	0e 94 36 1a 	call	0x346c	; 0x346c <Right_To_Left>
    4496:	fb cf       	rjmp	.-10     	; 0x448e <main+0xbc>

00004498 <__udivmodhi4>:
    4498:	aa 1b       	sub	r26, r26
    449a:	bb 1b       	sub	r27, r27
    449c:	51 e1       	ldi	r21, 0x11	; 17
    449e:	07 c0       	rjmp	.+14     	; 0x44ae <__udivmodhi4_ep>

000044a0 <__udivmodhi4_loop>:
    44a0:	aa 1f       	adc	r26, r26
    44a2:	bb 1f       	adc	r27, r27
    44a4:	a6 17       	cp	r26, r22
    44a6:	b7 07       	cpc	r27, r23
    44a8:	10 f0       	brcs	.+4      	; 0x44ae <__udivmodhi4_ep>
    44aa:	a6 1b       	sub	r26, r22
    44ac:	b7 0b       	sbc	r27, r23

000044ae <__udivmodhi4_ep>:
    44ae:	88 1f       	adc	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	5a 95       	dec	r21
    44b4:	a9 f7       	brne	.-22     	; 0x44a0 <__udivmodhi4_loop>
    44b6:	80 95       	com	r24
    44b8:	90 95       	com	r25
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	08 95       	ret

000044c0 <__divmodsi4>:
    44c0:	97 fb       	bst	r25, 7
    44c2:	09 2e       	mov	r0, r25
    44c4:	05 26       	eor	r0, r21
    44c6:	0e d0       	rcall	.+28     	; 0x44e4 <__divmodsi4_neg1>
    44c8:	57 fd       	sbrc	r21, 7
    44ca:	04 d0       	rcall	.+8      	; 0x44d4 <__divmodsi4_neg2>
    44cc:	14 d0       	rcall	.+40     	; 0x44f6 <__udivmodsi4>
    44ce:	0a d0       	rcall	.+20     	; 0x44e4 <__divmodsi4_neg1>
    44d0:	00 1c       	adc	r0, r0
    44d2:	38 f4       	brcc	.+14     	; 0x44e2 <__divmodsi4_exit>

000044d4 <__divmodsi4_neg2>:
    44d4:	50 95       	com	r21
    44d6:	40 95       	com	r20
    44d8:	30 95       	com	r19
    44da:	21 95       	neg	r18
    44dc:	3f 4f       	sbci	r19, 0xFF	; 255
    44de:	4f 4f       	sbci	r20, 0xFF	; 255
    44e0:	5f 4f       	sbci	r21, 0xFF	; 255

000044e2 <__divmodsi4_exit>:
    44e2:	08 95       	ret

000044e4 <__divmodsi4_neg1>:
    44e4:	f6 f7       	brtc	.-4      	; 0x44e2 <__divmodsi4_exit>
    44e6:	90 95       	com	r25
    44e8:	80 95       	com	r24
    44ea:	70 95       	com	r23
    44ec:	61 95       	neg	r22
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	8f 4f       	sbci	r24, 0xFF	; 255
    44f2:	9f 4f       	sbci	r25, 0xFF	; 255
    44f4:	08 95       	ret

000044f6 <__udivmodsi4>:
    44f6:	a1 e2       	ldi	r26, 0x21	; 33
    44f8:	1a 2e       	mov	r1, r26
    44fa:	aa 1b       	sub	r26, r26
    44fc:	bb 1b       	sub	r27, r27
    44fe:	fd 01       	movw	r30, r26
    4500:	0d c0       	rjmp	.+26     	; 0x451c <__udivmodsi4_ep>

00004502 <__udivmodsi4_loop>:
    4502:	aa 1f       	adc	r26, r26
    4504:	bb 1f       	adc	r27, r27
    4506:	ee 1f       	adc	r30, r30
    4508:	ff 1f       	adc	r31, r31
    450a:	a2 17       	cp	r26, r18
    450c:	b3 07       	cpc	r27, r19
    450e:	e4 07       	cpc	r30, r20
    4510:	f5 07       	cpc	r31, r21
    4512:	20 f0       	brcs	.+8      	; 0x451c <__udivmodsi4_ep>
    4514:	a2 1b       	sub	r26, r18
    4516:	b3 0b       	sbc	r27, r19
    4518:	e4 0b       	sbc	r30, r20
    451a:	f5 0b       	sbc	r31, r21

0000451c <__udivmodsi4_ep>:
    451c:	66 1f       	adc	r22, r22
    451e:	77 1f       	adc	r23, r23
    4520:	88 1f       	adc	r24, r24
    4522:	99 1f       	adc	r25, r25
    4524:	1a 94       	dec	r1
    4526:	69 f7       	brne	.-38     	; 0x4502 <__udivmodsi4_loop>
    4528:	60 95       	com	r22
    452a:	70 95       	com	r23
    452c:	80 95       	com	r24
    452e:	90 95       	com	r25
    4530:	9b 01       	movw	r18, r22
    4532:	ac 01       	movw	r20, r24
    4534:	bd 01       	movw	r22, r26
    4536:	cf 01       	movw	r24, r30
    4538:	08 95       	ret

0000453a <__prologue_saves__>:
    453a:	2f 92       	push	r2
    453c:	3f 92       	push	r3
    453e:	4f 92       	push	r4
    4540:	5f 92       	push	r5
    4542:	6f 92       	push	r6
    4544:	7f 92       	push	r7
    4546:	8f 92       	push	r8
    4548:	9f 92       	push	r9
    454a:	af 92       	push	r10
    454c:	bf 92       	push	r11
    454e:	cf 92       	push	r12
    4550:	df 92       	push	r13
    4552:	ef 92       	push	r14
    4554:	ff 92       	push	r15
    4556:	0f 93       	push	r16
    4558:	1f 93       	push	r17
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	ca 1b       	sub	r28, r26
    4564:	db 0b       	sbc	r29, r27
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	09 94       	ijmp

00004572 <__epilogue_restores__>:
    4572:	2a 88       	ldd	r2, Y+18	; 0x12
    4574:	39 88       	ldd	r3, Y+17	; 0x11
    4576:	48 88       	ldd	r4, Y+16	; 0x10
    4578:	5f 84       	ldd	r5, Y+15	; 0x0f
    457a:	6e 84       	ldd	r6, Y+14	; 0x0e
    457c:	7d 84       	ldd	r7, Y+13	; 0x0d
    457e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4580:	9b 84       	ldd	r9, Y+11	; 0x0b
    4582:	aa 84       	ldd	r10, Y+10	; 0x0a
    4584:	b9 84       	ldd	r11, Y+9	; 0x09
    4586:	c8 84       	ldd	r12, Y+8	; 0x08
    4588:	df 80       	ldd	r13, Y+7	; 0x07
    458a:	ee 80       	ldd	r14, Y+6	; 0x06
    458c:	fd 80       	ldd	r15, Y+5	; 0x05
    458e:	0c 81       	ldd	r16, Y+4	; 0x04
    4590:	1b 81       	ldd	r17, Y+3	; 0x03
    4592:	aa 81       	ldd	r26, Y+2	; 0x02
    4594:	b9 81       	ldd	r27, Y+1	; 0x01
    4596:	ce 0f       	add	r28, r30
    4598:	d1 1d       	adc	r29, r1
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	ed 01       	movw	r28, r26
    45a6:	08 95       	ret

000045a8 <_exit>:
    45a8:	f8 94       	cli

000045aa <__stop_program>:
    45aa:	ff cf       	rjmp	.-2      	; 0x45aa <__stop_program>
